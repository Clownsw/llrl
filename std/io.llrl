(no-implicit-std)

(import "std/prelude/stage-1" _)
(import "std/iterator" _)
(import "std/memory" Ptr)
(import "std/string" string/c-compatible-ptr)
(import "std/string-writer" string-writer)
(import "std/io/error" _)
(import "std/io/path" _)
(import "std/io/file" _)
(import "std/io/directory" _)
(export IoError io-error:_ io-error/_ _.IoError)
(export path canonicalized-path path/_ PathComponent path-component:_ _.PathComponent)
(export File file/_ with-file! _.File)
(export Directory directory/_ with-directory! _.Directory)
(export stdin stdout stderr print! println! eprint! eprintln! fprint! fprintln!)
(export remove! remove-all!)

; NOTE: Should they be abstracted? Currently we are following the C representation.
(c-function stdin {File} "llrt_stdin")
(c-function stdout {File} "llrt_stdout")
(c-function stderr {File} "llrt_stderr")

; copy-file, rename-file, remove-file, create-dir, remove-dir, open-dir

(macro (print! s)
  (s/match s
    [(_ ,@displayables)
      (ok `(,\display-all! (,\string-writer ,\stdout) ,@displayables) {(,\Result unit ,\IoError)})]
    [_
      (err "Expected (print! displayable ...)")]))

(macro (println! s)
  (s/match s
    [(_ ,@displayables)
      (ok `(,\display-all! (,\string-writer ,\stdout) ,@displayables #\\n) {(,\Result unit ,\IoError)})]
    [_
      (err "Expected (println! displayable ...)")]))

(macro (eprint! s)
  (s/match s
    [(_ ,@displayables)
      (ok `(,\display-all! (,\string-writer ,\stderr) ,@displayables) {(,\Result unit ,\IoError)})]
    [_
      (err "Expected (eprint! displayable ...)")]))

(macro (eprintln! s)
  (s/match s
    [(_ ,@displayables)
      (ok `(,\display-all! (,\string-writer ,\stderr) ,@displayables #\\n) {(,\Result unit ,\IoError)})]
    [_
      (err "Expected (eprintln! displayable ...)")]))

(macro (fprint! s)
  (s/match s
    [(_ ,iow ,@displayables)
      (ok `(,\display-all! (,\string-writer ,iow) ,@displayables) {(,\Result unit ,\IoError)})]
    [_
      (err "Expected (fprint! iow displayable ...)")]))

(macro (fprintln! s)
  (s/match s
    [(_ ,iow ,@displayables)
      (ok `(,\display-all! (,\string-writer ,iow) ,@displayables #\\n) {(,\Result unit ,\IoError)})]
    [_
      (err "Expected (fprintln! iow displayable ...)")]))

; Remove the file or the empty directory.
(function (remove! pathname) {(-> String (Result unit IoError))}
  (match (<remove> (string/c-compatible-ptr pathname))
    [0 (ok unit)]
    [_ (err (io-error/from-current-errno))]))

; Remove the all files and directories recursively.
(function (remove-all! pathname) {(-> String (Result unit IoError))}
  (when-match1 (ok (let handle)) (directory/open! pathname)
    (let1 result (remove-directory-contents! pathname handle)
      (ignore (directory/close! handle))
      result !))
  (remove! pathname))

(function (remove-directory-contents! pathname handle) {(-> String Directory (Result unit IoError))}
  (for (let entry) (directory/entries! handle)
    (remove-all! (path pathname entry))!)
  (ok unit))

(c-function <remove> {(-> (Ptr U8) I32)} "remove")
