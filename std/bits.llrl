(no-implicit-std)

(import "std/prelude/stage-1" _)
(import "std/num-literals" _)
(import "std/preprocess" $$)
(import "std/integer" Integer Integer._ Sub._)
(export Bits bw<< bw>> bw& bw| bw^ bw! popcount Bits._ bits)

(class (Bits A)
  (function (bw<< a b) {(-> A A A)})
  (function (bw>> a b) {(-> A A A)})
  (function (bw& a b) {(-> A A A)})
  (function (bw| a b) {(-> A A A)})
  (function (bw^ a b) {(-> A A A)})
  (function (bw! a) {(-> A A)})
  (function (popcount a) {(-> A A)}))

($$ begin
  ($for-each $ty (I8 I16 I32 I64)
    (instance ($symbol-concat Bits. $ty) (Bits $ty)
      (transparent-function (bw<< a b) (<integer/shl> a b))
      (transparent-function (bw>> a b) (<integer/ashr> a b))
      (transparent-function (bw& a b) (<integer/and> a b))
      (transparent-function (bw| a b) (<integer/or> a b))
      (transparent-function (bw^ a b) (<integer/xor> a b))
      (transparent-function (bw! a) (<integer/complement> a))
      (transparent-function (popcount a) (<integer/popcount> a))))

  ($for-each $ty (U8 U16 U32 U64)
    (instance ($symbol-concat Bits. $ty) (Bits $ty)
      (transparent-function (bw<< a b) (<integer/shl> a b))
      (transparent-function (bw>> a b) (<integer/lshr> a b))
      (transparent-function (bw& a b) (<integer/and> a b))
      (transparent-function (bw| a b) (<integer/or> a b))
      (transparent-function (bw^ a b) (<integer/xor> a b))
      (transparent-function (bw! a) (<integer/complement> a))
      (transparent-function (popcount a) (<integer/popcount> a)))))

(builtin-op <integer/shl> {(forall A) (-> A A A) (where (Integer A))} "integer.shl")
(builtin-op <integer/ashr> {(forall A) (-> A A A) (where (Integer A))} "integer.ashr")
(builtin-op <integer/lshr> {(forall A) (-> A A A) (where (Integer A))} "integer.lshr")
(builtin-op <integer/and> {(forall A) (-> A A A) (where (Integer A))} "integer.and")
(builtin-op <integer/or> {(forall A) (-> A A A) (where (Integer A))} "integer.or")
(builtin-op <integer/xor> {(forall A) (-> A A A) (where (Integer A))} "integer.xor")
(builtin-op <integer/complement> {(forall A) (-> A A) (where (Integer A))} "integer.complement")
(builtin-op <integer/popcount> {(forall A) (-> A A) (where (Integer A))} "integer.popcount")

(macro (bits s)
  (s/match s
    [(_ ,@ss)
      (expand-bits ss '0)]
    [_
      (err "Expected (bits (value bitwidth) ...)")]))

(function (expand-bits s r) {(-> (Syntax Sexp) (Syntax Sexp) (Result (Syntax Sexp) String))}
  (s/match s
    [()
      (ok r)]
    [([,s ,(s:integer #f (let n))] ,@ss)
      (expand-bits
        ss
        `(,\bw| (,\bw<< ,r ,(s:integer #f n))
                (,\bw& ,s ,(s:integer #f (- (bw<< 1 n) 1)))))]
    [_
      (err "Expected (bits (value bitwidth) ...)")]))
