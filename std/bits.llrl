(no-implicit-std)

(import "std/prelude/stage-0" _)
(import "std/num-literals" _)
(import "std/preprocess" $$)
(import "std/integer" Integer Integer._)
(export Bits bw<< bw>> bw& bw| bw^ bw! Bits._)

(class (Bits A)
  (function (bw<< a b) {(-> A A A)})
  (function (bw>> a b) {(-> A A A)})
  (function (bw& a b) {(-> A A A)})
  (function (bw| a b) {(-> A A A)})
  (function (bw^ a b) {(-> A A A)})
  (function (bw! a) {(-> A A)}))

($$ begin
  ($for-each $ty (I8 I16 I32 I64)
    (instance ($symbol-concat Bits. $ty) (Bits $ty)
      (transparent-function (bw<< a b) (<integer/shl> a b))
      (transparent-function (bw>> a b) (<integer/ashr> a b))
      (transparent-function (bw& a b) (<integer/and> a b))
      (transparent-function (bw| a b) (<integer/or> a b))
      (transparent-function (bw^ a b) (<integer/xor> a b))
      (transparent-function (bw! a) (<integer/complement> a))))

  ($for-each $ty (U8 U16 U32 U64)
    (instance ($symbol-concat Bits. $ty) (Bits $ty)
      (transparent-function (bw<< a b) (<integer/shl> a b))
      (transparent-function (bw>> a b) (<integer/lshr> a b))
      (transparent-function (bw& a b) (<integer/and> a b))
      (transparent-function (bw| a b) (<integer/or> a b))
      (transparent-function (bw^ a b) (<integer/xor> a b))
      (transparent-function (bw! a) (<integer/complement> a)))))

(builtin-op <integer/shl> {(forall A) (-> A A A) (where (Integer A))} "integer.shl")
(builtin-op <integer/ashr> {(forall A) (-> A A A) (where (Integer A))} "integer.ashr")
(builtin-op <integer/lshr> {(forall A) (-> A A A) (where (Integer A))} "integer.lshr")
(builtin-op <integer/and> {(forall A) (-> A A A) (where (Integer A))} "integer.and")
(builtin-op <integer/or> {(forall A) (-> A A A) (where (Integer A))} "integer.or")
(builtin-op <integer/xor> {(forall A) (-> A A A) (where (Integer A))} "integer.xor")
(builtin-op <integer/complement> {(forall A) (-> A A) (where (Integer A))} "integer.complement")
