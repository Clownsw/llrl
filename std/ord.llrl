(no-implicit-std)

(import "std/prelude/stage-0" _)
(import "std/s" s/_)
(import "std/never" Never never)
(import "std/derive" derive/_)
(import "std/control" _)
(import "std/bool" Bool &&)
(import "std/eq" Eq eq? ne? Eq.Bool Eq.Never)
(import "std/ordering" Ordering ordering:_ ordering/_ Eq.Ordering)
(export Ord compare lt? le? gt? ge? < > <= >= min max Ord._ derive/Ord)

(class (Ord A) (where (Eq A))
  (function (compare a b) {(-> A A Ordering)}
    (if (eq? a b)
      ordering:equal
      (if (le? a b)
        ordering:less
        ordering:greater)))
  (transparent-function (lt? a b) {(-> A A Bool)}
    (eq? (compare a b) ordering:less))
  (transparent-function (le? a b) {(-> A A Bool)}
    (ne? (compare a b) ordering:greater))
  (transparent-function (gt? a b) {(-> A A Bool)}
    (eq? (compare a b) ordering:greater))
  (transparent-function (ge? a b) {(-> A A Bool)}
    (ne? (compare a b) ordering:less)))

(macro (< s) (compare-chain-entry \lt? s))
(macro (> s) (compare-chain-entry \gt? s))
(macro (<= s) (compare-chain-entry \le? s))
(macro (>= s) (compare-chain-entry \ge? s))

(function (compare-chain-entry pred s)
  (s/match s
    [(_)
      (ok '#t)]
    [(_ _)
      (ok '#t)]
    [(_ ,a ,b)
      (ok `(,pred ,a ,b))]
    [(_ ,a ,@bs)
      @let ([tmp-a (gensym)])
      (ok
        `(let ([,tmp-a ,a])
          ,(compare-chain pred tmp-a bs)))]
    [_
      (err "Expected (_ expr ...)")]))

(function (compare-chain pred a bs)
  (s/match bs
    [(,b)
      `(,pred ,a ,b)]
    [(,b ,@bs)
      @let ([tmp-b (gensym)])
      `(let ([,tmp-b ,b])
        (,\&& (,pred ,a ,tmp-b) ,(compare-chain pred tmp-b bs)))]
    [_
      '#t]))

(macro (min s)
  (s/match s
    [(_ ,expr ,@exprs)
      (s/foldl (lambda (a b) `(,\min2 ,a ,b)) expr exprs)]
    [_
      (err "Expected (min expr ...)")]))

(macro (max s)
  (s/match s
    [(_ ,expr ,@exprs)
      (s/foldl (lambda (a b) `(,\max2 ,a ,b)) expr exprs)]
    [_
      (err "Expected (max expr ...)")]))

(function (min2 a b) {(forall A) (-> A A A) (where (Ord A))}
  (if (le? a b) a b))

(function (max2 a b) {(forall A) (-> A A A) (where (Ord A))}
  (if (ge? a b) a b))

(instance Ord.Never (Ord Never)
  (transparent-function (compare a b) (never a) (never b)))

(instance Ord.Bool (Ord Bool)
  (transparent-function (lt? a b) (<bool/lt?> a b))
  (transparent-function (le? a b) (<bool/le?> a b))
  (transparent-function (gt? a b) (<bool/gt?> a b))
  (transparent-function (ge? a b) (<bool/ge?> a b)))

(builtin-op <bool/lt?> {(-> Bool Bool Bool)} "unsigned.lt")
(builtin-op <bool/le?> {(-> Bool Bool Bool)} "unsigned.le")
(builtin-op <bool/gt?> {(-> Bool Bool Bool)} "unsigned.gt")
(builtin-op <bool/ge?> {(-> Bool Bool Bool)} "unsigned.ge")

(instance Ord.Ordering (Ord Ordering)
  (transparent-function (lt? a b) (<ordering/lt?> a b))
  (transparent-function (le? a b) (<ordering/le?> a b))
  (transparent-function (gt? a b) (<ordering/gt?> a b))
  (transparent-function (ge? a b) (<ordering/ge?> a b)))

(builtin-op <ordering/lt?> {(-> Ordering Ordering Bool)} "unsigned.lt")
(builtin-op <ordering/le?> {(-> Ordering Ordering Bool)} "unsigned.le")
(builtin-op <ordering/gt?> {(-> Ordering Ordering Bool)} "unsigned.gt")
(builtin-op <ordering/ge?> {(-> Ordering Ordering Bool)} "unsigned.ge")

(macro (derive/Ord s)
  (s/match s
    [(_ _ ,type-con ,@value-cons)
      @let (
        [inst-name (derive/symbol/concat 'Ord. (derive/data/type-con/name type-con))!]
        [inst-signature (derive/data/type-con/instance-signature \Ord type-con)!]
        [match-body (comparison-clauses value-cons)!])
      (ok
        `(instance ,inst-name ,@inst-signature
          (function (compare a b)
            (match (: a b)
              ,@match-body))))]
    [_
      (err "Unsupported derivation")]))

(function (comparison-clauses value-cons)
  (ok (match value-cons
    [(s:list (let value-con))
      `(,(comparison-clause value-con)!)]
    [(s:cons (let value-con) (let value-cons))
      `(,(comparison-clause value-con)!
        ,@(comparison-clause-default value-con)!
        ,@(comparison-clauses value-cons)!)]
    [_
      `([_ ,\ordering:equal])])))

(function (comparison-clause value-con)
  @let (
    [con-name (derive/data/value-con/name value-con)]
    [con-fields (derive/data/value-con/fields value-con)])
  (ok (if-match1 (some (let fields)) con-fields
    (let ([l-names (s/map [^1 (gensym)] fields)!]
          [r-names (s/map [^1 (gensym)] fields)!])
      `[(: (,con-name ,@(s/map [^1 `(let ,%1)] l-names)!) (,con-name ,@(s/map [^1 `(let ,%1)] r-names)!))
        (,\ordering/or ,@(s/zip [^2 `(,\compare ,%1 ,%2)] l-names r-names)!)])
    `[(: ,con-name ,con-name) ,\ordering:equal])))

(function (comparison-clause-default value-con)
  @let (
    [con-name (derive/data/value-con/name value-con)]
    [con-fields (derive/data/value-con/fields value-con)])
  (ok (if-match1 (some (let fields)) con-fields
    `([(: (,con-name ,@(s/map [^1 '_] fields)!) _) ,\ordering:less]
      [(: _ (,con-name ,@(s/map [^1 '_] fields)!)) ,\ordering:greater])
    `([(: ,con-name _) ,\ordering:less]
      [(: _ ,con-name) ,\ordering:greater]))))
