(import "std/preprocess" _)

(assert-is? (s:list (s:symbol "$foo") (s:bool #t) (s:string "bar") (s:symbol "$baz"))
  ($$
    ($let ()
      '($foo #t "bar" $baz))))

(assert-is? (s:list (s:string "hoge") (s:bool #t) (s:string "bar") (s:symbol "$baz"))
  ($$
    ($let ([$foo "hoge"])
      '($foo #t "bar" $baz))))

(assert-is? (s:list (s:string "hoge") (s:bool #t) (s:string "bar") (s:symbol "foobar"))
  ($$
    ($let ([$foo "hoge"]
          [$bar "fuga"]
          [$baz foobar])
      '($foo #t "bar" $baz))))

(assert-is? (s:list (s:string "hoge") (s:bool #t) (s:string "bar") (s:symbol "$baz"))
  ($$
    ($let ([$foo "hoge"]
          [$bar "fuga"]
          [$baz foobar])
      '($foo #t "bar" ($cut $baz)))))

(assert-is? (s:list)
  ($$ s:list ($for-each [] () 'foo)))

(assert-is? (s:list (s:symbol "foo"))
  ($$ s:list ($for-each [] ([]) 'foo)))

(assert-is? (s:list (s:bool #t))
  ($$ s:list ($for-each [$foo] ([#t]) '$foo)))

(assert-is? (s:list (s:bool #t) (s:bool #f))
  ($$ s:list ($for-each $foo (#t #f) '$foo)))

(assert-is? (s:list (s:cons (s:bool #t) (s:string "a"))
                    (s:cons (s:bool #f) (s:string "b"))
                    (s:cons (s:bool #t) (s:string "c")))
  ($$ s:list ($for-each [$a $b] ([#t "a"] [#f "b"] [#t "c"]) '($a . $b))))

(assert-is? (s:symbol "foobarbaz")
  ($$ '($symbol-concat foo bar baz)))

(assert-is? (s:list (s:symbol "cab") (s:symbol "fde") (s:symbol "igh"))
  ($$ s:list
    ($for-each [$a $b $c] ([a b c] [d e f] [g h i])
      ($let ([$d ($symbol-concat $a $b)])
        '($symbol-concat $c $d)))))
