(import "std/ref" _)
(println! "std/tests/ref")

(import "std/tests/ord" [ord/_ _])

(assert-eq? (ref #t) (ref #t))
(assert-ne? (ref #t) (ref #f))

(assert-eq? (ref #f) default)

(ord/test12 (ref #f) (ref #t))

(assert ~(ref #t))

(function (fib x)
  (let ([a (ref 0)]
        [b (ref 1)]
        [i (ref 1)])
    (while (< ~i x)
      (let ([c (+ ~a ~b)])
        (set! a ~b)
        (set! b c)
        (set! i (+ ~i 1))))
    ~b))
(assert-eq? (fib 20) 6765)

(let* ([x (ref 1)]
       [y (deep-copy x)])
  (set! x 3)
  (set! y 4)
  (assert-eq? ~x 3)
  (assert-eq? ~y 4))

(let* ([x (ref (ref 1))]
       [y (deep-copy x)]
       [z (shallow-copy x)])
  (set! ~x 3)
  (set! ~y 4)
  (set! ~z 5)
  (assert-eq? ~ ~x 5)
  (assert-eq? ~ ~y 4)
  (assert-eq? ~ ~z 5))

(assert-eq? (string (ref #t)) "#t")
(assert-eq? (string (debug (ref #t))) "(ref #t)")
