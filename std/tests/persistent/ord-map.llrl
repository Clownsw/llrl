(import "std/persistent/ord-map" _)
(import "std/tests/hash" h)

(let* ([a ord-map/empty]
       [b (ord-map/insert #t #f a)]
       [c (ord-map/insert #f #t b)])
  (assert (ord-map/empty? a))
  (assert (not (ord-map/empty? b)))
  (assert (not (ord-map/empty? c)))
  (assert (not (ord-map/has? #t a)))
  (assert (ord-map/has? #t b))
  (assert (ord-map/has? #t c))
  (assert-eq? none (ord-map/get? #f a))
  (assert-eq? none (ord-map/get? #f b))
  (assert-eq? (some #t) (ord-map/get? #f c))
  (assert-eq? (some #f) (ord-map/get? #t b))
  (assert-eq? (some #f) (ord-map/get? #t c)))

(let* ([a (ord-map (: (some #t) #f) (: none #t))]
       [b (ord-map/remove none a)]
       [c (ord-map/remove (some #t) b)])
  (assert-eq? (some #t) (ord-map/get? none a))
  (assert-eq? (some #f) (ord-map/get? (some #t) a))
  (assert-eq? none (ord-map/get? (some #f) a))
  (assert-eq? none (ord-map/get? none b))
  (assert-eq? (some #f) (ord-map/get? (some #t) b))
  (assert-eq? none (ord-map/get? none c))
  (assert-eq? none (ord-map/get? (some #t) c)))

(let1 tree (ord-map/collect (array (: 1 "one") (: 2 "two") (: 3 "three")))
  (assert-eq? (some "one") (ord-map/get? 1 tree))
  (assert-eq? (some "two") (ord-map/get? 2 tree))
  (assert-eq? (some "three") (ord-map/get? 3 tree))
  (assert-eq? none (ord-map/get? 4 tree)))

(let* ([a (ord-map (: 1 2) (: 3 4) (: 5 6))]
       [b (ord-map (: 3 3) (: 4 4) (: 5 6))])
  (assert-eq? (ord-map/union a b) (ord-map (: 1 2) (: 3 4) (: 4 4) (: 5 6)))
  (assert-eq? (ord-map/union* [^3 (* %2 %3)] a b) (ord-map (: 1 2) (: 3 12) (: 4 4) (: 5 36)))
  (assert-eq? (ord-map/intersection a b) (ord-map (: 3 4) (: 5 6)))
  (assert-eq? (ord-map/intersection* [^3 (* %2 %3)] a b) (ord-map (: 3 12) (: 5 36)))
  (assert-eq? (ord-map/difference a b) (ord-map (: 1 2) (: 4 4)))
  (assert-eq? (ord-map/difference* [^3 (if (eq? %2 %3) (some %2) none)] a b) (ord-map (: 1 2) (: 4 4) (: 5 6))))

(function size 1000)

(function patterns
  (array
    [^0 (iterator/range 0 size 1)]
    [^0 (it/map [^1 (- size 1 %1)] (iterator/range 0 size 1))]
    [^0 (it/map [^1 (% (* %1 3) size)] (iterator/range 0 size 1))]
    [^0 (it/map [^1 (% (* %1 7) size)] (iterator/range 0 size 1))]
    [^0 (it/map [^1 (% (* %1 41) size)] (iterator/range 0 size 1))]))

(for (let p) patterns
  (let1 tree (ref ord-map/empty)
    (for (let i) (p)
      (set! tree (ord-map/insert i (* i 2) ~tree)))
    (assert-eq?
      (|> (iterator/range 0 size 1) (it/map [^1 (: %1 (* %1 2))]) collect)
      (collect (ord-map/elems ~tree)) {(Array (: I32 I32))})))

(for (: (let i) (let p)) (it/with-index patterns)
  (for (: (let j) (let q)) (it/with-index patterns)
    (let ([tree (ref ord-map/empty)]
          [exclude-index (+ (* (cast i) 10) (cast j))])
      (for (let i) (it/filter [^1 (ne? %1 exclude-index)] (q))
        (set! tree (ord-map/insert i (* i 2) ~tree)))
      (for (let i) (q)
        (assert-eq? (ord-map/get? i ~tree) (if (eq? i exclude-index) none (some (* i 2))))
        (set! tree (ord-map/remove i ~tree)))
      (assert (ord-map/empty? ~tree)))))

(assert (ord-map/empty? default))

(assert-eq? (string (debug (ord-map (: 1 2) (: 3 4) (: 7 8) (: 5 6))))
            "(ord-map (: 1 2) (: 3 4) (: 5 6) (: 7 8))")

(assert-eq? (ord-map) (ord-map))
(assert-ne? (ord-map) (ord-map (: 1 0)))
(assert-eq? (ord-map (: 1 0)) (ord-map (: 1 0)))
(assert-ne? (ord-map (: 1 0)) (ord-map (: 1 1)))
(assert-ne? (ord-map (: 1 0)) (ord-map (: 0 0)))
(assert-ne? (ord-map (: 1 0)) (ord-map (: 0 1)))
(assert-ne? (ord-map (: 1 0)) (ord-map (: 1 0) (: 2 0)))
(assert-ne? (ord-map (: 2 0)) (ord-map (: 1 0) (: 2 0)))

(assert (not (< (ord-map) (ord-map))))
(assert (< (ord-map) (ord-map (: 0 0))))
(assert (< (ord-map (: 0 0)) (ord-map (: 0 1))))
(assert (< (ord-map (: 0 0)) (ord-map (: 1 0))))
(assert (< (ord-map (: 0 0) (: 1 1)) (ord-map (: 1 0))))
(assert (< (ord-map (: 0 0) (: 1 1)) (ord-map (: 0 1))))
(assert (not (< (ord-map (: 0 0) (: 1 1)) (ord-map (: 0 0)))))
(assert (not (< (ord-map (: 0 0) (: 1 1)) (ord-map (: 0 0) (: 1 0)))))
(assert (< (ord-map (: 0 0) (: 1 1)) (ord-map (: 0 0) (: 1 2))))

(assert-eq? (h (ord-map)) (h (ord-map)))
(assert-ne? (h (ord-map)) (h (ord-map (: 1 0))))
(assert-eq? (h (ord-map (: 1 0))) (h (ord-map (: 1 0))))
(assert-ne? (h (ord-map (: 1 0))) (h (ord-map (: 1 1))))
(assert-ne? (h (ord-map (: 1 0))) (h (ord-map (: 0 0))))
(assert-ne? (h (ord-map (: 1 0))) (h (ord-map (: 0 1))))
(assert-ne? (h (ord-map (: 1 0))) (h (ord-map (: 1 0) (: 2 0))))
(assert-ne? (h (ord-map (: 2 0))) (h (ord-map (: 1 0) (: 2 0))))
