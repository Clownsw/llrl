(import "std/persistent/hash-map" _)
(import "std/ord-map" _)
(import "std/tests/hash" h)

(let* ([a hash-map/empty]
       [b (hash-map/insert #t #f a)]
       [c (hash-map/insert #f #t b)])
  (assert (hash-map/empty? a))
  (assert (not (hash-map/empty? b)))
  (assert (not (hash-map/empty? c)))
  (assert (not (hash-map/has? #t a)))
  (assert (hash-map/has? #t b))
  (assert (hash-map/has? #t c))
  (assert-eq? 2 (hash-map/length c))
  (assert-eq? 2 (hash-map/length (hash-map/insert #t #t c)))
  (assert-eq? none (hash-map/get? #f a))
  (assert-eq? none (hash-map/get? #f b))
  (assert-eq? (some #t) (hash-map/get? #f c))
  (assert-eq? (some #f) (hash-map/get? #t b))
  (assert-eq? (some #f) (hash-map/get? #t c)))

(let* ([a (hash-map (: (some #t) #f) (: none #t))]
       [b (hash-map/remove none a)]
       [c (hash-map/remove (some #t) b)])
  (assert-eq? 0 (hash-map/length c))
  (assert-eq? 1 (hash-map/length (hash-map/remove (some #f) b)))
  (assert-eq? (some #t) (hash-map/get? none a))
  (assert-eq? (some #f) (hash-map/get? (some #t) a))
  (assert-eq? none (hash-map/get? (some #f) a))
  (assert-eq? none (hash-map/get? none b))
  (assert-eq? (some #f) (hash-map/get? (some #t) b))
  (assert-eq? none (hash-map/get? none c))
  (assert-eq? none (hash-map/get? (some #t) c)))

(let1 map (hash-map/collect (array (: 1 "one") (: 2 "two") (: 3 "three")))
  (assert-eq? (some "one") (hash-map/get? 1 map))
  (assert-eq? (some "two") (hash-map/get? 2 map))
  (assert-eq? (some "three") (hash-map/get? 3 map))
  (assert-eq? none (hash-map/get? 4 map)))

(function size 1000)

(function patterns
  (array
    [^0 (iterator/range 0 size 1)]
    [^0 (it/map [^1 (- size 1 %1)] (iterator/range 0 size 1))]
    [^0 (it/map [^1 (% (* %1 3) size)] (iterator/range 0 size 1))]
    [^0 (it/map [^1 (% (* %1 7) size)] (iterator/range 0 size 1))]
    [^0 (it/map [^1 (% (* %1 41) size)] (iterator/range 0 size 1))]))

(for (let p) patterns
  (let1 map (ref hash-map/empty)
    (for (let i) (p)
      (set! map (hash-map/insert i (* i 2) ~map)))
    (assert-eq?
      (|> (iterator/range 0 size 1) (it/map [^1 (: %1 (* %1 2))]) ord-map/collect)
      (|> ~map hash-map/elems ord-map/collect))))

(for (: (let i) (let p)) (it/with-index patterns)
  (for (: (let j) (let q)) (it/with-index patterns)
    (let ([map (ref hash-map/empty)]
          [exclude-index (+ (* (cast i) 10) (cast j))])
      (for (let i) (it/filter [^1 (ne? %1 exclude-index)] (q))
        (set! map (hash-map/insert i (* i 2) ~map)))
      (for (let i) (q)
        (assert-eq? (hash-map/get? i ~map) (if (eq? i exclude-index) none (some (* i 2))))
        (set! map (hash-map/remove i ~map)))
      (assert (hash-map/empty? ~map)))))

(assert (hash-map/empty? default))

(let1 s (string (debug (hash-map (: 1 2) (: 3 4) (: 7 8) (: 5 6))))
  (assert (string/contains? "(: 1 2)" s))
  (assert (string/contains? "(: 3 4)" s))
  (assert (string/contains? "(: 5 6)" s))
  (assert (string/contains? "(: 7 8)" s))
  (assert-eq? (string/length "(hash-map (: 1 2) (: 3 4) (: 5 6) (: 7 8))") (string/length s)))

(let1 map (ref hash-map/empty)
  (for (let i) (iterator/range 0 1000 1)
    (set! map (hash-map/insert i (ref (* i 2)) ~map)))
  (let1 m (deep-copy ~map)
    (for (let i) (iterator/range 0 1000 1)
      (when-match1 (some (let a)) (hash-map/get? i ~map)
        (set! a 0)))
    (assert-eq?
      (|> (iterator/range 0 1000 1) (it/map [^1 (: %1 (* %1 2))]) ord-map/collect)
      (|> m hash-map/elems (it/map (case1 (: (let a) (let b)) (: a ~b))) ord-map/collect))))

(assert-eq? (hash-map) (hash-map))
(assert-ne? (hash-map) (hash-map (: 1 0)))
(assert-eq? (hash-map (: 1 0)) (hash-map (: 1 0)))
(assert-ne? (hash-map (: 1 0)) (hash-map (: 1 1)))
(assert-ne? (hash-map (: 1 0)) (hash-map (: 0 0)))
(assert-ne? (hash-map (: 1 0)) (hash-map (: 0 1)))
(assert-ne? (hash-map (: 1 0)) (hash-map (: 1 0) (: 2 0)))
(assert-ne? (hash-map (: 2 0)) (hash-map (: 1 0) (: 2 0)))
