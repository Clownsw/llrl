(import "std/hash-map" _)
(println! "std/tests/hash-map")

(import "std/ord-map" _)

(assert-eq? (next-power-of-two 2) 2)
(assert-eq? (next-power-of-two 3) 4)
(assert-eq? (next-power-of-two 10) 16)
(assert-eq? (next-power-of-two 4000000000000000000) 4611686018427387904)

(assert (hash-map/empty? hash-map/empty))
(assert-eq? 0 (hash-map/length hash-map/empty))
(assert-eq? none (hash-map/get? unit hash-map/empty))
(assert (not (hash-map/has? unit hash-map/empty)))

(let1 map hash-map/empty
  (assert-eq? none (hash-map/insert! unit #t map))
  (assert (not (hash-map/empty? map)))
  (assert-eq? 1 (hash-map/length map))
  (assert-eq? (some #t) (hash-map/get? unit map))
  (assert (hash-map/has? unit map))
  (assert-eq? (some #t) (hash-map/insert! unit #f map))
  (assert-eq? (some #f) (hash-map/get? unit map)))

(let1 map (hash-map (: (some #t) #f) (: none #t))
  (assert-eq? (some #t) (hash-map/get? none map))
  (assert-eq? (some #f) (hash-map/get? (some #t) map))
  (assert-eq? none (hash-map/get? (some #f) map))
  (assert-eq? (some #t) (hash-map/remove! none map))
  (assert-eq? none (hash-map/remove! none map))
  (assert-eq? none (hash-map/get? none map)))

(let1 map (hash-map (: (some #t) #f) (: none #t))
  (hash-map/clear! map)
  (assert-eq? none (hash-map/get? none map))
  (assert-eq? none (hash-map/get? (some #t) map)))

(let1 map (hash-map/collect (array (: 1 "one") (: 2 "two") (: 3 "three")))
  (assert-eq? (some "one") (hash-map/get? 1 map))
  (assert-eq? (some "two") (hash-map/get? 2 map))
  (assert-eq? (some "three") (hash-map/get? 3 map))
  (assert-eq? none (hash-map/get? 4 map)))

(let1 map (hash-map (: 1 "A") (: 3 "B") (: 2 "C"))
  (assert-eq? (ord-map (: 1 "A") (: 2 "C") (: 3 "B"))
              (|> map hash-map/elems ord-map/collect))
  (assert-eq? (ord-map (: 1 unit) (: 2 unit) (: 3 unit))
              (|> map hash-map/keys (it/map [^1 (: %1 unit)]) ord-map/collect))
  (assert-eq? (ord-map (: "A" unit) (: "B" unit) (: "C" unit))
              (|> map hash-map/values (it/map [^1 (: %1 unit)]) ord-map/collect)))

(function size 1000)

(function patterns
  (array
    [^0 (iterator/range 0 size 1)]
    [^0 (it/map [^1 (- size 1 %1)] (iterator/range 0 size 1))]
    [^0 (it/map [^1 (% (* %1 3) size)] (iterator/range 0 size 1))]
    [^0 (it/map [^1 (% (* %1 7) size)] (iterator/range 0 size 1))]
    [^0 (it/map [^1 (% (* %1 41) size)] (iterator/range 0 size 1))]))

(for (let p) patterns
  (let1 map hash-map/empty
    (for (let i) (p)
      (hash-map/insert! i (* i 2) map))
    (assert-eq?
      (|> (iterator/range 0 size 1) (it/map [^1 (: %1 (* %1 2))]) ord-map/collect)
      (|> map hash-map/elems ord-map/collect))))

(for (: (let i) (let p)) (it/with-index patterns)
  (for (: (let j) (let q)) (it/with-index patterns)
    (let ([map hash-map/empty]
          [exclude-index (+ (* (conv i) 10) (conv j))])
      (for (let i) (it/filter [^1 (ne? %1 exclude-index)] (p))
        (assert-eq? (hash-map/insert! i (* i 2) map) none))
      (for (let i) (it/filter [^1 (ne? %1 exclude-index)] (q))
        (assert-eq? (hash-map/insert! i (* i 3) map) (some (* i 2))))
      (for (let i) (q)
        (assert-eq? (hash-map/remove! i map) (if (eq? i exclude-index) none (some (* i 3)))))
      (assert (hash-map/empty? map)))))

(assert (hash-map/empty? default))

(let1 s (string (debug (hash-map (: 1 2) (: 3 4) (: 7 8) (: 5 6))))
  (assert (string/contains? "(: 1 2)" s))
  (assert (string/contains? "(: 3 4)" s))
  (assert (string/contains? "(: 5 6)" s))
  (assert (string/contains? "(: 7 8)" s))
  (assert-eq? (string/length "(hash-map (: 1 2) (: 3 4) (: 5 6) (: 7 8))") (string/length s)))

(let* ([a (hash-map (: 0 (ref 1)) (: 2 (ref 3)))]
       [b (shallow-copy a)]
       [c (deep-copy a)])
  (hash-map/insert! 4 (ref 5) a)
  (hash-map/insert! 6 (ref 7) b)
  (hash-map/insert! 8 (ref 9) c)
  (set! (option/force (hash-map/get? 0 a)) 11)
  (set! (option/force (hash-map/get? 2 b)) 22)
  (set! (option/force (hash-map/get? 0 c)) 33)
  (assert-eq? a (hash-map (: 0 (ref 11)) (: 2 (ref 22)) (: 4 (ref 5))))
  (assert-eq? b (hash-map (: 0 (ref 11)) (: 2 (ref 22)) (: 6 (ref 7))))
  (assert-eq? c (hash-map (: 0 (ref 33)) (: 2 (ref 3)) (: 8 (ref 9)))))

(assert-eq? (hash-map) (hash-map))
(assert-ne? (hash-map) (hash-map (: 1 0)))
(assert-eq? (hash-map (: 1 0)) (hash-map (: 1 0)))
(assert-ne? (hash-map (: 1 0)) (hash-map (: 1 1)))
(assert-ne? (hash-map (: 1 0)) (hash-map (: 0 0)))
(assert-ne? (hash-map (: 1 0)) (hash-map (: 0 1)))
(assert-ne? (hash-map (: 1 0)) (hash-map (: 1 0) (: 2 0)))
(assert-ne? (hash-map (: 2 0)) (hash-map (: 1 0) (: 2 0)))
