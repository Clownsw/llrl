(import "std/ord-map" _)
(import "std/tests/hash" h)

(assert (ord-map/empty? ord-map/empty))
(assert-eq? 0 (ord-map/length ord-map/empty))
(assert-eq? none (ord-map/get? unit ord-map/empty))
(assert (not (ord-map/has? unit ord-map/empty)))

(let1 tree ord-map/empty
  (assert-eq? none (ord-map/insert! unit #t tree))
  (assert (not (ord-map/empty? tree)))
  (assert-eq? 1 (ord-map/length tree))
  (assert-eq? (some #t) (ord-map/get? unit tree))
  (assert (ord-map/has? unit tree))
  (assert-eq? (some #t) (ord-map/insert! unit #f tree))
  (assert-eq? (some #f) (ord-map/get? unit tree)))

(let1 tree (ord-map (: (some #t) #f) (: none #t))
  (assert-eq? (some #t) (ord-map/get? none tree))
  (assert-eq? (some #f) (ord-map/get? (some #t) tree))
  (assert-eq? none (ord-map/get? (some #f) tree))
  (assert-eq? (some #t) (ord-map/remove! none tree))
  (assert-eq? none (ord-map/remove! none tree))
  (assert-eq? none (ord-map/get? none tree)))

(let1 tree (ord-map (: (some #t) #f) (: none #t))
  (ord-map/clear! tree)
  (assert-eq? none (ord-map/get? none tree))
  (assert-eq? none (ord-map/get? (some #t) tree)))

(let1 tree (ord-map/collect (array (: 1 "one") (: 2 "two") (: 3 "three")))
  (assert-eq? (some "one") (ord-map/get? 1 tree))
  (assert-eq? (some "two") (ord-map/get? 2 tree))
  (assert-eq? (some "three") (ord-map/get? 3 tree))
  (assert-eq? none (ord-map/get? 4 tree)))

(let1 tree (ord-map (: 1 "A") (: 3 "B") (: 2 "C"))
  (assert-eq? (array (: 1 "A") (: 2 "C") (: 3 "B")) (collect (ord-map/elems tree)))
  (assert-eq? (array 1 2 3) (collect (ord-map/keys tree)))
  (assert-eq? (array "A" "C" "B") (collect (ord-map/values tree)))
  (assert-eq? (some (: 1 "A")) (ord-map/get-min? tree))
  (assert-eq? (some (: 3 "B")) (ord-map/get-max? tree))
  (assert-eq? (some (: 1 "A")) (ord-map/remove-min! tree))
  (assert-eq? (some (: 3 "B")) (ord-map/remove-max! tree))
  (assert-eq? (some (: 2 "C")) (ord-map/get-min? tree))
  (assert-eq? (some (: 2 "C")) (ord-map/get-max? tree))
  (assert-eq? (some (: 2 "C")) (ord-map/remove-min! tree))
  (assert-eq? none (ord-map/remove-max! tree))
  (assert-eq? none (ord-map/get-min? tree)))

(function size 1000)

(function patterns
  (array
    [^0 (iterator/range 0 size 1)]
    [^0 (it/map [^1 (- size 1 %1)] (iterator/range 0 size 1))]
    [^0 (it/map [^1 (% (* %1 3) size)] (iterator/range 0 size 1))]
    [^0 (it/map [^1 (% (* %1 7) size)] (iterator/range 0 size 1))]
    [^0 (it/map [^1 (% (* %1 41) size)] (iterator/range 0 size 1))]))

(for (let p) patterns
  (let1 tree ord-map/empty
    (for (let i) (p)
      (ord-map/insert! i (* i 2) tree))
    (assert-eq?
      (|> (iterator/range 0 size 1) (it/map [^1 (: %1 (* %1 2))]) collect)
      (collect (ord-map/elems tree)) {(Array (: I32 I32))})))

(for (: (let i) (let p)) (it/with-index patterns)
  (for (: (let j) (let q)) (it/with-index patterns)
    (let ([tree ord-map/empty]
          [exclude-index (+ (* (cast i) 10) (cast j))])
      (for (let i) (it/filter [^1 (ne? %1 exclude-index)] (p))
        (assert-eq? (ord-map/insert! i (* i 2) tree) none))
      (for (let i) (it/filter [^1 (ne? %1 exclude-index)] (q))
        (assert-eq? (ord-map/insert! i (* i 3) tree) (some (* i 2))))
      (for (let i) (q)
        (assert-eq? (ord-map/remove! i tree) (if (eq? i exclude-index) none (some (* i 3)))))
      (assert (ord-map/empty? tree)))))

(assert (ord-map/empty? default))

(assert-eq? (string (debug (ord-map (: 1 2) (: 3 4) (: 7 8) (: 5 6))))
            "(ord-map (: 1 2) (: 3 4) (: 5 6) (: 7 8))")

(let* ([a (ord-map (: 0 (ref 1)) (: 2 (ref 3)))]
       [b (shallow-copy a)]
       [c (deep-copy a)])
  (ord-map/insert! 4 (ref 5) a)
  (ord-map/insert! 6 (ref 7) b)
  (ord-map/insert! 8 (ref 9) c)
  (set! (option/force (ord-map/get? 0 a)) 11)
  (set! (option/force (ord-map/get? 2 b)) 22)
  (set! (option/force (ord-map/get? 0 c)) 33)
  (assert-eq? a (ord-map (: 0 (ref 11)) (: 2 (ref 22)) (: 4 (ref 5))))
  (assert-eq? b (ord-map (: 0 (ref 11)) (: 2 (ref 22)) (: 6 (ref 7))))
  (assert-eq? c (ord-map (: 0 (ref 33)) (: 2 (ref 3)) (: 8 (ref 9)))))

(assert-eq? (ord-map) (ord-map))
(assert-ne? (ord-map) (ord-map (: 1 0)))
(assert-eq? (ord-map (: 1 0)) (ord-map (: 1 0)))
(assert-ne? (ord-map (: 1 0)) (ord-map (: 1 1)))
(assert-ne? (ord-map (: 1 0)) (ord-map (: 0 0)))
(assert-ne? (ord-map (: 1 0)) (ord-map (: 0 1)))
(assert-ne? (ord-map (: 1 0)) (ord-map (: 1 0) (: 2 0)))
(assert-ne? (ord-map (: 2 0)) (ord-map (: 1 0) (: 2 0)))

(assert (not (< (ord-map) (ord-map))))
(assert (< (ord-map) (ord-map (: 0 0))))
(assert (< (ord-map (: 0 0)) (ord-map (: 0 1))))
(assert (< (ord-map (: 0 0)) (ord-map (: 1 0))))
(assert (< (ord-map (: 0 0) (: 1 1)) (ord-map (: 1 0))))
(assert (< (ord-map (: 0 0) (: 1 1)) (ord-map (: 0 1))))
(assert (not (< (ord-map (: 0 0) (: 1 1)) (ord-map (: 0 0)))))
(assert (not (< (ord-map (: 0 0) (: 1 1)) (ord-map (: 0 0) (: 1 0)))))
(assert (< (ord-map (: 0 0) (: 1 1)) (ord-map (: 0 0) (: 1 2))))

(assert-eq? (h (ord-map)) (h (ord-map)))
(assert-ne? (h (ord-map)) (h (ord-map (: 1 0))))
(assert-eq? (h (ord-map (: 1 0))) (h (ord-map (: 1 0))))
(assert-ne? (h (ord-map (: 1 0))) (h (ord-map (: 1 1))))
(assert-ne? (h (ord-map (: 1 0))) (h (ord-map (: 0 0))))
(assert-ne? (h (ord-map (: 1 0))) (h (ord-map (: 0 1))))
(assert-ne? (h (ord-map (: 1 0))) (h (ord-map (: 1 0) (: 2 0))))
(assert-ne? (h (ord-map (: 2 0))) (h (ord-map (: 1 0) (: 2 0))))
