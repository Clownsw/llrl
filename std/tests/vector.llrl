(import "std/vector" _)
(import "std/array" array/_)
(import "std/memory" ptr:null)

; Same as array
(assert-eq? (vector) default)
(assert-ne? (vector) (vector #t))
(assert-ne? (vector #t) (vector))
(assert-ne? (vector #t) (vector #f))
(assert-eq? (vector #t) (vector #t))
(assert-ne? (vector #t #f) (vector #t #t))
(assert-eq? (vector #t #f) (vector #t #f))

; Same as array
(assert (not (< (vector) (vector))))
(assert (< (vector) (vector 0)))
(assert (< (vector 0) (vector 1)))
(assert (< (vector 0) (vector 1 0)))
(assert (< (vector 0) (vector 0 0)))
(assert (not (< (vector 1) (vector 0 1))))
(assert (< (vector 1) (vector 1 0)))

(let ([a vector/empty]
      [b (vector/new #f 3)]
      [c (vector/from-array (array 1 2 3))]
      [d (vector/with-capacity 3)])
  (assert-eq? a (vector))
  (assert-eq? b (vector #f #f #f))
  (assert-eq? c (vector 1 2 3))
  (assert-eq? d (vector))
  (assert (vector/empty? a))
  (assert (not (vector/empty? b))))

(let1 a (vector 1 2 3)
  (let ([ptr (vector/ptr a)]
        [len (vector/length a)]
        [cap (vector/capacity a)])
    (assert-ne? ptr ptr:null)
    (assert-eq? len 3)
    (assert (<= len cap))
    (assert-eq? (vector 1 2 3) (vector/unsafe-from-ptr ptr len cap))))

(let1 a (vector/with-capacity 5)
  (assert-eq? (array) (vector/buffer a))
  (assert (<= 5 (array/length (vector/unsafe-buffer-uninitialized a)))))

(let ([a vector/empty]
      [b (vector/new #f 3)]
      [c (vector/from-array (array 1 2 3))]
      [d (vector/with-capacity 3)])
  (= a (vector))
  (= b (vector #f #f #f))
  (= c (vector 1 2 3))
  (= d (vector)))

(let1 a (vector 1 2 3 4)
  (vector/truncate! 5 a)
  (assert-eq? a (vector 1 2 3 4))
  (vector/truncate! 3 a)
  (assert-eq? a (vector 1 2 3))
  (vector/clear! a)
  (assert-eq? a (vector)))

(let1 a (vector 1 2 3 4)
  (assert-eq? 4 (vector/swap-remove! 3 a))
  (assert-eq? a (vector 1 2 3))
  (assert-eq? 1 (vector/swap-remove! 0 a))
  (assert-eq? a (vector 3 2)))

(let1 a (vector)
  (vector/push! 1 a)
  (assert-eq? a (vector 1))
  (vector/push! 2 a)
  (vector/push! 3 a)
  (assert-eq? a (vector 1 2 3))
  (assert-eq? (some 3) (vector/pop! a))
  (assert-eq? (some 2) (vector/pop! a))
  (assert-eq? (some 1) (vector/pop! a))
  (assert-eq? none (vector/pop! a)))

(let1 a (vector)
  (vector/append! (array) a)
  (assert-eq? a (vector))
  (vector/append! (array 1 2) a)
  (assert-eq? a (vector 1 2))
  (vector/append! (array 3 4 5) a)
  (assert-eq? a (vector 1 2 3 4 5)))

(let1 a (vector 1 2 3 4)
  (assert-eq? 3 (vector/remove! 2 a))
  (assert-eq? a (vector 1 2 4))
  (assert-eq? 1 (vector/remove! 0 a))
  (assert-eq? a (vector 2 4))
  (assert-eq? 4 (vector/remove! 1 a))
  (assert-eq? a (vector 2)))

(let1 a (vector)
  (vector/insert! 0 1 a)
  (assert-eq? a (vector 1))
  (vector/insert! 0 2 a)
  (assert-eq? a (vector 2 1))
  (vector/insert! 2 3 a)
  (assert-eq? a (vector 2 1 3))
  (vector/insert! 1 4 a)
  (assert-eq? a (vector 2 4 1 3))
  (vector/insert! 2 5 a)
  (assert-eq? a (vector 2 4 5 1 3)))

(let* ([a (vector 1 2 3 4)]
       [b (vector/consume! 2 a)]
       [c (vector/consume-all! a)])
  (vector/push! 5 a)
  (assert-eq? a (vector 5))
  (assert-eq? b (array 1 2))
  (assert-eq? c (array 3 4)))

(let* ([a (vector 1 2 3 4)]
       [b (vector/move! a)])
  (vector/push! 5 a)
  (vector/push! 6 b)
  (assert-eq? a (vector 5))
  (assert-eq? b (vector 1 2 3 4 6)))

; Same as array
(let ([x (vector 1 2 3 4)])
  (set! x[0] 10)
  (set! x[2] 30)
  (assert-eq? x (vector 10 2 30 4)))

; Same as array
(let ([x (vector 1 2 3 4)])
  (let ([y (deep-copy x)])
    (set! x[0] 10)
    (set! x[2] 30)
    (assert-eq? y (vector 1 2 3 4))))

; Same as array
(let ([x (vector (vector 1 2) (vector 3 4))])
  (let ([y (deep-copy x)]
        [z (shallow-copy x)])
    (set! x[0][0] 10)
    (set! x[1] (vector 30 40))
    (assert-eq? x (vector (vector 10 2) (vector 30 40)))
    (assert-eq? y (vector (vector 1 2) (vector 3 4)))
    (assert-eq? z (vector (vector 10 2) (vector 3 4)))))

; Same as array
(let ([x (vector (vector 1 2 3) (vector 4 5 6))])
  (assert-eq? 2 (get x[0][1]))
  (assert-eq? 6 (get x[1][2]))
  (set! x[0][2] 10)
  (set! x[1][1] 30)
  (assert-eq? x (vector (vector 1 2 10) (vector 4 30 6))))

; Same as array
(let ([x (vector (vector 1) (vector 2 3))])
  (assert-eq? (some 1) (get? x[0][0]))
  (assert-eq? none     (get? x[0][1]))
  (assert-eq? (some 2) (get? x[1][0]))
  (assert-eq? (some 3) (get? x[1][1]))
  (assert-eq? none     (get? x[1][2]))
  (assert-eq? none     (get? x[2][0])))

(assert-eq? "(vector (some #t) (some #f) none)" (string (debug (vector (some #t) (some #f) none))))

(assert-eq? (vector 1 2 3) (|> (array 1 2 3) collect))
(assert-eq? (array 1 2 3) (|> (vector 1 2 3) collect))
