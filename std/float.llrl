(no-implicit-std)

(import "std/prelude/stage-1" _)
(export Float float/_ Float._)
(export ShallowCopy._ DeepCopy._ Default._ Display._ DebugDisplay._ Eq._ Ord._ Zero._ One._ Add._ Sub._ Mul._ Div._ Rem._)

(sealed-class (Float A)
  (function (float/to-string value) {(-> A String)})
  (function (float/from-string? s) {(-> String (Option A))}))

($$ begin
  ($for-each $ty (F32 F64)
    (instance ($symbol-concat Float. $ty) (Float $ty)
      (transparent-function (float/to-string value)
        (($symbol-concat < $ty -to-string>) value))

      (function (float/from-string? s)
        (match (($symbol-concat <string-to- $ty >) s)
          [(<result>: 0 _) none]
          [(<result>: _ (let value)) (some value)])))

    (instance ($symbol-concat ShallowCopy. $ty) (ShallowCopy $ty)
      (transparent-function (shallow-copy a) a))

    (instance ($symbol-concat DeepCopy. $ty) (DeepCopy $ty)
      (transparent-function (deep-copy a) a))

    (instance ($symbol-concat Default. $ty) (Default $ty)
      (transparent-function default 0.0))

    (instance ($symbol-concat Display. $ty) (Display $ty)
      (function (display! w a) (display! w (float/to-string a))))

    (instance ($symbol-concat DebugDisplay. $ty) (DebugDisplay $ty)
      (transparent-function (debug-display! w a) (display! w a)))

    (instance ($symbol-concat Eq. $ty) (Eq $ty)
      (transparent-function (eq? a b) (<float/eq?> a b)))

    (instance ($symbol-concat Ord. $ty) (Ord $ty)
      (transparent-function (lt? a b) (<float/lt?> a b))
      (transparent-function (le? a b) (<float/le?> a b))
      (transparent-function (gt? a b) (<float/gt?> a b))
      (transparent-function (ge? a b) (<float/ge?> a b)))

    (instance ($symbol-concat Zero. $ty) (Zero $ty)
      (transparent-function zero 0.0))

    (instance ($symbol-concat One. $ty) (One $ty)
      (transparent-function one 1.0))

    (instance ($symbol-concat Add. $ty) (Add $ty)
      (transparent-function (add a b) (<float/add> a b)))

    (instance ($symbol-concat Sub. $ty) (Sub $ty)
      (transparent-function (sub a b) (<float/sub> a b)))

    (instance ($symbol-concat Mul. $ty) (Mul $ty)
      (transparent-function (mul a b) (<float/mul> a b)))

    (instance ($symbol-concat Div. $ty) (Div $ty)
      (transparent-function (div a b) (<float/div> a b)))

    (instance ($symbol-concat Rem. $ty) (Rem $ty)
      (transparent-function (rem a b) (<float/rem> a b)))))

(builtin-op <float/eq?> {(forall A) (-> A A Bool) (where (Float A))} "float.eq")

(builtin-op <float/lt?> {(forall A) (-> A A Bool) (where (Float A))} "float.lt")
(builtin-op <float/le?> {(forall A) (-> A A Bool) (where (Float A))} "float.le")
(builtin-op <float/gt?> {(forall A) (-> A A Bool) (where (Float A))} "float.gt")
(builtin-op <float/ge?> {(forall A) (-> A A Bool) (where (Float A))} "float.ge")

(builtin-op <float/add> {(forall A) (-> A A A) (where (Float A))} "float.add")
(builtin-op <float/sub> {(forall A) (-> A A A) (where (Float A))} "float.sub")
(builtin-op <float/mul> {(forall A) (-> A A A) (where (Float A))} "float.mul")
(builtin-op <float/div> {(forall A) (-> A A A) (where (Float A))} "float.div")
(builtin-op <float/rem> {(forall A) (-> A A A) (where (Float A))} "float.rem")

; NOTE: It's possible to implement these functions in llrl, but it's very difficult to
; make the implementation fast and efficient: https://research.swtch.com/ftoa
(c-function <F32-to-string> {(-> F32 String)} "llrt_f32_to_string")
(c-function <F64-to-string> {(-> F64 String)} "llrt_f64_to_string")

(c-data (<Result> A) (<result>: I32 A))
(c-function <string-to-F32> {(-> String (<Result> F32))} "llrt_string_to_f32")
(c-function <string-to-F64> {(-> String (<Result> F64))} "llrt_string_to_f64")
