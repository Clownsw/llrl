(no-implicit-std)

(import "std/prelude/stage-0" _)
(import "std/s" s/traverse)
(export $$)

(macro ($$ s)
  (s/match s
    [(_ ,expr)
      (run ctx/init expr)]
    [(_ ,@callee-args)
      (run ctx/init callee-args)]
    [_
      (err "Expected ($$ expr) or ($$ callee arg ...)")]))

(function (run ctx expr) {(-> Ctx (Syntax Sexp) (Result (Syntax Sexp) String))}
  (s/match expr
    [,(s:symbol (let sym))
      (match (rr/lookup sym (ctx/rewrite-rule ctx))
        [(some (let expr)) (ok expr)]
        [none (ok expr)])]
    [($let ,binds ,body)
      (run/let ctx (run ctx binds)! body)]
    [($let . _)
      (err "Expected ($let ([$var expr] ...) body)")]
    [(($for-each ,vars ,exprss ,@body) ,@rest)
      (ok `(,@(run/for-each ctx vars (run ctx exprss)! body)! ,@(run ctx rest)!))]
    [(($for-each . _) . _)
      (err "Expected ($for-each $vars (exprs ...) body ...)")]
    [($for-each . _)
      (err "$for-each cannot be appeared in preprocess top-level")]
    [($symbol ,expr)
      (ok (s:symbol (run/symbol expr)!))]
    [($symbol-concat ,@exprs)
      (ok (s:symbol (run/symbol-concat (s/traverse (lambda (s) (run ctx s)) exprs)!)!))]
    [($cut ,expr)
      (ok expr)]
    [($cut . _)
      (err "Expected ($cut expr)")]
    [(,car . ,cdr)
      (ok `(,(run ctx car)! . ,(run ctx cdr)!))]
    [_
      (ok expr)]))

(function (run/let ctx binds body)
  (s/match binds
    [([,(s:symbol (let var)) ,expr] ,@binds)
      (run/let (ctx/add-rewrite-rule var expr ctx) binds body)]
    [()
      (run ctx body)]
    [_
      (err "$let: Expected ... ([$var expr] ...) ...")]))

(function (run/for-each ctx vars exprss body)
  (s/match exprss
    [(,exprs ,@exprss)
      (ok `(,@(run/for-each-let ctx vars exprs body)! ,@(run/for-each ctx vars exprss body)!))]
    [()
      (ok '())]
    [_
      (err "$for-each: Expected ... (exprs ...) ...")]))

(function (run/for-each-let ctx vars exprs body)
  (match (: vars exprs)
    [(: (s:symbol (let var)) (let exprs))
      (run (ctx/add-rewrite-rule var exprs ctx) body)]
    [(: (s:cons (s:symbol (let var)) (let vars)) (s:cons (let expr) (let exprs)))
      (run/for-each-let (ctx/add-rewrite-rule var expr ctx) vars exprs body)]
    [(: (s:nil) (s:nil))
      (run ctx body)]
    [(: (s:nil) _)
      (err "$for-each: The sizes of vars and exprs are different")]
    [(: _ (s:nil))
      (err "$for-each: The sizes of vars and exprs are different")]
    [_
      (err "$for-each: Expected ... [$var ...] ([expr ...] ...) or $var (expr ...) ...")]))

(function (run/symbol expr)
  (match expr
    [(s:string (let s))
      (ok s)]
    [_
      (err "$symbol: Expected string")]))

(function (run/symbol-concat exprs)
  (s/match exprs
    [(,(s:symbol (let sym)) ,@exprs)
      (ok (<symbol/concat> sym (run/symbol-concat exprs)!))]
    [()
      (ok "")]
    [_
      (err "$symbol-concat: Expected symbol")]))

(value-data Ctx
  (ctx: RewriteRule))

(function ctx/init {Ctx}
  (ctx: rr:term))

(function (ctx/add-rewrite-rule var expr ctx) {(-> String (Syntax Sexp) Ctx Ctx)}
  (match ctx
    [(ctx: (let rr)) (ctx: (rr:entry (: var expr) rr))]))

(function (ctx/rewrite-rule ctx) {(-> Ctx RewriteRule)}
  (match ctx
    [(ctx: (let rr)) rr]))

(data RewriteRule
  (rr:entry (: String (Syntax Sexp)) RewriteRule)
  rr:term)

(function (rr/lookup sym rr) {(-> String RewriteRule (Option (Syntax Sexp)))}
  (match rr
    [(rr:entry (: (let var) (let expr)) (let rr))
      (if (<symbol/eq?> var sym)
        (some expr)
        (rr/lookup sym rr))]
    [rr:term
      none]))

(builtin-op <symbol/eq?> {(-> String String Bool)} "string.eq")
(builtin-op <symbol/concat> {(-> String String String)} "string.concat")
