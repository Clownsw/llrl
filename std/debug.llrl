(no-implicit-std)

(import "std/prelude/stage-0" _)
(import "std/assert" assert)
(import "std/s" s/_)
(import "std/never" Never never)
(import "std/control" _)
(import "std/derive" derive/_)
(import "std/display" _)
(export Debug debug _.Debug DebugDisplay DebugDisplay._ debug-display! derive/DebugDisplay)

; A newtype for debugging display.
(value-data (Debug A)
  (debug A))

(instance Display.Debug (forall A) (Display (Debug A)) (where (DebugDisplay A))
  (transparent-function (display! w a)
    (match a
      [(debug (let a)) (debug-display! w a)])))

; A type class that can be displayed as strings for debugging.
; Values of types that implement DebugDisplay can be displayed by `(debug value)`.
(class (DebugDisplay A)
  (function (debug-display! w a) {(forall W Error) (-> W A (Result unit Error)) (where (WriteString W Error))}))

(instance DebugDisplay.Never (DebugDisplay Never)
  (transparent-function (debug-display! w a) w (never a)))

(macro (derive/DebugDisplay s)
  (s/match s
    [(_ _ ,type-con ,@value-cons)
      (let ([inst-name (derive/symbol/concat 'DebugDisplay. (derive/data/type-con/name type-con))!]
            [inst-signature (derive/data/type-con/instance-signature \DebugDisplay type-con)!]
            [function-body
              (match value-cons
                [(s:list) `(,\assert #f)]
                [_ `(match a ,@(s/traverse debug-display-clause value-cons)!)])])
        (ok
          `(instance ,inst-name ,@inst-signature
            (function (debug-display! w a)
              ,function-body))))]
    [_
      (err "Unsupported derivation")]))

(function (debug-display-clause value-con)
  (let ([con-name (derive/data/value-con/name value-con)]
        [con-fields (derive/data/value-con/fields value-con)])
    (ok (if-match1 (some (let fields)) con-fields
      (let1 names (s/map [^1 (gensym)] fields)!
        `[(,con-name ,@(s/map [^1 `(let ,%1)] names)!)
          (,\display! w "(")!
          (,\display! w ,(derive/symbol/string con-name)!)!
          ,@(s/map [^1 `(begin (,\display! w " ")! (,\debug-display! w ,%1)!)] names)!
          (,\display! w ")")])
      `[,con-name
        (,\display! w ,(derive/symbol/string con-name)!)]))))
