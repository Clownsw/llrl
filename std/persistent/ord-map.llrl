(no-implicit-std)

(import "std/prelude/stage-1" _)
(import "std/s" s/foldl)
(import "std/ref" Ref ref _.Ref)
(import "std/iterator" _)
(import "std/it" it/_ zip-either:_ _.ZipEither)
(import "std/vector" Vector vector/_ _.Vector)
(import "std/hash" Hash hash-all!)
(import "std/tuple" _.Tuple.2)
(export OrdMap ord-map ord-map/_ _.OrdMap)

; A persistent red-black tree.
; the Red-Black Tree implementation is based on http://matt.might.net/articles/red-black-delete/
(data (OrdMap K V)
  :E  ; Black leaf
  :EE ; Double black leaf
  (:T Color K V (OrdMap K V) (OrdMap K V)))

(value-data Color
  :R   ; Red
  :B   ; Black
  :BB  ; Double black
  :NB) ; Negative black

(macro (ord-map s)
  (s/match s
    [(_ ,@elems)
      (s/foldl [^2 `(,\ord-map/insert-elem ,%2 ,%1)] \ord-map/empty elems)]
    [_
      (err "Expected (ord-map elem ...)")]))

(function ord-map/empty {(forall K V) (OrdMap K V)}
  :E)

(function (ord-map/empty? map) {(forall K V) (-> (OrdMap K V) Bool)}
  (is? :E map))

(function (ord-map/has? key map) {(forall K V) (-> K (OrdMap K V) Bool) (where (Ord K))}
  (is? (some _) (ord-map/get? key map)))

(function (ord-map/get? key map) {(forall K V) (-> K (OrdMap K V) (Option V)) (where (Ord K))}
  (match map
    [(:T _ (let k) (let v) (let l) (let r))
      (match (compare key k)
        [ordering:less (ord-map/get? key l)]
        [ordering:greater (ord-map/get? key r)]
        [ordering:equal (some v)])]
    [_ none]))

(function (ord-map/get-min? map) {(forall K V) (-> (OrdMap K V) (Option (: K V))) (where (Ord K))}
  (match map
    [(:T _ (let k) (let v) :E _) (some (: k v))]
    [(:T _ _ _ (let l) _) (ord-map/get-min? l)]
    [:E none]
    [:EE (assert #f)]))

(function (ord-map/get-max? map) {(forall K V) (-> (OrdMap K V) (Option (: K V))) (where (Ord K))}
  (match map
    [(:T _ (let k) (let v) _ :E) (some (: k v))]
    [(:T _ _ _ _ (let r)) (ord-map/get-max? r)]
    [:E none]
    [:EE (assert #f)]))

(function (ord-map/insert key value map) {(forall K V) (-> K V (OrdMap K V) (OrdMap K V)) (where (Ord K))}
  (blacken (insert key value map)))

(function (ord-map/insert-elem elem map) {(forall K V) (-> (: K V) (OrdMap K V) (OrdMap K V)) (where (Ord K))}
  (with1 (: (let key) (let value)) elem
    (ord-map/insert key value map)))

(function (ord-map/remove key map) {(forall K V) (-> K (OrdMap K V) (OrdMap K V)) (where (Ord K))}
  (blacken (remove key map)))

(function (ord-map/remove-min map) {(forall K V) (-> (OrdMap K V) (OrdMap K V)) (where (Ord K))}
  (match map
    [(:T _ _ _ :E _) (delete map)]
    [(:T (let color) (let k) (let v) (let l) (let r)) (bubble color k v (ord-map/remove-min l) r)]
    [:E map]
    [:EE (assert #f)]))

(function (ord-map/remove-max map) {(forall K V) (-> (OrdMap K V) (OrdMap K V)) (where (Ord K))}
  (match map
    [(:T _ _ _ _ :E) (delete map)]
    [(:T (let color) (let k) (let v) (let l) (let r)) (bubble color k v l (ord-map/remove-max r))]
    [:E map]
    [:EE (assert #f)]))

(function (ord-map/union a b) {(forall K V) (-> (OrdMap K V) (OrdMap K V) (OrdMap K V)) (where (Ord K))}
  (ord-map/union* [^3 %2] a b))

(function (ord-map/union* f a b) {(forall K V) (-> (-> K V V V) (OrdMap K V) (OrdMap K V) (OrdMap K V)) (where (Ord K))}
  (let1 a (ref a)
    (for (: (let k) (let bv)) (ord-map/elems b)
      (set! a (match (ord-map/get? k ~a)
        [none
          (ord-map/insert k bv ~a)]
        [(some (let av))
          (ord-map/insert k (f k av bv) ~a)])))
    ~a))

(function (ord-map/intersection a b) {(forall K V) (-> (OrdMap K V) (OrdMap K V) (OrdMap K V)) (where (Ord K))}
  (ord-map/intersection* [^3 %2] a b))

(function (ord-map/intersection* f a b) {(forall K V) (-> (-> K V V V) (OrdMap K V) (OrdMap K V) (OrdMap K V)) (where (Ord K))}
  (let1 m (ref ord-map/empty)
    (for (: (let k) (let av)) (ord-map/elems a)
      (when-match1 (some (let bv)) (ord-map/get? k b)
        (set! m (ord-map/insert k (f k av bv) ~m))))
    ~m))

(function (ord-map/difference a b) {(forall K V) (-> (OrdMap K V) (OrdMap K V) (OrdMap K V)) (where (Ord K))}
  (ord-map/difference* [^3 none] a b))

(function (ord-map/difference* f a b) {(forall K V) (-> (-> K V V (Option V)) (OrdMap K V) (OrdMap K V) (OrdMap K V)) (where (Ord K))}
  (let1 a (ref a)
    (for (: (let k) (let bv)) (ord-map/elems b)
      (set! a (match (ord-map/get? k ~a)
        [none
          (ord-map/insert k bv ~a)]
        [(some (let av))
          (match (f k av bv)
            [none (ord-map/remove k ~a)]
            [(some (let v)) (ord-map/insert k v ~a)])])))
    ~a))

; Currently we are unable to make this implementation an instance of std/iterator/Collect.
; In order to do so, we need to extend llrl type system to support associated types or fundeps.
(function (ord-map/collect t) {(forall T K V) (-> (T (: K V)) (OrdMap K V)) (where (Iterate T) (Ord K))}
  (let1 map (ref ord-map/empty)
    (for (: (let k) (let v)) t
      (set! map (ord-map/insert k v ~map)))
    ~map))

(function (ord-map/elems map) {(forall K V) (-> (OrdMap K V) (Iterator (: K V)))}
  (let1 cursor (cursor/new map)
    (iterator/new [^0 (cursor/next! cursor)])))

(function (ord-map/keys map) {(forall K V) (-> (OrdMap K V) (Iterator K))}
  (it/map (case1 (: (let key) _) key) (ord-map/elems map)))

(function (ord-map/values map) {(forall K V) (-> (OrdMap K V) (Iterator V))}
  (it/map (case1 (: _ (let value)) value) (ord-map/elems map)))

; ---------------------------

(function (redden map)
  (match map
    [(:T _ (let k) (let v) (let a) (let b)) (:T :R k v a b)]
    [_ (assert #f)]))

(function (blacken map)
  (match map
    [:E :E]
    [:EE :E]
    [(:T _ (let k) (let v) (let a) (let b)) (:T :B k v a b)]))

(function (bb? map)
  (match map
    [:EE #t]
    [(:T :BB _ _ _ _) #t]
    [_ #f]))

(function (blacker color)
  (match color
    [:NB :R]
    [:R :B]
    [:B :BB]
    [:BB (assert #f)]))

(function (redder color)
  (match color
    [:R :NB]
    [:B :R]
    [:BB :B]
    [:NB (assert #f)]))

(function (blacker* map)
  (match map
    [:E :EE]
    [(:T (let c) (let k) (let v) (let l) (let r)) (:T (blacker c) k v l r)]
    [:EE (assert #f)]))

(function (redder* map)
  (match map
    [:EE :E]
    [(:T (let c) (let k) (let v) (let l) (let r)) (:T (redder c) k v l r)]
    [:E (assert #f)]))

(function (insert key value map)
  (match map
    [(:T (let color) (let k) (let v) (let a) (let b))
      (match (compare key k)
        [ordering:less (balance color k v (insert key value a) b)]
        [ordering:greater (balance color k v a (insert key value b))]
        [ordering:equal (:T color k value a b)])]
    [_ (:T :R key value :E :E)]))

(function (remove key map)
  (match map
    [(:T (let color) (let k) (let v) (let a) (let b))
      (match (compare key k)
        [ordering:less (bubble color k v (remove key a) b)]
        [ordering:greater (bubble color k v a (remove key b))]
        [ordering:equal (delete map)])]
    [_ :E]))

(function (delete map)
  (match map
    [(:T :R _ _ :E :E) :E]
    [(:T :B _ _ :E :E) :EE]
    [(:T :B _ _ :E (:T :R (let k) (let v) (let a) (let b))) (:T :B k v a b)]
    [(:T :B _ _ (:T :R (let k) (let v) (let a) (let b)) :E) (:T :B k v a b)]
    [(:T (let color) _ _ (let l) (let r))
      (match (: (ord-map/get-max? l) (ord-map/remove-max l))
        [(: (some (: (let k) (let v))) (let l)) (bubble color k v l r)]
        [_ (assert #f)])]
    [_ :E]))

(function (balance c k v l r)
  (match (: c k v l r)
    [(: :B (let zk) (let zv) (:T :R (let yk) (let yv) (:T :R (let xk) (let xv) (let a) (let b)) (let c)) (let d))
      (:T :R yk yv (:T :B xk xv a b) (:T :B zk zv c d))]
    [(: :B (let zk) (let zv) (:T :R (let xk) (let xv) (let a) (:T :R (let yk) (let yv) (let b) (let c))) (let d))
      (:T :R yk yv (:T :B xk xv a b) (:T :B zk zv c d))]
    [(: :B (let xk) (let xv) (let a) (:T :R (let zk) (let zv) (:T :R (let yk) (let yv) (let b) (let c)) (let d)))
      (:T :R yk yv (:T :B xk xv a b) (:T :B zk zv c d))]
    [(: :B (let xk) (let xv) (let a) (:T :R (let yk) (let yv) (let b) (:T :R (let zk) (let zv) (let c) (let d))))
      (:T :R yk yv (:T :B xk xv a b) (:T :B zk zv c d))]
    [(: :BB (let zk) (let zv) (:T :R (let yk) (let yv) (:T :R (let xk) (let xv) (let a) (let b)) (let c)) (let d))
      (:T :B yk yv (:T :B xk xv a b) (:T :B zk zv c d))]
    [(: :BB (let zk) (let zv) (:T :R (let xk) (let xv) (let a) (:T :R (let yk) (let yv) (let b) (let c))) (let d))
      (:T :B yk yv (:T :B xk xv a b) (:T :B zk zv c d))]
    [(: :BB (let xk) (let xv) (let a) (:T :R (let zk) (let zv) (:T :R (let yk) (let yv) (let b) (let c)) (let d)))
      (:T :B yk yv (:T :B xk xv a b) (:T :B zk zv c d))]
    [(: :BB (let xk) (let xv) (let a) (:T :R (let yk) (let yv) (let b) (:T :R (let zk) (let zv) (let c) (let d))))
      (:T :B yk yv (:T :B xk xv a b) (:T :B zk zv c d))]
    [(: :BB (let xk) (let xv) (let a) (:T :NB (let zk) (let zv) (:T :B (let yk) (let yv) (let b) (let c)) (let d (:T :B _ _ _ _))))
      (:T :B yk yv (:T :B xk xv a b) (balance :B zk zv c (redden d)))]
    [(: :BB (let zk) (let zv) (:T :NB (let xk) (let xv) (let a (:T :B _ _ _ _)) (:T :B (let yk) (let yv) (let b) (let c))) (let d))
      (:T :B yk yv (balance :B xk xv (redden a) b) (:T :B zk zv c d))]
    [_
      (:T c k v l r)]))

(function (bubble c k v l r)
  (if (or (bb? l) (bb? r))
    (balance (blacker c) k v (redder* l) (redder* r))
    (balance c k v l r)))

(value-data (Cursor K V)
  (cursor: (Vector (: K V (OrdMap K V)))))

(function (cursor/new map) {(forall K V) (-> (OrdMap K V) (Cursor K V))}
  (let1 cursor (cursor: vector/empty)
    (cursor/push! map cursor)
    cursor))

(function (cursor/next! cursor) {(forall K V) (-> (Cursor K V) (Option (: K V)))}
  (with ([(cursor: (let stack)) cursor]
         [(: (let key) (let value) (let r)) (vector/pop! stack)?])
    (cursor/push! r cursor)
    (some (: key value))))

(function (cursor/push! map cursor) {(forall K V) (-> (OrdMap K V) (Cursor K V) unit)}
  (with1 (cursor: (let stack)) cursor
    (let1 map (ref map)
      (while-match1 (:T _ (let k) (let v) (let l) (let r)) ~map
        (vector/push! (: k v r) stack)
        (set! map l)))))

; ---------------------------

(instance ShallowCopy.OrdMap (forall K V) (ShallowCopy (OrdMap K V))
  (function (shallow-copy a) a)) ; Ordered maps are immutable and persistent

(instance DeepCopy.OrdMap (forall K V) (DeepCopy (OrdMap K V)) (where (DeepCopy K) (DeepCopy V))
  (function (deep-copy a)
    (match a
      [:E :E]
      [:EE :EE]
      [(:T (let c) (let k) (let v) (let a) (let b)) (:T c (deep-copy k) (deep-copy v) (deep-copy a) (deep-copy b))])))

(instance Default.OrdMap (forall K V) (Default (OrdMap K V))
  (transparent-function default ord-map/empty))

(instance DebugDisplay.OrdMap (forall K V) (DebugDisplay (OrdMap K V)) (where (DebugDisplay K) (DebugDisplay V))
  (function (debug-display! w a)
    (display! w "(ord-map")!
    (for (: (let k) (let v)) (ord-map/elems a)
      (display-all! w " (: " (debug k) " " (debug v) ")")!)
    (display! w ")")))

(instance Eq.OrdMap (forall K V) (Eq (OrdMap K V)) (where (Eq K) (Eq V))
  (function (eq? a b)
    (for (let z) (it/zip-either (ord-map/elems a) (ord-map/elems b))
      (if-match1 (zip-either:both (let a) (let b)) z
        (when (ne? a b) (return #f))
        (return #f)))
    #t))

(instance Ord.OrdMap (forall K V) (Ord (OrdMap K V)) (where (Ord K) (Ord V))
  (function (compare a b)
    (for (let z) (it/zip-either (ord-map/elems a) (ord-map/elems b))
      (match z
        [(zip-either:both (let a) (let b))
          (match (compare a b)
            [ordering:equal]
            [(let o) (return o)])]
        [(zip-either:left _)
          (return ordering:greater)]
        [(zip-either:right _)
          (return ordering:less)]))
    ordering:equal))

(instance Hash.OrdMap (forall K V) (Hash (OrdMap K V)) (where (Hash K) (Hash V))
  (function (hash! s a)
    (for (: (let k) (let v)) (ord-map/elems a)
      (hash-all! s k v))))
