(no-implicit-std)

(import "std/prelude/stage-1" _)
(import "std/s" s/foldl)
(import "std/memory" Ptr ptr:_ ptr/_ _.Ptr)
(import "std/ref" Ref ref _.Ref)
(import "std/iterator" _)
(import "std/it" it/_ zip-either:_ _.ZipEither)
(import "std/vector" Vector vector/_ _.Vector)
(import "std/hash" Hash hash-all!)
(import "std/tuple" _.Tuple.2)
(export OrdMap ord-map ord-map/_ _.OrdMap)

; An ordered, persistent key-value collection.
; The OrdMap is implemented based on Okasaki's Red-black tree.
(value-data (OrdMap K V)
  (m: (Unboxed K V)))

(macro (ord-map s)
  (s/match s
    [(_ ,@elems)
      (s/foldl [^2 `(,\ord-map/insert-elem ,%2 ,%1)] \ord-map/empty elems)]
    [_
      (err "Expected (ord-map elem ...)")]))

(function ord-map/empty {(forall K V) (OrdMap K V)}
  (m: :leaf))

(function (ord-map/empty? map) {(forall K V) (-> (OrdMap K V) Bool)}
  (is? (m: :leaf) map))

(function (ord-map/has? key map) {(forall K V) (-> K (OrdMap K V) Bool) (where (Ord K))}
  (is? (some _) (ord-map/get? key map)))

(function (ord-map/get? key map) {(forall K V) (-> K (OrdMap K V) (Option V)) (where (Ord K))}
  (with1 (m: (let node)) map
    (lookup? key node)))

(function (ord-map/get-min? map) {(forall K V) (-> (OrdMap K V) (Option (: K V)))}
  (with1 (m: (let node)) map
    (get-min? node)))

(function (ord-map/get-max? map) {(forall K V) (-> (OrdMap K V) (Option (: K V)))}
  (with1 (m: (let node)) map
    (get-max? node)))

(function (ord-map/insert key value map) {(forall K V) (-> K V (OrdMap K V) (OrdMap K V)) (where (Ord K))}
  (with ([(m: (let node)) map]
         [(: (let node) _) (blacken (unboxed (insert key value node)))])
    (m: node)))

(function (ord-map/insert-elem elem map) {(forall K V) (-> (: K V) (OrdMap K V) (OrdMap K V)) (where (Ord K))}
  (with1 (: (let key) (let value)) elem
    (ord-map/insert key value map)))

(function (ord-map/remove key map) {(forall K V) (-> K (OrdMap K V) (OrdMap K V)) (where (Ord K))}
  (with ([(m: (let node)) map]
         [(: (let node) _ _) (remove key node)]
         [(: (let node) _) (blacken (unboxed node))])
    (m: node)))

(function (ord-map/remove-min map) {(forall K V) (-> (OrdMap K V) (OrdMap K V))}
  (match map
    [(m: :leaf) map]
    [(m: (let node))
      (with ([(: (let node) _ _ _) (remove-min node)]
             [(: (let node) _) (blacken (unboxed node))])
        (m: node))]))

(function (ord-map/remove-max map) {(forall K V) (-> (OrdMap K V) (OrdMap K V))}
  (match map
    [(m: :leaf) map]
    [(m: (let node))
      (with ([(: (let node) _ _ _) (remove-max node)]
             [(: (let node) _) (blacken (unboxed node))])
        (m: node))]))

(function (ord-map/union a b) {(forall K V) (-> (OrdMap K V) (OrdMap K V) (OrdMap K V)) (where (Ord K))}
  (ord-map/union* [^3 %2] a b))

(function (ord-map/union* f a b) {(forall K V) (-> (-> K V V V) (OrdMap K V) (OrdMap K V) (OrdMap K V)) (where (Ord K))}
  (let1 a (ref a)
    (for (: (let k) (let bv)) (ord-map/elems b)
      (set! a (match (ord-map/get? k ~a)
        [none
          (ord-map/insert k bv ~a)]
        [(some (let av))
          (ord-map/insert k (f k av bv) ~a)])))
    ~a))

(function (ord-map/intersection a b) {(forall K V) (-> (OrdMap K V) (OrdMap K V) (OrdMap K V)) (where (Ord K))}
  (ord-map/intersection* [^3 %2] a b))

(function (ord-map/intersection* f a b) {(forall K V) (-> (-> K V V V) (OrdMap K V) (OrdMap K V) (OrdMap K V)) (where (Ord K))}
  (let1 m (ref ord-map/empty)
    (for (: (let k) (let av)) (ord-map/elems a)
      (when-match1 (some (let bv)) (ord-map/get? k b)
        (set! m (ord-map/insert k (f k av bv) ~m))))
    ~m))

(function (ord-map/difference a b) {(forall K V) (-> (OrdMap K V) (OrdMap K V) (OrdMap K V)) (where (Ord K))}
  (ord-map/difference* [^3 none] a b))

(function (ord-map/difference* f a b) {(forall K V) (-> (-> K V V (Option V)) (OrdMap K V) (OrdMap K V) (OrdMap K V)) (where (Ord K))}
  (let1 a (ref a)
    (for (: (let k) (let bv)) (ord-map/elems b)
      (set! a (match (ord-map/get? k ~a)
        [none
          (ord-map/insert k bv ~a)]
        [(some (let av))
          (match (f k av bv)
            [none (ord-map/remove k ~a)]
            [(some (let v)) (ord-map/insert k v ~a)])])))
    ~a))

; Currently we are unable to make this implementation an instance of std/iterator/Collect.
; In order to do so, we need to extend llrl type system to support associated types or fundeps.
(function (ord-map/collect t) {(forall T K V) (-> (T (: K V)) (OrdMap K V)) (where (Iterate T) (Ord K))}
  (let1 map (ref ord-map/empty)
    (for (: (let k) (let v)) t
      (set! map (ord-map/insert k v ~map)))
    ~map))

(function (ord-map/elems map) {(forall K V) (-> (OrdMap K V) (Iterator (: K V)))}
  (let1 cursor (cursor/new map)
    (iterator/new [^0 (cursor/next! cursor)])))

(function (ord-map/keys map) {(forall K V) (-> (OrdMap K V) (Iterator K))}
  (it/map (case1 (: (let key) _) key) (ord-map/elems map)))

(function (ord-map/values map) {(forall K V) (-> (OrdMap K V) (Iterator V))}
  (it/map (case1 (: _ (let value)) value) (ord-map/elems map)))

; ---------------------------

(value-data Color
  :red
  :black)

(value-data (Unboxed K V)
  :leaf
  (:tree (: Color K V (Boxed K V) (Boxed K V))))

(value-data (Boxed K V)
  (boxed: (Ptr (: Color K V (Boxed K V) (Boxed K V)))))

; to resolve type ambiguities
(builtin-op boxed {(forall K V) (-> (Boxed K V) (Boxed K V))} "no-op")
(builtin-op unboxed {(forall K V) (-> (Unboxed K V) (Unboxed K V))} "no-op")

(class (Node T)
  (function leaf {(forall K V) (T K V)})
  (function (tree color k v l r) {(forall K V) (-> Color K V (Boxed K V) (Boxed K V) (T K V))}))

(instance Node.Unboxed (Node Unboxed)
  (transparent-function leaf :leaf)
  (transparent-function (tree color k v l r) (:tree (: color k v l r))))

(instance Node.Boxed (Node Boxed)
  (transparent-function leaf (boxed: ptr:null))
  (transparent-function (tree color k v l r) (boxed: (ptr:non-null (: color k v l r)))))

(class (NodeAdjust T S)
  (function (adjust t) {(forall K V) (-> (T K V) (S K V))}))

(instance NodeAdjust.Identity (forall T) (NodeAdjust T T)
  (transparent-function (adjust t) t))

(instance NodeAdjust.Box (NodeAdjust Unboxed Boxed)
  (transparent-function (adjust t)
    (match t
      [:leaf (boxed: ptr:null)]
      [(:tree (let t)) (boxed: (ptr:non-null t))])))

(instance NodeAdjust.Unbox (NodeAdjust Boxed Unboxed)
  (transparent-function (adjust t)
    (match t
      [(boxed: ptr:null) :leaf]
      [(boxed: (ptr:non-null (let t))) (:tree t)])))

(transparent-function (blacken node)
  {(forall K V T S) (-> (T K V) (: (S K V) Bool)) (where (NodeAdjust T Unboxed) (NodeAdjust T S) (Node S))}
  (let1 node node
    (match (adjust node)
      [(:tree (: :red (let k) (let v) (let l) (let r)))
        (: (tree :black k v l r) #f)]
      [_
        (: (adjust node) #t)])))

(transparent-function (balance-left k v l r)
  {(forall K V T S U) (-> K V (T K V) (S K V) (U K V)) (where (NodeAdjust T Unboxed) (NodeAdjust T Boxed) (NodeAdjust S Boxed) (Node U))}
  (let1 l l
    (match (adjust l)
      [(:tree (: :red (let ky) (let vy) (boxed: (ptr:non-null (: :red (let kx) (let vx) (let a) (let b)))) (let c)))
        (tree :red ky vy (tree :black kx vx a b) (tree :black k v c (adjust r)))]
      [(:tree (: :red (let kx) (let vx) (let a) (boxed: (ptr:non-null (: :red (let ky) (let vy) (let b) (let c))))))
        (tree :red ky vy (tree :black kx vx a b) (tree :black k v c (adjust r)))]
      [_
        (tree :black k v (adjust l) (adjust r))])))

(transparent-function (balance-right k v l r)
  {(forall K V T S U) (-> K V (T K V) (S K V) (U K V)) (where (NodeAdjust S Unboxed) (NodeAdjust T Boxed) (NodeAdjust S Boxed) (Node U))}
  (let1 r r
    (match (adjust r)
      [(:tree (: :red (let kz) (let vz) (boxed: (ptr:non-null (: :red (let ky) (let vy) (let b) (let c)))) (let d)))
        (tree :red ky vy (tree :black k v (adjust l) b) (tree :black kz vz c d))]
      [(:tree (: :red (let ky) (let vy) (let b) (boxed: (ptr:non-null (: :red (let kz) (let vz) (let c) (let d))))))
        (tree :red ky vy (tree :black k v (adjust l) b) (tree :black kz vz c d))]
      [_
        (tree :black k v (adjust l) (adjust r))])))

(transparent-function (bubble-left color k v l r d)
  {(forall K V T S U) (-> Color K V (T K V) (S K V) Bool (: (U K V) Bool)) (where (NodeAdjust T Unboxed) (NodeAdjust T Boxed) (NodeAdjust S Boxed) (Node U))}
  (if d
    (match (: color (adjust l))
      [(: :red (:tree (: :black (let kx) (let vx) (let a) (let b))))
        (: (balance-left k v (unboxed (tree :red kx vx a b)) r) #f)]
      [(: :black (:tree (: :black (let kx) (let vx) (let a) (let b))))
        (: (balance-left k v (unboxed (tree :red kx vx a b)) r) #t)]
      [(: :black (:tree (: :red (let kx) (let vx) (let a) (boxed: (ptr:non-null (: :black (let ky) (let vy) (let b) (let c)))))))
        (: (tree :black kx vx a (balance-left k v (unboxed (tree :red ky vy b c)) r)) #f)]
      [_
        (assert #f)])
    (: (tree color k v (adjust l) (adjust r)) #f)))

(transparent-function (bubble-right color k v l r d)
  {(forall K V T S U) (-> Color K V (T K V) (S K V) Bool (: (U K V) Bool)) (where (NodeAdjust S Unboxed) (NodeAdjust T Boxed) (NodeAdjust S Boxed) (Node U))}
  (if d
    (match (: color (adjust r))
      [(: :red (:tree (: :black (let ky) (let vy) (let b) (let c))))
        (: (balance-right k v l (unboxed (tree :red ky vy b c))) #f)]
      [(: :black (:tree (: :black (let ky) (let vy) (let b) (let c))))
        (: (balance-right k v l (unboxed (tree :red ky vy b c))) #t)]
      [(: :black (:tree (: :red (let kz) (let vz) (boxed: (ptr:non-null (: :black (let ky) (let vy) (let b) (let c)))) (let d))))
        (: (tree :black kz vz (balance-right k v l (unboxed (tree :red ky vy b c))) d) #f)]
      [_
        (assert #f)])
    (: (tree color k v (adjust l) (adjust r)) #f)))

(function (insert k v node)
  {(forall K V T S) (-> K V (T K V) (S K V)) (where (Ord K) (NodeAdjust T Unboxed) (Node S))}
  (match (adjust node)
    [:leaf
      (tree :red k v leaf leaf)]
    [(:tree (: :black (let ky) (let vy) (let l) (let r)))
      (match (compare k ky)
        [ordering:less (balance-left ky vy (unboxed (insert k v l)) r)]
        [ordering:greater (balance-right ky vy l (unboxed (insert k v r)))]
        [ordering:equal (tree :black k v l r)])]
    [(:tree (: :red (let ky) (let vy) (let l) (let r)))
      (match (compare k ky)
        [ordering:less (tree :red ky vy (insert k v l) r)]
        [ordering:greater (tree :red ky vy l (insert k v r))]
        [ordering:equal (tree :red k v l r)])]))

(function (lookup? k node)
  {(forall K V T) (-> K (T K V) (Option V)) (where (Ord K) (NodeAdjust T Unboxed))}
  (match (adjust node)
    [:leaf
      none]
    [(:tree (: _ (let kx) (let vx) (let l) (let r)))
      (match (compare k kx)
        [ordering:less (lookup? k l)]
        [ordering:greater (lookup? k r)]
        [ordering:equal (some vx)])]))

(function (get-min? node)
  {(forall K V T) (-> (T K V) (Option (: K V))) (where (NodeAdjust T Unboxed))}
  (match (adjust node)
    [:leaf none]
    [(:tree (: _ (let k) (let v) (boxed: ptr:null) _)) (some (: k v))]
    [(:tree (: _ _ _ (let l) _)) (get-min? l)]))

(function (get-max? node)
  {(forall K V T) (-> (T K V) (Option (: K V))) (where (NodeAdjust T Unboxed))}
  (match (adjust node)
    [:leaf none]
    [(:tree (: _ (let k) (let v) _ (boxed: ptr:null))) (some (: k v))]
    [(:tree (: _ _ _ _ (let r))) (get-max? r)]))

(function (remove k node)
  {(forall K V T S) (-> K (T K V) (: (S K V) (Option V) Bool)) (where (Ord K) (NodeAdjust T Unboxed) (NodeAdjust Boxed S) (Node S))}
  (match (adjust node)
    [:leaf
      (: leaf none #f)]
    [(:tree (: (let color) (let kx) (let vx) (let l) (let r)))
      (match (compare k kx)
        [ordering:less
          (with ([(: (let l) (let v) (let d)) (remove k l)]
                 [(: (let m) (let d)) (bubble-right color kx vx (boxed l) r d)])
            (: m v d))]
        [ordering:greater
          (with ([(: (let r) (let v) (let d)) (remove k r)]
                 [(: (let m) (let d)) (bubble-left color kx vx l (boxed r) d)])
            (: m v d))]
        [ordering:equal
          (with1 (: (let m) (let d))
                 (if (is? (boxed: ptr:null) r)
                   (if (is? :black color)
                     (blacken l)
                     (: (adjust l) #f))
                   (with1 (: (let r) (let ky) (let vy) (let d)) (remove-min r)
                     (bubble-left color ky vy l (boxed r) d)))
            (: m (some vx) d))])]))

(function (remove-min node)
  {(forall K V T S) (-> (T K V) (: (S K V) K V Bool)) (where (NodeAdjust T Unboxed) (NodeAdjust Boxed S) (Node S))}
  (match (adjust node)
    [(:tree (: :black (let k) (let v) (boxed: ptr:null) (boxed: ptr:null)))
      (: leaf k v #t)]
    [(:tree (: :black (let k) (let v) (boxed: ptr:null) (boxed: (ptr:non-null (: :red (let kx) (let vx) (let l) (let r))))))
      (: (tree :black kx vx l r) k v #f)]
    [(:tree (: :red (let k) (let v) (boxed: ptr:null) (let r)))
      (: (adjust r) k v #f)]
    [(:tree (: (let color) (let kx) (let vx) (let l) (let r)))
      (with ([(: (let l) (let k) (let v) (let d)) (remove-min l)]
             [(: (let m) (let d)) (bubble-right color kx vx (boxed l) r d)])
        (: m k v d))]
    [_
      (assert #f)]))

(function (remove-max node)
  {(forall K V T S) (-> (T K V) (: (S K V) K V Bool)) (where (NodeAdjust T Unboxed) (NodeAdjust Boxed S) (Node S))}
  (match (adjust node)
    [(:tree (: :black (let k) (let v) (boxed: ptr:null) (boxed: ptr:null)))
      (: leaf k v #t)]
    [(:tree (: :black (let k) (let v) (boxed: (ptr:non-null (: :red (let kx) (let vx) (let l) (let r)))) (boxed: ptr:null)))
      (: (tree :black kx vx l r) k v #f)]
    [(:tree (: :red (let k) (let v) (let l) (boxed: ptr:null)))
      (: (adjust l) k v #f)]
    [(:tree (: (let color) (let kx) (let vx) (let l) (let r)))
      (with ([(: (let r) (let k) (let v) (let d)) (remove-max r)]
             [(: (let m) (let d)) (bubble-left color kx vx l (boxed r) d)])
        (: m k v d))]
    [_
      (assert #f)]))

(value-data (Cursor K V)
  (cursor: (Vector (: K V (Unboxed K V)))))

(function (cursor/new map) {(forall K V) (-> (OrdMap K V) (Cursor K V))}
  (with1 (m: (let node)) map
    (let1 cursor (cursor: vector/empty)
      (cursor/push! (adjust node) cursor)
      cursor)))

(function (cursor/next! cursor) {(forall K V) (-> (Cursor K V) (Option (: K V)))}
  (with ([(cursor: (let stack)) cursor]
         [(: (let key) (let value) (let r)) (vector/pop! stack)?])
    (cursor/push! r cursor)
    (some (: key value))))

(function (cursor/push! node cursor) {(forall K V) (-> (Unboxed K V) (Cursor K V) unit)}
  (with1 (cursor: (let stack)) cursor
    (let1 node (ref node)
      (while-match1 (:tree (: _ (let k) (let v) (let l) (let r))) ~node
        (vector/push! (: k v (adjust r)) stack)
        (set! node (adjust l))))))

; ---------------------------

(instance ShallowCopy.OrdMap (forall K V) (ShallowCopy (OrdMap K V))
  (function (shallow-copy a) a)) ; Ordered maps are immutable and persistent

(instance DeepCopy.OrdMap (forall K V) (DeepCopy (OrdMap K V)) (where (DeepCopy K) (DeepCopy V))
  (function (deep-copy a)
    (with1 (m: (let node)) a
      (m: (deep-copy node)))))

(instance DeepCopy.Unboxed (forall K V) (DeepCopy (Unboxed K V)) (where (DeepCopy K) (DeepCopy V))
  (function (deep-copy a)
    (match a
      [:leaf
        leaf]
      [(:tree (: (let c) (let k) (let v) (let l) (let r)))
        (tree c (deep-copy k) (deep-copy v) (deep-copy l) (deep-copy r))])))

(instance DeepCopy.Boxed (forall K V) (DeepCopy (Boxed K V)) (where (DeepCopy K) (DeepCopy V))
  (function (deep-copy a)
    (match a
      [(boxed: ptr:null)
        leaf]
      [(boxed: (ptr:non-null (: (let c) (let k) (let v) (let l) (let r))))
        (tree c (deep-copy k) (deep-copy v) (deep-copy l) (deep-copy r))])))

(instance Default.OrdMap (forall K V) (Default (OrdMap K V))
  (transparent-function default ord-map/empty))

(instance DebugDisplay.OrdMap (forall K V) (DebugDisplay (OrdMap K V)) (where (DebugDisplay K) (DebugDisplay V))
  (function (debug-display! w a)
    (display! w "(ord-map")!
    (for (: (let k) (let v)) (ord-map/elems a)
      (display-all! w " (: " (debug k) " " (debug v) ")")!)
    (display! w ")")))

(instance Eq.OrdMap (forall K V) (Eq (OrdMap K V)) (where (Eq K) (Eq V))
  (function (eq? a b)
    (for (let z) (it/zip-either (ord-map/elems a) (ord-map/elems b))
      (if-match1 (zip-either:both (let a) (let b)) z
        (when (ne? a b) (return #f))
        (return #f)))
    #t))

(instance Ord.OrdMap (forall K V) (Ord (OrdMap K V)) (where (Ord K) (Ord V))
  (function (compare a b)
    (for (let z) (it/zip-either (ord-map/elems a) (ord-map/elems b))
      (match z
        [(zip-either:both (let a) (let b))
          (match (compare a b)
            [ordering:equal]
            [(let o) (return o)])]
        [(zip-either:left _)
          (return ordering:greater)]
        [(zip-either:right _)
          (return ordering:less)]))
    ordering:equal))

(instance Hash.OrdMap (forall K V) (Hash (OrdMap K V)) (where (Hash K) (Hash V))
  (function (hash! s a)
    (for (: (let k) (let v)) (ord-map/elems a)
      (hash-all! s k v))))
