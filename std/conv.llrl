(no-implicit-std)

(import "std/prelude/stage-0" _)
(import "std/num-literals" _)
(export Conv conv conv-from conv-to conv-to? Conv._)

(class (Conv From To)
  (function (conv a) {(-> From To)}))

(macro (conv-from s)
  (s/match s
    [(_ ,ty ,a)
      (ok `(,\conv (annotate ,a ,ty)))]
    [_
      (err "Expected (conv-from ty a)")]))

(macro (conv-to s)
  (s/match s
    [(_ ,ty ,a)
      (ok `(annotate (,\conv ,a) ,ty))]
    [_
      (err "Expected (conv-to ty a)")]))

(macro (conv-to? s)
  (s/match s
    [(_ ,ty ,a)
      (ok `(annotate (,\conv ,a) (,\Option ,ty)))]
    [_
      (err "Expected (conv-to? ty a)")]))

(instance Conv.Identity (forall A) (Conv A A)
  (transparent-function (conv a) a))

(instance Conv.Just (forall A) (Conv A (Option A))
  (transparent-function (conv a) (some a)))

($for
  [$from $to $op] (
    [I8 I16 <signed/ext>]
    [I8 I32 <signed/ext>]
    [I8 I64 <signed/ext>]
    [I8 U8 <bitcast>]
    [I8 U16 <signed/ext>]
    [I8 U32 <signed/ext>]
    [I8 U64 <signed/ext>]
    [I8 F32 <signed/to-float>]
    [I8 F64 <signed/to-float>]
    [I16 I8 <integer/trunc>]
    [I16 I32 <signed/ext>]
    [I16 I64 <signed/ext>]
    [I16 U8 <integer/trunc>]
    [I16 U16 <bitcast>]
    [I16 U32 <signed/ext>]
    [I16 U64 <signed/ext>]
    [I16 F32 <signed/to-float>]
    [I16 F64 <signed/to-float>]
    [I32 I8 <integer/trunc>]
    [I32 I16 <integer/trunc>]
    [I32 I64 <signed/ext>]
    [I32 U8 <integer/trunc>]
    [I32 U16 <integer/trunc>]
    [I32 U32 <bitcast>]
    [I32 U64 <signed/ext>]
    [I32 F32 <signed/to-float>]
    [I32 F64 <signed/to-float>]
    [I64 I8 <integer/trunc>]
    [I64 I16 <integer/trunc>]
    [I64 I32 <integer/trunc>]
    [I64 U8 <integer/trunc>]
    [I64 U16 <integer/trunc>]
    [I64 U32 <integer/trunc>]
    [I64 U64 <bitcast>]
    [I64 F32 <signed/to-float>]
    [I64 F64 <signed/to-float>]
    [U8 U16 <unsigned/ext>]
    [U8 U32 <unsigned/ext>]
    [U8 U64 <unsigned/ext>]
    [U8 I8 <bitcast>]
    [U8 I16 <unsigned/ext>]
    [U8 I32 <unsigned/ext>]
    [U8 I64 <unsigned/ext>]
    [U8 F32 <unsigned/to-float>]
    [U8 F64 <unsigned/to-float>]
    [U16 U8 <integer/trunc>]
    [U16 U32 <unsigned/ext>]
    [U16 U64 <unsigned/ext>]
    [U16 I8 <integer/trunc>]
    [U16 I16 <bitcast>]
    [U16 I32 <unsigned/ext>]
    [U16 I64 <unsigned/ext>]
    [U16 F32 <unsigned/to-float>]
    [U16 F64 <unsigned/to-float>]
    [U32 U8 <integer/trunc>]
    [U32 U16 <integer/trunc>]
    [U32 U64 <unsigned/ext>]
    [U32 I8 <integer/trunc>]
    [U32 I16 <integer/trunc>]
    [U32 I32 <bitcast>]
    [U32 I64 <unsigned/ext>]
    [U32 F32 <unsigned/to-float>]
    [U32 F64 <unsigned/to-float>]
    [U64 U8 <integer/trunc>]
    [U64 U16 <integer/trunc>]
    [U64 U32 <integer/trunc>]
    [U64 I8 <integer/trunc>]
    [U64 I16 <integer/trunc>]
    [U64 I32 <integer/trunc>]
    [U64 I64 <bitcast>]
    [U64 F32 <unsigned/to-float>]
    [U64 F64 <unsigned/to-float>]
    [F32 I8 <float/to-signed>]
    [F32 I16 <float/to-signed>]
    [F32 I32 <float/to-signed>]
    [F32 I64 <float/to-signed>]
    [F32 U8 <float/to-unsigned>]
    [F32 U16 <float/to-unsigned>]
    [F32 U32 <float/to-unsigned>]
    [F32 U64 <float/to-unsigned>]
    [F32 F64 <float/ext>]
    [F64 I8 <float/to-signed>]
    [F64 I16 <float/to-signed>]
    [F64 I32 <float/to-signed>]
    [F64 I64 <float/to-signed>]
    [F64 U8 <float/to-unsigned>]
    [F64 U16 <float/to-unsigned>]
    [F64 U32 <float/to-unsigned>]
    [F64 U64 <float/to-unsigned>]
    [F64 F32 <float/trunc>])
  (instance ($symbol Conv.From. $from .To. $to) (Conv $from $to)
    (transparent-function (conv a) ($op a))))

(builtin-op <bitcast> {(forall A B) (-> A B)} "bitcast")
(builtin-op <integer/trunc> {(forall A B) (-> A B)} "integer.trunc")
(builtin-op <signed/ext> {(forall A B) (-> A B)} "signed.ext")
(builtin-op <unsigned/ext> {(forall A B) (-> A B)} "unsigned.ext")
(builtin-op <signed/to-float> {(forall A B) (-> A B)} "signed.to-float")
(builtin-op <unsigned/to-float> {(forall A B) (-> A B)} "unsigned.to-float")
(builtin-op <float/to-signed> {(forall A B) (-> A B)} "float.to-signed")
(builtin-op <float/to-unsigned> {(forall A B) (-> A B)} "float.to-unsigned")
(builtin-op <float/trunc> {(forall A B) (-> A B)} "float.trunc")
(builtin-op <float/ext> {(forall A B) (-> A B)} "float.ext")
