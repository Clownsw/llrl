(no-implicit-std)

(import "std/prelude/stage-1" _)
(import "std/s" s/_)
(import "std/derive" derive/_)
(import "std/access" unsafe-get)
(import "std/integer" _.U64)
(import "std/memory" Ptr ptr/_ _.Ptr)
(import "std/box" Box _.Box)
(import "std/ref" Ref ref _.Ref)
(import "std/either" Either left right)
(import "std/array" Array array/_ _.Array)
(import "std/vector" Vector vector/buffer)
(export hash Hasher hasher/_ Hash hash! hash-array! hash-all! Hash._ derive/Hash)

(function (hash s a) {(forall S A) (-> S A U64) (where (Hash A) (Hasher S))}
  (hasher/reset! s)
  (hash! s a) ; -> (hasher/write! ... s) ...
  (hasher/finish s))

(class (Hasher S)
  (function (hasher/reset! s) {(-> S unit)})
  (function (hasher/write! bytes s) {(-> (Array U8) S unit)})
  (function (hasher/finish s) {(-> S U64)}))

(class (Hash A)
  (function (hash! s a) {(forall S) (-> S A unit) (where (Hasher S))})

  ; Required for optimizing Hash.U8
  (function (hash-array! s a) {(forall S) (-> S (Array A) unit) (where (Hasher S))}
    (let ([i (ref 0)]
          [l (array/length a)])
      (while (< ~i l)
        (hash! s (unsafe-get a[~i]))
        (set! i (+ ~i 1))))))

(macro (hash-all! s)
  (s/match s
    [(_ ,s ,@xs)
      (ok `(begin ,@(s/map [^1 `(,\hash! ,s ,%1)] xs)!))]
    [_
      (err "Expected (hash-all! state a ...)")]))

(instance Hash.Never (Hash Never)
  (transparent-function (hash! s a)
    (never a)))

(instance Hash.Bool (Hash Bool)
  (function (hash! s a)
    (hash! s (if a 1 0) {U8})))

(instance Hash.Ordering (Hash Ordering)
  (function (hash! s a)
    (hash! s (match a [ordering:less 0] [ordering:equal 1] [ordering:greater 2]) {U8})))

(instance Hash.U8 (Hash U8)
  (function (hash! s a)
    (hasher/write! (array/unsafe-temporary-bytearray a) s))

  (function (hash-array! s a)
    (hasher/write! a s)))

($for1 $ty (U16 U32 U64 I8 I16 I32 I64 F32 F64)
  (instance ($symbol Hash. $ty) (Hash $ty)
    (function (hash! s a)
      (hasher/write! (array/unsafe-temporary-bytearray a) s))))

(instance Hash.Ptr (forall A) (Hash (Ptr A))
  (function (hash! s a)
    (hash! s (ptr/address a))))

(instance Hash.Box (forall A) (Hash (Box A)) (where (Hash A))
  (function (hash! s a)
    (hash! s ~a)))

(instance Hash.Ref (forall A) (Hash (Ref A)) (where (Hash A))
  (function (hash! s a)
    (hash! s ~a)))

(instance Hash.Option (forall A) (Hash (Option A)) (where (Hash A))
  (function (hash! s a)
    (match a
      [none
        (hash! s 0 {U8})]
      [(some (let a))
        (hash! s 1 {U8})
        (hash! s a)])))

(instance Hash.Result (forall T E) (Hash (Result T E)) (where (Hash T) (Hash E))
  (function (hash! s a)
    (match a
      [(err (let a))
        (hash! s 0 {U8})
        (hash! s a)]
      [(ok (let a))
        (hash! s 1 {U8})
        (hash! s a)])))

(instance Hash.Either (forall L R) (Hash (Either L R)) (where (Hash L) (Hash R))
  (function (hash! s a)
    (match a
      [(left (let a))
        (hash! s 0 {U8})
        (hash! s a)]
      [(right (let a))
        (hash! s 1 {U8})
        (hash! s a)])))

(instance Hash.Array (forall A) (Hash (Array A)) (where (Hash A))
  (function (hash! s a)
    (hash-array! s a)))

(instance Hash.Vector (forall A) (Hash (Vector A)) (where (Hash A))
  (function (hash! s a)
    (hash! s (vector/buffer a))))

(macro (derive/Hash s)
  (s/match s
    [(_ _ ,type-con ,@value-cons)
      (let ([inst-name (derive/symbol/concat 'Hash. (derive/data/type-con/name type-con))!]
            [inst-signature (derive/data/type-con/instance-signature \Hash type-con)!]
            [function-body
              (match value-cons
                [(s:list) 'unit]
                [(s:list (let value-con)) `(match a ,(hash-clause none value-con)!)]
                [_ `(match a ,@(hash-clauses 0 value-cons)!)])])
        (ok
          `(instance ,inst-name ,@inst-signature
            (function (hash! s a)
              ,function-body))))]
    [_
      (err "Unsupported derivation")]))

(function (hash-clauses index value-cons)
  (match value-cons
    [(s:cons (let value-con) (let value-cons))
      (ok
        `(,(hash-clause (some index) value-con)!
          ,@(hash-clauses (+ index 1) value-cons)!))]
    [_
      (ok '())]))

(function (hash-clause index value-con)
  (let ([hash-index
          (if-match1 (some (let index)) index
            `(,\hash! s (annotate ,(s:integer #f index) ,\U16))
            'unit)]
        [con-name (derive/data/value-con/name value-con)]
        [con-fields (derive/data/value-con/fields value-con)])
    (ok (if-match1 (some (let fields)) con-fields
      (let1 names (s/map [^1 (gensym)] fields)!
        `[(,con-name ,@(s/map [^1 `(let ,%1)] names)!)
          ,hash-index
          ,@(s/map [^1 `(,\hash! s ,%1)] names)!])
      `[,con-name
        ,hash-index]))))
