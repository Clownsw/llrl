(no-implicit-std)

(builtin-type (Fun.0 Ret) "fun")
(builtin-type (Fun.1 A Ret) "fun")
(builtin-type (Fun.2 A B Ret) "fun")
(builtin-type (Fun.3 A B C Ret) "fun")
(builtin-type (Fun.4 A B C D Ret) "fun")
(builtin-type (Fun.5 A B C D E Ret) "fun")
(builtin-type (Fun.6 A B C D E F Ret) "fun")
(builtin-type (Fun.7 A B C D E F G Ret) "fun")
(builtin-type (Fun.8 A B C D E F G H Ret) "fun")
(builtin-type (Fun.9 A B C D E F G H I Ret) "fun")
(builtin-type (Fun.10 A B C D E F G H I J Ret) "fun")
(builtin-type (Fun.11 A B C D E F G H I J K Ret) "fun")
(builtin-type (Fun.12 A B C D E F G H I J K L Ret) "fun")
(builtin-type (Fun.13 A B C D E F G H I J K L M Ret) "fun")
(builtin-type (Fun.14 A B C D E F G H I J K L M N Ret) "fun")
(builtin-type (Fun.15 A B C D E F G H I J K L M N O Ret) "fun")
(builtin-type (Fun.16 A B C D E F G H I J K L M N O P Ret) "fun")

(value-data Tuple.0
  0:)
(value-data (Tuple.1 A)
  (1: A))
(value-data (Tuple.2 A B)
  (2: A B))
(value-data (Tuple.3 A B C)
  (3: A B C))
(value-data (Tuple.4 A B C D)
  (4: A B C D))
(value-data (Tuple.5 A B C D E)
  (5: A B C D E))
(value-data (Tuple.6 A B C D E F)
  (6: A B C D E F))
(value-data (Tuple.7 A B C D E F G)
  (7: A B C D E F G))
(value-data (Tuple.8 A B C D E F G H)
  (8: A B C D E F G H))
(value-data (Tuple.9 A B C D E F G H I)
  (9: A B C D E F G H I))
(value-data (Tuple.10 A B C D E F G H I J)
  (10: A B C D E F G H I J))
(value-data (Tuple.11 A B C D E F G H I J K)
  (11: A B C D E F G H I J K))
(value-data (Tuple.12 A B C D E F G H I J K L)
  (12: A B C D E F G H I J K L))
(value-data (Tuple.13 A B C D E F G H I J K L M)
  (13: A B C D E F G H I J K L M))
(value-data (Tuple.14 A B C D E F G H I J K L M N)
  (14: A B C D E F G H I J K L M N))
(value-data (Tuple.15 A B C D E F G H I J K L M N O)
  (15: A B C D E F G H I J K L M N O))
(value-data (Tuple.16 A B C D E F G H I J K L M N O P)
  (16: A B C D E F G H I J K L M N O P))

(data Bool
  false
  true)
(export Bool)

(builtin-type I8 "i8")
(builtin-type I16 "i16")
(builtin-type I32 "i32")
(builtin-type I64 "i64")
(export I8 I16 I32 I64)

(builtin-type U8 "u8")
(builtin-type U16 "u16")
(builtin-type U32 "u32")
(builtin-type U64 "u64")
(export U8 U16 U32 U64)

(builtin-type F32 "f32")
(builtin-type F64 "f64")
(export F32 F64)

(builtin-type String "string")
(export String)

(builtin-type Char "char")
(export Char)

(builtin-type CapturedUse "captured-use")
(export CapturedUse)

(value-data (Option A)
  none
  (some A))
(export Option none some)

(value-data (Result T E)
  (err E)
  (ok T))
(export Result err ok)

(sealed-class (Number A))
(instance Number.I8 (Number I8))
(instance Number.I16 (Number I16))
(instance Number.I32 (Number I32))
(instance Number.I64 (Number I64))
(instance Number.U8 (Number U8))
(instance Number.U16 (Number U16))
(instance Number.U32 (Number U32))
(instance Number.U64 (Number U64))
(instance Number.F32 (Number F32))
(instance Number.F64 (Number F64))
(export Number Number._)

(sealed-class (FPNumber A))
(instance FPNumber.F32 (FPNumber F32))
(instance FPNumber.F64 (FPNumber F64))
(export FPNumber FPNumber._)

(builtin-type (Syntax A) "syntax"
  [(syntax A) "syntax"])
(export Syntax syntax)

(value-data Sexp
  (sexp:integer Bool U64)
  (sexp:fpnumber F64)
  (sexp:bool Bool)
  (sexp:symbol String)
  (sexp:string String)
  (sexp:char Char)
  (sexp:cons (Syntax Sexp) (Syntax Sexp))
  sexp:nil
  (sexp:use CapturedUse))
(export Sexp sexp:_)
