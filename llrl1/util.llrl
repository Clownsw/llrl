; This module contains an llrl-independent utilities,
; but the API is not well thought out enough to be adopted as std.

(import "std/s" s/_)
(import "std/integer" Integer._ integer/_)
(import "std/io" IoError with-file! file/_)
(import "std/ord-map" _)

;    (getter con: con/a con/b)
; => (function (con/a x) (with1 (con: (let con/a) (let con/b)) x con/a))
;    (function (con/b x) (with1 (con: (let con/a) (let con/b)) x con/b))
; NOTE: Should we define a lens/prism instead of an ad-hoc getter?
(export getter)
(macro (getter s)
  (s/match s
    [(_ ,value-con-name ,@field-names)
      (ok `(begin ,@(s/traverse [^1 (getter-function value-con-name field-names %1)] field-names)!))]
    [_
      (err "Expected (getter value-con-name field-name ...)")]))

(function (getter-function con-name fields field)
  (match field
    [(s:symbol "_")
      (ok '(begin))]
    [_
      (let1 self (gensym)
        (ok `(function (,field ,self)
          (,\with1 (,con-name ,@(s/map [^1 `(let ,%1)] fields)!) ,self ,field))))]))

(export embed-text-file-as-string!)
(macro (embed-text-file-as-string! s)
  (s/match s
    [(_ ,(s:string (let path)))
      ; FIXME: The file path should be relative to the caller of the macro
      (match (with-file! path "r" read-string-to-end!)
        [(ok (let str))
          (ok (s:string str))]
        [(err (let e))
          (err (string e))])]
    [_
      (err "Expected (embed-text-file-as-string! \"path\")")]))

(export embed-binary-file!)
(macro (embed-binary-file! s)
  (s/match s
    [(_ ,(s:string (let path)))
      ; FIXME: The file path should be relative to the caller of the macro
      (match (with-file! path "rb" read-bytes-to-end!)
        [(ok (let bytes))
          ; TODO: Reduce size and overhead
          ; Embedding (array ...) causes stack overflow!
          (ok `(,\load-embedded-binary-data ,(s:string (string/join "," (it/map [^1 (integer/to-string 16 %1)] bytes)))))]
        [(err (let e))
          (err (string e))])]
    [_
      (err "Expected (embed-binary-file! \"path\")")]))

(function (load-embedded-binary-data d) {(-> String (Array U8))}
  (let1 buf vector/empty
    (for (let s) (string/split "," d)
      (vector/push! (option/force (integer/from-string? 16 s)) buf))
    (vector/buffer buf)))

;    (string (it/format ", " (array 1 2 3)))
; => "1, 2, 3"
(export Format _.Format it/format)
(function (it/format sep it) {(forall T A) (-> String (T A) (Format T A))}
  (format: sep it))

(value-data (Format T A)
  (format: String (T A)))

(instance Display.Format (forall T A) (Display (Format T A)) (where (Iterate T) (Display A))
  (function (display! w a)
    (with1 (format: (let sep) (let it)) a
      (for (: (let i) (let a)) (it/with-index it)
        (when (ne? i 0) (display! w sep)!)
        (display! w a)!))
    (ok unit)))

; Representation of data A on context information C.
(export Contextual contextual: _.Contextual ContextualDisplay contextual-display!)
(value-data (Contextual A C)
  (contextual: A C))

(instance Display.Contextual (forall A C) (Display (Contextual A C)) (where (ContextualDisplay A C))
  (function (display! w a)
    (with1 (contextual: (let a) (let ctx)) a
      (contextual-display! w a ctx))))

(class (ContextualDisplay A C)
  (function (contextual-display! w a ctx) {(forall W Error) (-> W A C (Result unit Error)) (where (WriteString W Error))}))

; Depth first search.
(export Dfs dfs)
(class (Dfs A)
  (function (dfs f a) {(forall Error) (-> (-> A (Result unit Error)) A (Result unit Error))}))

(export it/permutations)
(function (it/permutations it) {(forall T A) (-> (T A) (Iterator (Array A))) (where (Ord A) (Iterate T))}
  (iterator/unfold
    (case1? (some (let seq)) (: (shallow-copy seq) (when? (next-permutation! seq) seq)))
    (some (collect it))))

(function (next-permutation! array) {(forall A) (-> (Array A) Bool) (where (Ord A))}
  (when (<= (array/length array) 1) (return #f))
  (let1 i (ref (- (array/length array) 1))
    (loop
      (let1 j (ref ~i)
        (set! i (- ~i 1))
        (cond
          [(< (get array[~i]) (get array[~j]))
            (let1 k (ref (- (array/length array) 1))
              (while (>= (get array[~i]) (get array[~k])) (set! k (- ~k 1)))
              (array/swap! ~i ~k array)
              (array/reverse! (array/skip ~j array)))
            (return #t)]
          [(eq? ~i 0)
            (array/reverse! array)
            (return #f)])))))

(export it/fold1)
(function (it/fold1 f it) {(forall T A) (-> (-> A A A) (T A) (Option A)) (where (Iterate T))}
  (let1 it (iterate it)
    (with1? (some (let init)) (iterator/next! it)
      (it/fold f init it))))

(export it/zip-ordered)
(function (it/zip-ordered a b) {(forall T S A) (-> (T A) (S A) (Iterator (ZipEither A A))) (where (Iterate T) (Iterate S) (Ord A))}
  (let ([a (iterate a)]
        [b (iterate b)]
        [buf (ref none)])
    (iterator/new (lambda ()
      (match? (: (if-match1 (some (left (let l))) ~buf (some l) (iterator/next! a))
                 (if-match1 (some (right (let r))) ~buf (some r) (iterator/next! b)))
        [(: (some (let l)) (some (let r)))
          (match (compare l r)
            [ordering:less
              (set! buf (some (right r)))
              (zip-either:left l)]
            [ordering:greater
              (set! buf (some (left l)))
              (zip-either:right r)]
            [ordering:equal
              (set! buf none)
              (zip-either:both l r)])]
        [(: none (some (let r)))
          (set! buf none)
          (zip-either:right r)]
        [(: (some (let l)) none)
          (set! buf none)
          (zip-either:left l)])))))

; Perform a topological sort.
(export topological-sort)
(function (topological-sort traverse src)
  {(forall K V T)
   (-> (-> (-> K unit) V unit) (T (: K V)) (Array (Vector V)))
   (where (Ord K) (Iterate T))}
  (let ([keys ord-map/empty]
        [values vector/empty])
    (for (: (let i) (: (let k) (let v))) (it/with-index src)
      (ord-map/insert! k i keys)
      (vector/push! v values))
    (let* ([values (vector/buffer values)]
           [indices (array/new -1 {I64} (array/length values))]
           [lowlinks (array/new -1 {I64} (array/length values))]
           [scc-indices (array/new -1 {I64} (array/length values))]
           [next-index (ref 0 {I64})]
           [next-scc-index (ref 0 {I64})]
           [stack vector/empty]
           [(visit i)
              (set! indices[i] ~next-index)
              (set! lowlinks[i] ~next-index)
              (vector/push! i stack)
              (set! next-index (+ ~next-index 1))
              (traverse
                (lambda (k)
                  (when-match1 (some (let j)) (ord-map/get? k keys)
                    (cond
                      [(< (get indices[j]) 0)
                        (visit j)
                        (set! lowlinks[i] (min (get lowlinks[i]) (get lowlinks[j])))]
                      [(< (get scc-indices[j]) 0)
                        (set! lowlinks[i] (min (get lowlinks[i]) (get indices[j])))])))
                (get values[i]))
              (when (= (get indices[i]) (get lowlinks[i]))
                (while
                  (let1 j (option/force (vector/pop! stack))
                    (set! scc-indices[j] ~next-scc-index)
                    (ne? j i)))
                (set! next-scc-index (+ ~next-scc-index 1)))])
      (for (let i) (iterator/range 0 (array/length values) 1)
        (when (< (get indices[i]) 0)
          (visit i)))
      (let1 result (array/new* [^0 vector/empty] (conv ~next-scc-index))
        (for (: (let value) (let scc-index)) (it/zip values scc-indices)
          (vector/push! value (get result[(conv scc-index)])))
        result))))
