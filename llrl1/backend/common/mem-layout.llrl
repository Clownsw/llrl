(import "std/memory" size-of align-of)
(import "std/ord-map" _)
(import "std/hash-map" next-power-of-two) ; NOTE: This should be moved to the appropriate module
(import "~/util" _)
(import "~/lowering/ir" [ir/_ _])
(export Layout _.Layout layout: layout/_)
(export LayoutComponent _.LayoutComponent layout-component: layout-component/_)
(export LayoutResolver _.LayoutResolver layout-resolver/_)
(export Class _.Class class:_ class/_)

(derive (Eq Ord DebugDisplay) data Layout
  (layout: U64 U64 Class (Array LayoutComponent)))

(getter layout: layout/size layout/align layout/class layout/components)

(function (layout/terminal size align cls) {(-> U64 U64 Class Layout)}
  (layout: size align cls array/empty))

(assert-eq? (size-of (Ptr U8)) 8)
(assert-eq? (align-of (Ptr U8)) 8)

(function layout/pointer {Layout}
  (layout/terminal 8 8 class:integer))

(function layout/clos {Layout}
  (layout/terminal 16 8 class:integer))

(function (layout/product components) {(-> (Array (: ir/Ct Layout)) Layout)}
  (let* ([(layouts) (it/map (case1 (: _ (let l)) l) components)]
         [align (it/fold [^2 (max %1 (layout/align %2))] 0 (layouts))]
         [cls (it/fold [^2 (class/merge %1 (layout/class %2))] class:void (layouts))]
         [offset (ref 0)]
         [components
           (|> components
               (it/map (case1 (: (let ty) (layout: (let s) (let a) _ _))
                 (set! offset (+ (aligned ~offset a) s))
                 (layout-component: (- ~offset s) ty)))
               collect)]
         [size (aligned ~offset align)]
         [cls (if (< 16 size) class:memory cls)])
    (layout: size align cls components)))

(function (layout/sum tss) {(-> (Array Layout) Layout)}
  (let* ([align (it/fold [^2 (max %1 (layout/align %2))] 0 tss)]
         [cls (it/fold [^2 (class/merge %1 (layout/class %2))] class:integer tss)]
         [size (aligned (it/fold [^2 (max %1 (layout/size %2))] 0 tss) align)]
         [cls (if (< 16 size) class:memory cls)])
    (layout/terminal size align cls)))

(instance Default.Layout (Default Layout)
  (function default
    (layout/terminal 0 0 class:void)))

(derive (Eq Ord DebugDisplay) value-data LayoutComponent
  (layout-component: U64 ir/Ct))

(getter layout-component: layout-component/offset layout-component/ty)

(derive (DebugDisplay) value-data LayoutResolver
  (layout-resolver: (OrdMap ir/CtId (Option Layout))))

(function (layout-resolver/new) {(-> LayoutResolver)}
  (layout-resolver: ord-map/empty))

(getter layout-resolver: known-layouts)

(function (layout-resolver/register! defs ls) {(-> (OrdMap ir/CtId ir/Def) LayoutResolver unit)}
  (for (: (let id) (let def)) (ord-map/elems defs)
    (when (or (is? (ir/def:struct _) def) (is? (ir/def:union _) def))
      (register-visit! defs ls (ir/ct:id id)))))

(function (register-visit! defs ls ty) {(-> (OrdMap ir/CtId ir/Def) LayoutResolver ir/Ct Layout)}
  (match ty
    [(ir/ct:id (let id))
      (match (ord-map/get? id (known-layouts ls))
        [(some none)
          (assert #f (string "Unsized type: " (debug id)))]
        [(some (some (let layout)))
          layout]
        [none
          (ord-map/insert! id none (known-layouts ls))
          (let1
            layout
            (match (ord-map/get? id defs)
              [(some (ir/def:struct (ir/struct: _ (let fields))))
                (layout/product
                  (|> fields (it/map [^1 (register-visit! defs ls %1)]) (it/zip fields) collect))]
              [(some (ir/def:union (ir/union: (let tys))))
                (layout/sum
                  (|> tys (it/map [^1 (register-visit! defs ls %1)]) collect))]
              [(some _)
                (assert #f (string "Not a type: " (debug id)))]
              [none
                (assert #f (string "Unknown type: " (debug id)))])
            (ord-map/insert! id (some layout) (known-layouts ls))
            layout)])]
    [_
      (layout-resolver/get ty ls)]))

(function (layout-resolver/get ty ls) {(-> ir/Ct LayoutResolver Layout)}
  (match ty
    [(ir/ct:id (let id))
      (match (ord-map/get? id (known-layouts ls))
        [(some (some (let layout)))
          layout]
        [_
          (assert #f (string "Unregistered type: " (debug id)))])]
      [(ir/ct:generic-inst _ _)
        (assert #f "Found ct:generic-inst on layout-resolver/get")]
      [(ir/ct:table-get _ _)
        (assert #f "Found ct:table-get on layout-resolver/get")]
      [(ir/ct:ptr _)
        layout/pointer]
      [(ir/ct:clos _ _)
        layout/clos]
      [(ir/ct:s (let n))
        (let1 size (next-power-of-two (/ (+ n 7) 8))
          (layout/terminal size size class:integer))]
      [(ir/ct:u (let n))
        (let1 size (next-power-of-two (/ (+ n 7) 8))
          (layout/terminal size size class:integer))]
      [ir/ct:f32
        (layout/terminal 4 4 class:floating-point)]
      [ir/ct:f64
        (layout/terminal 8 8 class:floating-point)]
      [ir/ct:string
        (layout/terminal (size-of String) (align-of String) class:integer)]
      [ir/ct:char
        (layout/terminal (size-of Char) (align-of Char) class:integer)]
      [(ir/ct:array _)
        (layout/terminal (size-of (Array U8)) (align-of (Array U8)) class:integer)]
      [ir/ct:captured-use
        (layout/terminal (size-of ir/CapturedUse) (align-of ir/CapturedUse) class:integer)]
      [ir/ct:unit
        default]
      [ir/ct:env
        layout/pointer]
      [(ir/ct:syntax _)
        (layout/terminal (size-of (Syntax unit)) (align-of (Syntax unit)) class:integer)]))

(derive (Eq Ord DebugDisplay Hash) value-data Class
  class:void
  class:integer
  class:floating-point
  class:memory)

(function (class/merge a b) {(-> Class Class Class)}
  (match (: a b)
    [(: class:memory _) class:memory]
    [(: _ class:memory) class:memory]
    [(: class:integer _) class:integer]
    [(: _ class:integer) class:integer]
    [(: class:floating-point _) class:floating-point]
    [(: _ class:floating-point) class:floating-point]
    [(: class:void _) class:void]))

(function (aligned size align) {(-> U64 U64 U64)}
  (if (ne? align 0)
    (+ size (% (- align (% size align)) align))
    size))
