(import "std/memory" size-of align-of)
(import "std/ord-map" _)
(import "std/hash-map" next-power-of-two) ; NOTE: This should be moved to the appropriate module
(import "~/util" _)
(import "~/lowering/ir" [ir/_ _])
(export SizeAlign _.SizeAlign size-align/_ size-align:)

(derive (Eq Ord DebugDisplay Hash) value-data SizeAlign
  (size-align: U64 U64))

(getter size-align: size-align/size size-align/align)

(assert-eq? (size-of (Ptr U8)) 8)
(assert-eq? (align-of (Ptr U8)) 8)

(function size-align/pointer {SizeAlign}
  (size-align: (size-of (Ptr U8)) (align-of (Ptr U8))))

(function (aligned size align) {(-> U64 U64 U64)}
  (if (ne? align 0)
    (+ size (% (- align (% size align)) align))
    size))

(function (size-align/struct tss) {(-> (Array SizeAlign) SizeAlign)}
  (let* ([align (|> tss (it/map size-align/align) (it/fold [^2 (max %1 %2)] 0))]
         [size (ref 0)])
    (for (size-align: (let esize) (let ealign)) tss
      (set! size (+ (aligned ~size ealign) esize)))
    (size-align: (aligned ~size align) align)))

(function (size-align/union tss) {(-> (Array SizeAlign) SizeAlign)}
  (let* ([align (|> tss (it/map size-align/align) (it/fold [^2 (max %1 %2)] 0))]
         [size (|> tss (it/map size-align/size) (it/fold [^2 (max %1 %2)] 0))])
    (size-align: (aligned size align) align)))

(function (size-align/get! defs known-size-aligns ty)
  {(-> (OrdMap ir/CtId ir/CtDef) (OrdMap ir/CtId (Option SizeAlign)) ir/Ct SizeAlign)}
  (match ty
    [(ir/ct:id (let id))
      (match (ord-map/get? id known-size-aligns)
        [(some none)
          (assert #f (string "Unsized type: " (debug id)))]
        [(some (some (let ts)))
          ts]
        [none
          (ord-map/insert! id none known-size-aligns)
          (let1
            ts
            (match (ord-map/get? id defs)
              [(some (ir/ct-def:struct (ir/struct: _ (let fields))))
                (size-align/struct (|> fields (it/map [^1 (size-align/get! defs known-size-aligns %1)]) collect))]
              [(some (ir/ct-def:union (ir/union: (let tys))))
                (size-align/union (|> tys (it/map [^1 (size-align/get! defs known-size-aligns %1)]) collect))]
              [(some _)
                (assert #f (string "Not a type: " (debug id)))]
              [none
                (assert #f (string "Unknown type: " (debug id)))])
            (ord-map/insert! id (some ts) known-size-aligns)
            ts)])]
      [(ir/ct:generic-inst _ _)
        (assert #f "Found ct:generic-inst on size-align/get!")]
      [(ir/ct:table-get _ _)
        (assert #f "Found ct:table-get on size-align/get!")]
      [(ir/ct:ptr _)
        size-align/pointer]
      [(ir/ct:clos _ _)
        (size-align: 16 8)]

      [(ir/ct:s (let n))
        (let1 size (next-power-of-two (/ (+ n 7) 8))
          (size-align: size size))]
      [(ir/ct:u (let n))
        (let1 size (next-power-of-two (/ (+ n 7) 8))
          (size-align: size size))]
      [ir/ct:f32
        (size-align: 4 4)]
      [ir/ct:f64
        (size-align: 8 8)]

      [ir/ct:string
        (size-align: (size-of String) (align-of String))]
      [ir/ct:char
        (size-align: (size-of Char) (align-of Char))]
      [(ir/ct:array _)
        (size-align: (size-of (Array U8)) (align-of (Array U8)))]
      [ir/ct:captured-use
        (size-align: (size-of ir/CapturedUse) (align-of ir/CapturedUse))]
      [ir/ct:unit
        (size-align: 0 0)]
      [ir/ct:env
        size-align/pointer]
      [(ir/ct:syntax _)
        (size-align: (size-of (Syntax unit)) (align-of (Syntax unit)))]
      [ir/ct:hole
        (assert #f "Found ct:hole at size-align/get!")]))
