(import "std/memory" size-of align-of ptr/_)
(import "~/util" _)
(import "~/sexp" [sexp/_ _])
(import "~/lowering/ir" [ir/_ _])
(export Rep _.Rep rep: rep/_ Embed Embed._ embed! reference!)

; Data represented by bytes and indirect references.
(derive (Eq DebugDisplay) data Rep
  (rep: U64 (Array U8) (Vector (: U64 Rep))))

(getter rep: rep/align rep/direct rep/indirect)

(function (rep/zero size align) {(-> U64 U64 Rep)}
  (rep: align (array/new 0 size) vector/empty))

(function (rep/bytes bytes) {(-> (Array U8) Rep)}
  (rep: 1 bytes vector/empty))

(function (rep/of value) {(forall A) (-> A Rep) (where (Embed A))}
  (let1 rep (rep/zero (size-of A) (align-of A))
    (embed! 0 value rep)
    rep))

(class (Embed A)
  (function (embed! offset a rep) {(-> U64 A Rep unit)}
    (|> rep rep/direct array/ptr (ptr/add offset) ptr/cast (ptr/store! a))))

(function (reference! offset r rep) {(-> U64 Rep Rep unit)}
  (vector/push! (: offset r) (rep/indirect rep)))

; primitives
($for1 $ty [Bool U8 U16 U32 U64 F32 F64 Char]
  (instance ($symbol Embed. $ty) (Embed $ty)))

; string = [ ptr:8 | len:8 ]
;   where
;     ptr -> [ data:<len> ]
(assert-eq? (size-of String) 16)
; TODO: Assert that `ptr` is at offset=0, `body` is at offset=8
(instance Embed.String (Embed String)
  (function (embed! offset a rep)
    (reference! offset (|> a string/bytes collect rep/bytes) rep)
    (embed! (+ offset 8) (string/length a) rep)))

; captured-use = [ tag:8 | node-id:8 ]
; TODO: Assert that `tag` is at offset=0, `node-id` is at offset=8
(assert-eq? (size-of ir/CapturedUse) 16)
(instance Embed.ir/CapturedUse (Embed ir/CapturedUse))

; s = [ ptr:8 ]
;   where
;     ptr -> s-buffer
(assert-eq? (size-of (ir/S ir/CapturedUse)) 8)
(instance Embed.S (Embed (ir/S ir/CapturedUse))
  (function (embed! offset a rep)
    (reference! offset (rep/of (s-buffer: (sexp/s/location a) (sexp/s/rep a))) rep)))

(value-data SBuffer
  (s-buffer: ir/SyntaxMetadata (sexp/SRep ir/CapturedUse)))

; s-buffer = [ syntax-metadata:8 | s-rep:24 ]
(assert-eq? (size-of SBuffer) 32)
(instance Embed.SBuffer (Embed SBuffer)
  (function (embed! offset a rep)
    (with1 (s-buffer: (let metadata) (let body)) a
    (embed! offset metadata rep)
    (embed! (+ offset 8) body rep))))

; syntax-metadata = [ ip:4 | ir: 4 ]
(assert-eq? (size-of ir/SyntaxMetadata) 8)
(instance Embed.ir/SyntaxMetadata (Embed ir/SyntaxMetadata))

; s-rep = [ tag:8 | body:16 ]
(assert-eq? (size-of (sexp/SRep ir/CapturedUse)) 24)
(instance Embed.SRep (Embed (sexp/SRep ir/CapturedUse))
  (function (embed! offset a rep)
    (match a
      [(sexp/s-rep:integer (let signed?) (let v))
        (embed! offset 0 {U8} rep)
        (embed! (+ offset 8) signed? rep)
        (embed! (+ offset 16) v rep)]
      [(sexp/s-rep:fp-number (let v))
        (embed! offset 1 {U8} rep)
        (embed! (+ offset 8) v rep)]
      [(sexp/s-rep:bool (let v))
        (embed! offset 2 {U8} rep)
        (embed! (+ offset 8) v rep)]
      [(sexp/s-rep:symbol (let s))
        (embed! offset 3 {U8} rep)
        (embed! (+ offset 8) s rep)]
      [(sexp/s-rep:string (let s))
        (embed! offset 4 {U8} rep)
        (embed! (+ offset 8) s rep)]
      [(sexp/s-rep:char (let c))
        (embed! offset 5 {U8} rep)
        (embed! (+ offset 8) c rep)]
      [(sexp/s-rep:cons (let car) (let cdr))
        (embed! offset 6 {U8} rep)
        (embed! (+ offset 8) car rep)
        (embed! (+ offset 16) cdr rep)]
      [sexp/s-rep:nil
        (embed! offset 7 {U8} rep)]
      [(sexp/s-rep:pure (let v))
        (embed! offset 8 {U8} rep)
        (embed! (+ offset 8) v rep)])))
