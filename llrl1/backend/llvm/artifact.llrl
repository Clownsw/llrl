(import "std/ord-map" _)
(import "std/hash-map" _)
(import "llvm" [llvm/_ _])
(import "~/util" _)
(import "~/lowering/ir" [ir/_ _])
(import "~/backend/native/mem-layout" layout/_ LayoutResolver _.LayoutResolver layout-resolver/_)
(import "~/backend/llvm/runtime" RuntimeBuildEnv)
(import "~/backend/llvm/codegen" _)
(export ContextArtifact _.ContextArtifact context-artifact/_)
(export FunctionSymbol _.FunctionSymbol function-symbol: function-symbol/_)
(export ModuleArtifact _.ModuleArtifact module-artifact/_)
(export FunctionArtifact _.FunctionArtifact function-artifact/_)
(export RawFunctionArtifact _.RawFunctionArtifact raw-function-artifact/_)

(derive (DebugDisplay) data ContextArtifact
  (context-artifact:
    llvm/Context
    llvm/DataLayout
    LayoutResolver
    (OrdMap ir/CtId llvm/Type)
    (OrdMap ir/CtId FunctionSymbol)
    (Ref (Option FunctionSymbol))))

(instance Conv.From.ContextArtifact.To.llvm/Context (Conv ContextArtifact llvm/Context)
  (function (conv a) (context-artifact/llvm-context a)))

(instance TypeEnv.ContextArtifact (TypeEnv ContextArtifact)
  (function (type-env/get-type? id ca) (ord-map/get? id (llvm-types ca))))

(getter context-artifact:
  context-artifact/llvm-context
  context-artifact/data-layout
  layout-resolver
  llvm-types
  function-symbols
  main-function-symbol)

(function (context-artifact/new llvm-context llvm-data-layout)
  {(-> llvm/Context llvm/DataLayout ContextArtifact)}
  (context-artifact: llvm-context llvm-data-layout (layout-resolver/new) ord-map/empty ord-map/empty (ref none)))

(function (context-artifact/function-symbol? id ca) {(-> ir/CtId ContextArtifact (Option FunctionSymbol))}
  (ord-map/get? id (function-symbols ca)))

(function (context-artifact/main-function-symbol? ca) {(-> ContextArtifact (Option FunctionSymbol))}
  ~(main-function-symbol ca))

(function (context-artifact/add-types! defs ca) {(-> (OrdMap ir/CtId ir/Def) ContextArtifact unit)}
  (layout-resolver/register! defs (layout-resolver ca))

  ; Put type headers
  (for (: (let id) (let def)) (ord-map/elems defs)
    (match def
      [(ir/def:struct _)
        (ord-map/insert! id (llvm/type/named-struct (conv ca) (|> id ir/ct-id/index string)) (llvm-types ca))
        unit]
      [(ir/def:union _)
        (let1 layout (layout-resolver/get (ir/ct:id id) (layout-resolver ca))
          (ord-map/insert! id (codegen/union-type (conv ca) layout) (llvm-types ca)))
        unit]
      [_]))

  ; Set struct bodies
  (for (: (let id) (let def)) (ord-map/elems defs)
    (when-match1 (ir/def:struct (ir/struct: _ (let fields))) def
      ; Bacause currently we always use C-compatible structures, there is no difference depending on def.repr
      (llvm/type/struct-set-body!
        (|> fields (it/map [^1 (codegen/type ca %1)]) collect)
        #f
        (|> ca llvm-types (ord-map/get? id) option/force)))))

(derive (DebugDisplay) value-data FunctionSymbol
  (function-symbol: String ir/FunctionKind llvm/Type))

(getter function-symbol: function-symbol/name function-symbol/kind function-symbol/ty)

(function (function-symbol/new name def ca) {(-> String ir/Function ContextArtifact FunctionSymbol)}
  (with1 (ir/function: (let kind) _ (let params) (let ret) _ _) def
    (let* ([param-tys
             (it/chain
               (match? kind
                 [ir/function-kind:macro (codegen/type ca (ir/ct:ptr ret))]
                 [ir/function-kind:standard (codegen/type ca ir/ct:env)])
               (it/map [^1 (codegen/type ca (ir/rt-param/ty %1))] params))]
           [ret-ty
             (match kind
               [ir/function-kind:macro (llvm/type (conv ca) void)]
               [_ (codegen/type ca ret)])]
           [ty (llvm/type (conv ca) (-> ,@(collect param-tys) ,ret-ty))])
      (function-symbol: name kind ty))))

(derive (DebugDisplay) data ModuleArtifact
  (module-artifact:
    ContextArtifact
    llvm/Module
    (OrdMap ir/CtId FunctionArtifact)
    (Ref (Option FunctionArtifact))
    (HashMap String RawFunctionArtifact)))

(instance Conv.From.ModuleArtifact.To.ContextArtifact (Conv ModuleArtifact ContextArtifact)
  (function (conv a) (module-artifact/parent a)))

(instance Conv.From.ModuleArtifact.To.llvm/Context (Conv ModuleArtifact llvm/Context)
  (function (conv a) (conv (conv-to ContextArtifact a))))

(instance Conv.From.ModuleArtifact.To.llvm/Module (Conv ModuleArtifact llvm/Module)
  (function (conv a) (module-artifact/llvm-module a)))

(instance TypeEnv.ModuleArtifact (TypeEnv ModuleArtifact)
  (function (type-env/get-type? id ma) (type-env/get-type? id (module-artifact/parent ma))))

(instance RuntimeBuildEnv.ModuleArtifact (RuntimeBuildEnv ModuleArtifact)
  (function (runtime-build-env/capture-runtime-function! name ty ma)
    (let1 a (module-artifact/capture-raw-function! name [^0 (c-function-signature: (ty) #f)] ma)
      (raw-function-artifact/value a))))

(instance BuildEnv.ModuleArtifact (BuildEnv ModuleArtifact)
  (function (build-env/capture-function! id ma)
    (function-artifact/value (module-artifact/capture-function! id ma)))

  (function (build-env/capture-c-function! name sig ma)
    (let1 a (module-artifact/capture-raw-function! name sig ma)
      (: (raw-function-artifact/value a) (raw-function-artifact/sig a))))

  (function (build-env/capture-intrinsic-function! name ty ma)
    (let1 a (module-artifact/capture-raw-function! name [^0 (c-function-signature: (ty) #f)] ma)
      (raw-function-artifact/value a))))

(getter module-artifact:
  module-artifact/parent
  module-artifact/llvm-module
  functions
  main-function
  raw-functions)

(function (module-artifact/new name ca) {(-> String ContextArtifact ModuleArtifact)}
  (let1 module (llvm/module/new name (conv ca))
    (llvm/module/set-target-triple! llvm/target/default-triple module)
    (llvm/module/set-data-layout! (context-artifact/data-layout ca) module)
    (module-artifact: ca module ord-map/empty (ref none) hash-map/empty)))

(function (module-artifact/complete! ma) {(-> ModuleArtifact llvm/Module)}
  (module-artifact/llvm-module ma))

(function (module-artifact/function? id ma) {(-> ir/CtId ModuleArtifact (Option FunctionArtifact))}
  (ord-map/get? id (functions ma)))

(function (module-artifact/main-function? ma) {(-> ModuleArtifact (Option FunctionArtifact))}
  ~(main-function ma))

(function (module-artifact/add-functions! defs ma) {(-> (OrdMap ir/CtId ir/Def) ModuleArtifact unit)}
  ; Put symbols
  (for (: (let id) (let def)) (ord-map/elems defs)
    (when-match1 (ir/def:function (let f)) def
      (let* ([symbol (function-symbol/new (string (ir/ct-id/index id)) f (conv ma))]
             [duplicated-symbol (ord-map/insert! id symbol (function-symbols (conv ma)))])
        (assert-is? none duplicated-symbol))))
  ; Generate function bodies
  (for (: (let id) (let def)) (ord-map/elems defs)
    (when-match1 (ir/def:function (let f)) def
      (with1 (function-artifact: (let value) (let symbol)) (module-artifact/capture-function! id ma)
        (codegen/function-body! (function-symbol/name symbol) value f ma)))))

(function (module-artifact/add-main! f ma) {(-> ir/Function ModuleArtifact FunctionArtifact)}
  (assert-is? ir/function-kind:main (ir/function/kind f))
  (assert-is? none ~(main-function-symbol (conv ma)))
  (let* ([symbol (function-symbol/new "llrl_main" f (conv ma))]
         [artifact (module-artifact/bind-function! symbol ma)])
    (codegen/function-body!
      (function-symbol/name symbol)
      (function-artifact/value artifact)
      f
      ma)
    (set! (main-function-symbol (conv ma)) (some symbol))
    (set! (main-function ma) (some artifact))
    artifact))

(function (module-artifact/add-c-main-adapter! ma) {(-> ModuleArtifact unit)}
  (codegen/c-main-adapter!
    (function-artifact/value (module-artifact/bind-function! (option/force ~(main-function-symbol (conv ma))) ma))
    ma))

(function (module-artifact/bind-function! symbol ma) {(-> FunctionSymbol ModuleArtifact FunctionArtifact)}
  (function-artifact:
    (llvm/module/add-function! (function-symbol/name symbol) (function-symbol/ty symbol) (conv ma))
    symbol))

(function (module-artifact/capture-function! id ma) {(-> ir/CtId ModuleArtifact FunctionArtifact)}
  (if-match1 (some (let artifact)) (ord-map/get? id (functions ma))
    artifact
    (if-match1 (some (let symbol)) (context-artifact/function-symbol? id (conv ma))
      (let1 artifact (module-artifact/bind-function! symbol ma)
        (ord-map/insert! id artifact (functions ma))
        artifact)
      (assert #f (string "Unresolved function symbol: " (debug id))))))

(function (module-artifact/capture-raw-function! name sig ma)
  {(-> String (-> CFunctionSignature) ModuleArtifact RawFunctionArtifact)}
  (if-match1 (some (let artifact)) (hash-map/get? name (raw-functions ma))
    artifact
    (let* ([sig (sig)]
           [value (llvm/module/add-function! name (c-function-signature/type sig) (conv ma))]
           [artifact (raw-function-artifact: value sig)])
      (hash-map/insert! name artifact (raw-functions ma))
      artifact)))

(derive (DebugDisplay) value-data FunctionArtifact
  (function-artifact: llvm/Value FunctionSymbol))

(getter function-artifact: function-artifact/value function-artifact/symbol)

(derive (DebugDisplay) value-data RawFunctionArtifact
  (raw-function-artifact: llvm/Value CFunctionSignature))

(getter raw-function-artifact: raw-function-artifact/value raw-function-artifact/sig)
