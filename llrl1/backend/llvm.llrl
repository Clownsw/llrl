(import "std/ord-map" _)
(import "llvm" [llvm/_ _])
(import "~/util" _)
(import "~/report" Report _.Report report/_ phase:_)
(import "~/lowering" [LoweringBackend Backend])
(import "~/lowering/ir" [ir/_ _])
(import "~/backend/options" Options options/_)
(import "~/backend/native" NativeBackend)
(import "~/backend/native/linking" link!)
(import "~/backend/llvm/artifact" _)
(import "~/backend/llvm/executor" _)
(export Backend _.Backend)

(derive (DebugDisplay) data Backend
  (backend:
    Bool
    Report
    llvm/Context
    llvm/PassManager
    (OrdMap ir/CtId ir/Def)
    (Vector ir/Init)
    ContextArtifact
    Executor
    (Ref U32)))

(getter backend:
  verbose?
  report
  llvm-ctx
  llvm-pm
  queued-defs
  queued-main
  context-artifact
  executor
  next-generation)

(instance LoweringBackend.Backend (LoweringBackend Backend)
  (function (backend/put-def! id def b)
    (ignore (ord-map/insert! id def (queued-defs b))))

  (function (backend/put-main! init b)
    (assert-is? none (|> b context-artifact context-artifact/main-function-symbol?) "main is frozen")
    (vector/push! init (queued-main b)))

  (function (backend/execute-macro! id s b)
    (codegen! #f b)
    (report/on (report b) phase:jit
      (if-match1 (some (let symbol)) (context-artifact/function-symbol? id (context-artifact b))
        (executor/unsafe-call-macro symbol s (executor b))
        (err (string "macro not found: " (debug id))))))

  (function (backend/complete! r b)
    (report/merge! (report b) r)))

(instance NativeBackend.Backend (NativeBackend Backend)
  (function (backend/produce-executable! dest clang-options b)
    (codegen! #t b)
    (let1 artifact (module-artifact/new "c-main-adapter" (context-artifact b))
      (module-artifact/add-c-main-adapter! artifact)
      (executor/add-module! (module-artifact/complete! artifact) (executor b)))
    (let* ([(emit! path m)
            (|> (executor b)
                executor/target-machine
                (llvm/target-machine/emit-to-file! m path llvm/code-gen-file-type/object-file)
                (result/unwrap* [^1 (assert #f %1)]))]
           [modules (executor/remove-modules! (executor b))]
           [result (report/on (report b) phase:link (link! dest modules emit! clang-options))!])
      (when (verbose? b)
        (eprintln! "### produce executable")
        (eprintln! result))
      (ok unit)))

  (function (backend/execute-main! b)
    (codegen! #t b)
    (report/on (report b) phase:jit
      (if-match1 (some (let symbol)) (|> b context-artifact context-artifact/main-function-symbol?)
        (ok (executor/unsafe-call-main symbol (executor b)))
        (err "main not found"))))

  (function (backend/new options)
    (let* ([ctx (llvm/context/new)]
           [pm (llvm/pass-manager/new)]
           [executor (executor/new ctx (options/optimize? options))]
           [ca (context-artifact/new ctx (executor/data-layout executor))])
      (llvm/with-pass-manager-builder (lambda (pmb)
        (llvm/pass-manager-builder/set-opt-level! (if (options/optimize? options) 2 0) pmb)
        (llvm/pass-manager-builder/populate-module-pass-manager! pm pmb)))
      (backend: (options/verbose? options) (report/new) ctx pm ord-map/empty vector/empty ca executor (ref 0))))

  (function (backend/dispose! b)
    (llvm/pass-manager/dispose! (llvm-pm b))
    (executor/dispose! (executor b))
    (llvm/context/dispose! (llvm-ctx b))))

(function (codegen! build-main? b) {(-> Bool Backend unit)}
  (when (and (ord-map/empty? (queued-defs b)) (not build-main?)) (return))
  (let* ([defs (queued-defs b)]
         [main (when? build-main? (vector/consume-all! (queued-main b)))]
         [name (string "gen" ~(next-generation b))]
         [artifact (module-artifact/new name (context-artifact b))])
    (set! (next-generation b) (+ ~(next-generation b) 1))

    (report/on (report b) phase:codegen
      (context-artifact/add-types! defs (context-artifact b))

      (when (verbose? b)
        (eprintln! "### adding defs")
        (for (: (let id) (let def)) (ord-map/elems defs)
          (eprintln! (debug id) " = " (debug def))))

      (module-artifact/add-functions! defs artifact)

      (when (verbose? b)
        (eprintln! "### added defs")
        (eprintln! (module-artifact/llvm-module artifact)))

      (ord-map/clear! (queued-defs b))

      (when-match1 (some (let main)) main
        (when (verbose? b)
          (eprintln! "### adding main")
          (for (let init) main (eprintln! (debug init))))

        (module-artifact/add-main! (ir/function/main main) artifact)

        (when (verbose? b)
          (eprintln! "### added main")
          (eprintln! (|> artifact module-artifact/main-function? option/force function-artifact/value))))

      (when-match1 (err (let msg)) (|> artifact module-artifact/llvm-module llvm/module/verify)
        (assert #f (string "LLVM verify module failed: " msg)))

      (llvm/pass-manager/run! (module-artifact/llvm-module artifact) (llvm-pm b))

      (when (verbose? b)
        (eprintln! "### optimized")
        (eprintln! (module-artifact/llvm-module artifact)))

        (executor/add-module! (module-artifact/complete! artifact) (executor b)))))
