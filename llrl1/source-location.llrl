(import "std/ord-map" _)
(import "~/util" _)
(import "~/interning" _)
(import "~/path" Path _.Path)
(export Location _.Location location/_)
(export LocationRange _.LocationRange location-range/_)
(export SourceLocation _.SourceLocation source-location/_)
(export SourceLocationTable source-location-table/_)
(export SourceLocator source-locator/_)

(derive (Eq Ord DebugDisplay Hash Default) value-data Location
  (location: U32 U32 U32))

(instance Display.Location (Display Location)
  (function (display! w a)
    (display-all! w (+ (location/line a) 1) ":" (+ (location/character a) 1))))

(getter location: location/offset     ; Zero-based, in bytes offset of the string.
                  location/line       ; Zero-based, line position of the string.
                  location/character) ; Zero-based, in bytes offset on a line of the string.

(function location/init {Location}
  default)

(function (location/eat s location) {(-> String Location Location)}
  (with1 (location: (let offset) (let line) (let character)) location
    (let ([offset (+ offset (cast (string/length s)))]
          [line (ref line)]
          [character (ref character)])
      (for (: (let i) (let l)) (it/with-index (string/split "\n" s))
        (if (eq? i 0)
          (set! character (+ ~character (cast (string/length l))))
          (begin
            (set! line (+ ~line 1))
            (set! character (cast (string/length l))))))
      (location: offset ~line ~character))))

(derive (Eq Ord DebugDisplay Hash Default) value-data LocationRange
  (location-range: Location Location))

(instance Display.LocationRange (Display LocationRange)
  (function (display! w a)
    (with1 (location-range: (let start) (let end)) a
      (display-all! w start "-" end))))

(getter location-range: location-range/start ; An inclusive range's start position.
                        location-range/end)  ; An exclusive range's end position.

(function (location-range/new start end) {(-> Location Location LocationRange)}
  (location-range: start end))

(function (location-range/empty location) {(-> Location LocationRange)}
  (location-range: location location))

(function (location-range/from-range s start end) {(-> String U64 U64 LocationRange)}
  (let* ([l (location/eat (string/substring 0 start s) default)]
         [r (location/eat (string/substring start end s) l)])
    (location-range: l r)))

(function (location-range/review s range) {(-> String LocationRange String)}
  (with1 (location-range: (location: (let start) _ _) (location: (let end) _ _)) range
    (string/substring (cast start) (cast end) s)))

; Data that indicates the specific location of a particular file of the llrl source.
(derive (Eq Ord DebugDisplay Hash) value-data SourceLocation
  (source-location: (Interned Path) (Interned LocationRange)))

(instance ContextualDisplay.SourceLocation (ContextualDisplay SourceLocation SourceLocationTable)
  (function (contextual-display! w a ctx)
    (with1 (: (let path) (let range)) (source-location-table/review a ctx)
      (display-all! w path ":" range))))

(data SourceLocationTable
  (source-location-table: (InternTable Path) (OrdMap (Interned Path) (InternTable LocationRange))))

(function (source-location-table/new) {(-> SourceLocationTable)}
  (source-location-table: (intern-table/new) ord-map/empty))

(function (source-location-table/get-locator! path table) {(-> Path SourceLocationTable SourceLocator)}
  (with1 (source-location-table: (let path-table) (let range-tables)) table
    (let1 path (intern-table/intern! path path-table)
      (if-match1 (some (let range-table)) (ord-map/get? path range-tables)
        (source-locator: path range-table)
        (let1 range-table (intern-table/new)
          (ord-map/insert! path range-table range-tables)
          (source-locator: path range-table))))))

(function (source-location-table/review location table) {(-> SourceLocation SourceLocationTable (: Path LocationRange))}
  (with ([(source-location: (let path) (let range)) location]
         [(source-location-table: (let path-table) (let range-tables)) table])
    (let ([reviewed-path (intern-table/review path path-table)]
          [reviewed-range (intern-table/review range (option/force (ord-map/get? path range-tables)))])
      (: reviewed-path reviewed-range))))

(value-data SourceLocator
  (source-locator: (Interned Path) (InternTable LocationRange)))

(function (source-locator/temporary) {(-> SourceLocator)}
  (source-location-table/get-locator! default (source-location-table/new)))

(function (source-locator/issue! range locator) {(-> LocationRange SourceLocator SourceLocation)}
  (with1 (source-locator: (let path) (let range-table)) locator
    (source-location: path (intern-table/intern! range range-table))))
