(import "~/code" _)
(println! "llrl1/tests/code")

(import "std/hash-map" _)
(import "~/path" [path/_ _] path/_)
(import "~/source-location" source-locator/_)

(let1
  code
  (code/from-source-text
    (result/force (path/from-string "~/foo"))
    (source-locator/temporary)
    ")")
  (assert-eq? (result/force (path/from-string "~/foo")) (code/path code))
  (assert (hash-map/empty? (code/dependencies code)))
  (assert-eq? 1 (array/length (code/errors code)))
  (assert-is? (error:parse-failed _) (get (code/errors code)[0])))

(let1
  code
  (code/from-source-text
    (result/force (path/from-string "~/foo"))
    (source-locator/temporary)
    "(import \"std/io\" write) (import \"~/foo/bar\" baz)")
  (assert-eq? (result/force (path/from-string "~/foo")) (code/path code))
  (assert-eq? (hash-map (: "builtin" path/builtin)
                        (: "std" path/std)
                        (: "std/io" (result/force (path/from-string "std/io")))
                        (: "~/foo/bar" (result/force (path/from-string "~/foo/bar"))))
              (code/dependencies code))
  (assert (array/empty? (code/errors code))))

(let1
  code
  (code/from-source-text
    (result/force (path/from-string "hello/world"))
    (source-locator/temporary)
    "(no-implicit-std) (import \"std/io\" write) (import \"~/foo/bar\" baz) (import \"../hello\") (import \"~/world\")")
  (assert-eq? (result/force (path/from-string "hello/world")) (code/path code))
  (assert-eq? (hash-map (: "builtin" path/builtin)
                        (: "std/io" (result/force (path/from-string "std/io")))
                        (: "~/foo/bar" (result/force (path/from-string "hello/foo/bar"))))
              (code/dependencies code))
  (assert-eq? 2 (array/length (code/errors code)))
  (assert-is? (error:invalid-import-path "../hello" _) (get (code/errors code)[0]))
  (assert-eq? error:cannot-import-module-itself (get (code/errors code)[1])))
