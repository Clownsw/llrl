(import "~/source" _)
(println! "llrl1/tests/source")

(import "std/ord-map" _)
(import "std/ord-set" _)
(import "~/path" [path/_ _] path/_)
(import "~/report" report/_)
(import "~/source-location" source-location-table/_ source-locator/_)

(let1
  source
  (source/from-code-text
    (result/force (path/from-string "~/foo"))
    (source-locator/temporary)
    ")")
  (assert-eq? (result/force (path/from-string "~/foo")) (source/path source))
  (assert (ord-map/empty? (source/dependencies source)))
  (assert-eq? 1 (array/length (source/errors source)))
  (assert-is? (error:parse-failed _) (get (source/errors source)[0])))

(let1
  source
  (source/from-code-text
    (result/force (path/from-string "~/foo"))
    (source-locator/temporary)
    "(import \"std/io\" write) (import \"~/foo/bar\" baz)")
  (assert-eq? (result/force (path/from-string "~/foo")) (source/path source))
  (assert-eq? (ord-map (: "builtin" path/builtin)
                        (: "std" path/std)
                        (: "std/io" (result/force (path/from-string "std/io")))
                        (: "~/foo/bar" (result/force (path/from-string "~/foo/bar"))))
              (source/dependencies source))
  (assert (array/empty? (source/errors source))))

(let1
  source
  (source/from-code-text
    (result/force (path/from-string "hello/world"))
    (source-locator/temporary)
    "(no-implicit-std) (import \"std/io\" write) (import \"~/foo/bar\" baz) (import \"../hello\") (import \"~/world\")")
  (assert-eq? (result/force (path/from-string "hello/world")) (source/path source))
  (assert-eq? (ord-map (: "builtin" path/builtin)
                        (: "std/io" (result/force (path/from-string "std/io")))
                        (: "~/foo/bar" (result/force (path/from-string "hello/foo/bar"))))
              (source/dependencies source))
  (assert-eq? 2 (array/length (source/errors source)))
  (assert-is? (error:invalid-import-path "../hello" _) (get (source/errors source)[0]))
  (assert-eq? error:cannot-import-module-itself (get (source/errors source)[1])))

(function test-sources
  (|> (array
        (: "builtin" "")
        (: "~" "(import \"~/bar\") (import \"std/a\")")
        (: "~/foo" "(import \"~/bar\") (import \"std/b\")")
        (: "~/bar" "(import \"~/baz\") (import \"std\")")
        (: "std" "(import \"~/b\")")
        (: "std/a" "(import \"~/b\")")
        (: "std/b" "")
        (: "std/c" "(hoge")
        (: "std" "(no-implicit-std)"))
      (it/map (case1 (: (let path) (let text))
        (: (result/force (path/from-string path)) text)))))

(function test-inputs
  (|> (array "~" "~/foo" "std/c")
      (it/map [^1 (result/force (path/from-string %1))])))

(let ([loader (loader/new)]
      [source-location-table (source-location-table/new)])

  (for (: (let path) (let text)) test-sources
    (loader/add-source! path text loader))

  (let1 result (source-set/collect! test-inputs loader source-location-table (report/new))
    (assert-eq? (ord-set "~" "std" "builtin")
                (|> result source-set/packages ord-map/keys (it/map [^1 (string %1)]) ord-set/collect))
    (assert-eq? (ord-set "~" "~/foo" "~/bar" "~/baz" "std" "std/a" "std/b" "std/c" "std" "builtin")
                (|> result source-set/sources (it/map [^1 (string (source/path %1))]) ord-set/collect))
    (for (let source) (source-set/sources result)
      (match (string (source/path source))
        ["~/baz"
          (assert-is? (some error:module-not-found)
                      (get? (source/errors source)[0]))]
        ["std/c"
          (assert-is? (some (error:parse-failed _))
                      (get? (source/errors source)[0]))]
        [_
          (assert (array/empty? (source/errors source)))]))))
