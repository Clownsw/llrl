(import "~/util" _)
(import "~/ast/node-id" _)
(import "~/ast/data" _)
(import "~/ast/builder" _)
(import "~/ast/display" _)
(println! "llrl1/tests/ast")

(let* ([gen (node-id-generator/new (module-id/from-index 1))]
       [a (node-id-generator/next! gen)]
       [b (node-id-generator/next! gen)]
       [c (node-id-generator/next! gen)])
  (assert-ne? a b)
  (assert-ne? b c)
  (assert-eq? (node-id/module a) (node-id/module b))
  (assert-ne? (node-id/index-in-module a) (node-id/index-in-module b)))

(let* ([gen (node-id-generator/new (module-id/from-index 1))]
       [a (node-id-generator/next! gen)]
       [(show k) {(-> Kind String)} (string (contextual: k unit))])
  (assert-eq? (kind:unresolved a) (build-kind unit (unresolved ,a)))
  (assert-eq? kind:type (build-kind unit *))
  (assert-eq? kind:constraint (build-kind unit Constraint))
  (assert-eq? kind:satisfaction (build-kind unit Satisfaction))
  (assert-eq? kind:value (build-kind unit Value))
  (assert-eq? kind:macro (build-kind unit Macro))
  (assert-eq? (kind:fun (array kind:type) kind:type) (build-kind unit (-> * *)))
  (assert-eq? (kind:fun (array kind:type kind:type) kind:type) (build-kind unit (-> * * *)))
  (assert-eq? (kind:fun (array kind:type kind:constraint) kind:type) (build-kind unit (-> * ,kind:constraint *)))
  (assert-eq? (kind:fun (array kind:type kind:type) kind:type) (build-kind unit (-> ,@(array kind:type kind:type) *)))
  (assert-eq? (kind:error "var") (build-kind unit (error ,"var")))

  (assert (kind/first-class? (build-kind unit *)))
  (assert (kind/first-class? (build-kind unit (-> * (-> * *) *))))
  (assert (not (kind/first-class? (build-kind unit (-> * Constraint *)))))
  (assert (not (kind/contains-error? (build-kind unit *))))
  (assert (kind/contains-error? (build-kind unit (error ,"a"))))
  (assert (kind/contains-error? (build-kind unit (-> * (error ,"a") *))))

  (assert-eq? "$" (show (build-kind unit (unresolved ,a))))
  (assert-eq? "*" (show (build-kind unit *)))
  (assert-eq? "Constraint" (show (build-kind unit Constraint)))
  (assert-eq? "Satisfaction" (show (build-kind unit Satisfaction)))
  (assert-eq? "Value" (show (build-kind unit Value)))
  (assert-eq? "Macro" (show (build-kind unit Macro)))
  (assert-eq? "(-> * * *)" (show (build-kind unit (-> * * *))))
  (assert-eq? "(-> (-> * *) * *)" (show (build-kind unit (-> (-> * *) * *)))))

(let* ([gen (node-id-generator/new (module-id/from-index 1))]
       [a (node-id-generator/next! gen)]
       [b (node-id-generator/next! gen)]
       [(show t) {(-> Type String)} (string (contextual: t unit))])
  (assert-eq? (type:unresolved a) (build-type unit (unresolved ,a)))
  (assert-eq? (type:con type-con/bool) (build-type unit (con ,(type-con:data builtin/bool))))
  (assert-eq? (type:con type-con/bool) (build-type unit (data ,builtin/bool)))
  (assert-eq? (type:con type-con/string) (build-type unit (builtin ,builtin/string)))
  (assert-eq? (type:gen b) (build-type unit (gen ,b)))
  (assert-eq? (type:con type-con/unit) (build-type unit unit))
  (assert-eq? (type:con type-con/unit) (build-type unit (:)))
  (assert-eq? (type:app (type:con (type-con/tuple 2)) (array (type:con type-con/i32) (type:con type-con/char)))
              (build-type unit (: ,@(array (type:con type-con/i32) (type:con type-con/char)))))
  (assert-eq? (type:app (type:con (type-con/tuple 2)) (array (type:con type-con/unit) (type:con type-con/unit)))
              (build-type unit (: unit unit)))
  (assert-eq? (type:app (type:con (type-con/tuple 3)) (array (type:unresolved a) (type:gen b) (type:con type-con/unit)))
              (build-type unit (: (unresolved ,a) (gen ,b) unit)))
  (assert-eq? (type:app (type:con (type-con/fun 1)) (array (type:con type-con/unit) (type:con type-con/unit)))
              (build-type unit (-> unit unit)))
  (assert-eq? (type:app (type:con (type-con/fun 2)) (array (type:con type-con/unit) (type:gen b) (type:con type-con/unit)))
              (build-type unit (-> unit (gen ,b) unit)))
  (assert-eq? (type:app (type:con (type-con/fun 2)) (array (type:unresolved a) (type:gen b) (type:con type-con/unit)))
              (build-type unit (-> ,@(array (type:unresolved a) (type:gen b)) unit)))
  (assert-eq? (type:app (type:unresolved a) (array (type:gen b)))
              (build-type unit ((unresolved ,a) (gen ,b))))
  (assert-eq? (type:error "var") (build-type unit (error ,"var")))

  (assert (not (type/contains-error? (build-type unit unit))))
  (assert (type/contains-error? (build-type unit (error ,"a"))))
  (assert (type/contains-error? (build-type unit (-> unit (error ,"a") unit))))

  (assert-eq? "unit" (show (build-type unit unit)))
  (assert-eq? "(: unit unit)" (show (build-type unit (: unit unit))))
  (assert-eq? "(-> unit unit)" (show (build-type unit (-> unit unit))))
  (assert-eq? "(-> (-> $ $) unit unit)" (show (build-type unit (-> (-> (unresolved ,a) (gen ,b)) unit unit))))
  (assert-eq? "($ $)" (show (build-type unit ((unresolved ,a) (gen ,b))))))

(let* ([gen (node-id-generator/new (module-id/from-index 1))]
       [(id!) (node-id-generator/next! gen)]
       [(show s) {(-> Scheme String)} (string (contextual: s unit))])
  (assert-eq? "{unit}"
    (show (scheme: (array) (array) (build-type unit unit))))
  (assert-eq? "{(forall $) unit}"
    (show (scheme: (array (type-parameter: (id!) none)) (array) (build-type unit unit))))
  (assert-eq? "{(forall $ [$ *]) unit}"
    (show (scheme: (array (type-parameter: (id!) none) (type-parameter: (id!) (some (annotation: (id!) (build-kind unit *))))) (array) (build-type unit unit))))
  (assert-eq? "{unit (where $)}"
    (show (scheme: (array) (array (constraint/class (id!) (id!) (array))) (build-type unit unit))))
  (assert-eq? "{unit (where ($ $))}"
    (show (scheme: (array) (array (constraint/number (type:gen (id!)))) (build-type unit unit))))
  (assert-eq? "{(forall $) $ (where ($ $))}"
    (let1 a (id!)
      (show (scheme: (array (type-parameter: a none))
                     (array (constraint/number (type:gen a)))
                     (build-type unit (gen ,a)))))))

(assert-eq? "123" (string (const:integer #t 123)))
(assert-eq? "3.14" (string (const:fp-number 3.14)))
(assert-eq? "\"Hello, World!\\n\"" (string (const:string "Hello, World!\n")))
(assert-eq? "#\\a" (string (const:char #\a)))

(let* ([gen (node-id-generator/new (module-id/from-index 1))]
       [a {(NodeId KindUse)} (node-id-generator/next! gen)]
       [b {(NodeId TypeUse)} (node-id-generator/next! gen)])
  (assert-eq? (node-id/module a) (construct/module (conv a)))
  (assert-eq? (some a) (conv-to? (NodeId KindUse) (conv-to Construct a)))
  (assert-eq? none (conv-to? (NodeId TypeUse) (conv-to Construct a)))
  (assert-ne? (conv-to Construct b) (conv-to Construct a)))

(let* ([gen (node-id-generator/new (module-id/from-index 1))]
       [(id!) (node-id-generator/next! gen)]
       [(show p) {(-> PatternRep String)} (string (contextual: p unit))])
  (assert-eq? "_" (show pattern-rep:wildcard))
  (assert-eq? "#\\\\n" (show (pattern-rep:const (const:char #\\n))))
  (assert-eq? "$" (show (pattern-rep:decon value-con/unit none)))
  (assert-eq? "($ _)" (show (pattern-rep:decon value-con/ok (some (array (pattern: (id!) pattern-rep:wildcard))))))
  (assert-eq? "(let $)" (show (pattern-rep:var (pattern-var: (id!) none))))
  (assert-eq? "(let $ _)" (show (pattern-rep:var (pattern-var: (id!) (some (pattern: (id!) pattern-rep:wildcard))))))
  (assert-eq? "($ _ _)" (show (pattern-rep:unresolved (id!) (some (array (pattern: (id!) pattern-rep:wildcard) (pattern: (id!) pattern-rep:wildcard)))))))

($$ begin
  ($for-each $ty [KindUse TypeUse DataTypeCon BuiltinTypeCon TypeParameter ConstraintUse ClassCon DataValueCon BuiltinValueCon PatternUse PatternVar]
    (instance ($symbol-concat ContextualDisplay. $ty .ForTest) (ContextualDisplay (NodeId $ty) unit)
      (function (contextual-display! w a ctx)
        (display! w "$")))))
