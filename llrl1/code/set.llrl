(import "std/ord-map" _)
(import "std/ord-set" _)
(import "~/util" _)
(import "~/report" Report report/_ phase:_)
(import "~/source-location" SourceLocationTable source-location-table/_)
(import "~/path" Path PackageName ModuleName [path/_ _] path/_)
(import "~/code/error" _)
(import "~/code/unit" _)
(import "~/code/loader" _)
(export CodeSet _.CodeSet code-set/_)

(derive (DebugDisplay) value-data (CodeSet A)
  (code-set: (OrdMap PackageName (OrdMap ModuleName (Code A)))))

(getter code-set: code-set/packages)

(function (code-set/new) {(forall A) (-> (CodeSet A))}
  (code-set: ord-map/empty))

(function (code-set/insert! code set) {(forall A) (-> (Code A) (CodeSet A) unit)}
  (let ([p (|> code code/path path/package)]
        [m (|> code code/path path/module)]
        [packages (code-set/packages set)])
    (match (ord-map/get? p packages)
      [(some (let modules))
        (ignore (ord-map/insert! m code modules))]
      [none
        (ignore (ord-map/insert! p (ord-map (: m code)) packages))])))

(function (code-set/codes set) {(forall A) (-> (CodeSet A) (Iterator (Code A)))}
  (|> set
      code-set/packages
      ord-map/values
      (it/flat-map ord-map/values)))

(function (code-set/errors set) {(forall A) (-> (CodeSet A) (Iterator (: Path Error)))}
  (|> set
      code-set/codes
      (it/flat-map (lambda (code) (it/map [^1 (: (code/path code) %1)] (code/errors code))))))

(function (code-set/resolve-dependencies-order set) {(forall A) (-> (CodeSet A) (Result (Vector (Code A)) (Array Path)))}
  (|> set
      code-set/codes
      (it/map [^1 (: (code/path %1) %1)])
      (topological-sort (lambda (f code)
        (for (let path) (|> code code/dependencies ord-map/values)
          (f path))))
      (it/traverse-result (lambda (codes)
        (if (eq? (vector/length codes) 1)
          (ok (get codes[0]))
          (err (|> codes (it/map code/path) collect)))))))

(function (code-set/build! inputs loader slt report)
  {(forall T A) (-> (T Path) (Loader A) SourceLocationTable Report (CodeSet A)) (where (Iterate T))}
  (let* ([result (code-set/new)]
         [visit-log ord-set/empty]
         [(collect path)
           (when (not (ord-set/insert! path visit-log)) (return))
           (let1
             code
             (result/unwrap*
               [^1 (code/from-error path %1)]
               (loader/load! path (source-location-table/get-locator! path slt) loader))
             (for (let dep) (|> code code/dependencies ord-map/values) (collect dep))
             (code-set/insert! code result))])
    (report/on report phase:collect-code
      (for (let input) inputs
        (collect input)))
    result))
