(import "std/ord-map" _)
(import "std/phantom" _)
(import "std/hash-set" _)
(import "std/io" [io/_ _])
(import "std/system" process/_)
(import "~/util" _)
(import "~/prelude-for-pipeline" _)
(export Error _.Error error:_ Pipeline _.Pipeline pipeline/_)

(value-data Error
  (error:source SourceLocationTable (Array (: Path SourceError)))
  (error:circular-dependencies (Array Path))
  (error:module SourceLocationTable (OrdMap ModuleId Module) Path ModuleError)
  (error:produce-executable String))

(instance Display.Error (Display Error)
  (function (display! w a)
    (match a
      [(error:source (let slt) (let source-errors))
        (for (: (let path) (let e)) source-errors
          (display-all! w path ": " (contextual: e slt) "\n")!)
        (ok unit)]
      [(error:circular-dependencies (let paths))
        (display! w "Circular dependencies detected:\n")!
        (for (let path) paths
          (display-all! w "- " path "\n")!)
        (display! w "Modules cannot import each other.\n")]
      [(error:module (let slt) (let module-set) (let path) (let error))
        (display-all! w (contextual: error (module-display-context module-set slt)) " (while building " path ")\n")]
      [(error:produce-executable (let e))
        (display-all! w "Failed to produce executable: " e "\n")])))

(derive (DebugDisplay) data Pipeline
  (pipeline:
    (SourceLoader ast/Construct)
    Preprocessor
    (Vector Path)
    (Vector String)
    (Ref Bool)
    (Ref Bool)))

(getter pipeline:
  source-loader
  preprocessor
  entry-source-paths
  clang-options
  optimize?
  verbose?)

(function (pipeline/new current-path) {(-> String Pipeline)}
  (let1 loader (source-loader/new)
    (source-loader/add-embedded-builtin! loader)
    (source-loader/add-embedded-std! loader)
    (source-loader/add-package-filepath! package-name/current current-path loader)
    (pipeline: loader default vector/empty vector/empty (ref #f) (ref #f))))

(function (pipeline/enable-feature! feature p) {(-> String Pipeline unit)}
  (preprocessor/enable-feature! feature (preprocessor p)))

(function (pipeline/register-package! name filepath p) {(-> PackageName String Pipeline Bool)}
  (source-loader/add-package-filepath! name filepath (source-loader p)))

(function (pipeline/add-entry-path! path p) {(-> Path Pipeline unit)}
  (vector/push! path (entry-source-paths p)))

(function (pipeline/set-optimize! enabled p) {(-> Bool Pipeline unit)}
  (set! (optimize? p) enabled))

(function (pipeline/set-verbose! enabled p) {(-> Bool Pipeline unit)}
  (set! (verbose? p) enabled))

(function (pipeline/add-clang-option! option p) {(-> String Pipeline unit)}
  (vector/push! option (clang-options p)))

(function (pipeline/run! output run-args b p)
  {(forall B T) (-> String (Option (T String)) (Phantom B) Pipeline (Result (Option I32) Error)) (where (Backend B) (NativeBackend B) (Iterate T))}
  @let1 output (io/path "." output)
  @let1 slt (source-location-table/new)
  @let1 report (report/new)

  @let1 source-set (source-set/collect! (entry-source-paths p) (source-loader p) slt (preprocessor p) report)
  @let1 source-errors (collect (source-set/errors source-set))
  (when (not (array/empty? source-errors)) (err (error:source slt source-errors))!)
  @let1 sources (result/map-err error:circular-dependencies (source-set/resolve-dependencies-order source-set))!

  (backend/with (backend-options: ~(optimize? p) ~(verbose? p)) (lambda (backend)
    @let1 lowerizer (lowerizer/new backend)
    @let1 entry-points (hash-set/collect (entry-source-paths p))

    (match (module/build! (vector/buffer sources) entry-points lowerizer report)
      [(: (let module-set) none)
        (lowerizer/complete! report lowerizer)
        (result/map-err
          error:produce-executable
          (backend/produce-executable! output (vector/buffer (clang-options p)) backend))!
        (backend/complete! report backend {B})
        (ok unit)]
      [(: (let module-set) (some (: (let path) (let error))))
        (err (error:module slt module-set path error))])))!
  (ok
    (with1? (some (let run-args)) run-args
      (|> (process/execute! output run-args)
          (result/unwrap* [^1 (assert #f (string "Failed to execute process: " %1))])
          (option/unwrap* [^0 (assert #f "Failed to complete process")])))))
