(import "std/ord-map" _)
(import "std/ord-set" _)
(import "~/util" _)
(import "~/report" Report _.Report report/_ phase:_)
(import "~/ast" [ast/_ _])
(import "~/module" [m/_ _])
(import "~/emitter/ir" _)
(import "~/emitter/transformer" _)
(import "~/emitter/simplifier" [simplifier/_ _])
(import "~/emitter/normalizer" [normalizer/_ _])
(import "~/emitter/data-expander" [data-expander/_ _])
(import "~/emitter/branch-expander" [branch-expander/_ _])
(import "~/emitter/heap2stack" [heap2stack/_ _])
(export Backend backend/_ Emitter _.Emitter emitter/_)

; Low-level compiler backend used by the emitter backend.
(class (Backend B)
  (function (backend/put-def! id def b) {(-> CtId CtDef B unit)})
  (function (backend/put-main! init b) {(-> Init B unit)})
  (function (backend/execute-main! b) {(-> B (Result Bool String))})
  (function (backend/execute-macro! id s b) {(-> CtId (S CapturedUse) B (Result (S CapturedUse) String))})
  (function (backend/complete! report b) {(-> Report B unit)}))

(data (Emitter B)
  (emitter:
    B
    Report
    (OrdMap m/ModuleId m/Module)
    (OrdSet m/ModuleId)
    CtIdGen
    RtIdGen
    (OrdMap CtKey CtId)
    (OrdMap RtKey RtId)
    (OrdMap CtId ProcessingCtDef)
    (OrdMap CtId data-expander/DataExpansion)
    (Ref Generation)))

(instance m/Backend.Emitter (forall B) (m/Backend (Emitter B)) (where (Backend B))
  (function (backend/add-module! module entry-point? e)
    (emitter/register-module! module e)
    (when entry-point? (emitter/entry-module! (m/module/id module) e)))

  (function (backend/execute-macro! macro-id s e)
    (let1 macro-fun (ct/force-id (emitter/populate! macro-id e))
      (backend/execute-macro! macro-fun s (emitter/backend e)))))

(instance m/ModuleSet.Emitter (forall B) (m/ModuleSet (Emitter B))
  (function (module-set/get? mid e) (m/module-set/get? mid (modules e))))

(instance simplifier/Env.Emitter (forall B) (simplifier/Env (Emitter B))
  (function (alloc-ct! e)
    (ct-id-gen/next! (ct-id-gen e)))

  (function (issue-ct! c e)
    (let1 construct (conv c)
      (bind-ct! (ct-key:construct construct) [^0 (simplifier/simplify-def! e construct)] e)))

  (function (alloc-rt! e)
    (rt-id-gen/next! (rt-id-gen e)))

  (function (issue-rt! c e)
    (bind-rt! (rt-key:construct (conv c)) e)))

(instance normalizer/Env.Emitter (forall B) (normalizer/Env (Emitter B))
  (function (instantiate! id args e)
    (bind-ct!
      (ct-key:inst id args)
      (lambda ()
        (match (ord-map/get? id (ct-defs e))
          [(some (processing-ct-def: _ _ (ct-def:generic (let params) (let ct))))
            (assert-eq? (array/length params) (array/length args))
            (some (replace-ct (ord-map/collect (it/zip params args)) ct))]
          [(some _)
            (assert #f (string "Attemt to instantiate " (debug id) ": which is not a generic definition"))]
          [none
            (assert #f (string "Attemt to instantiate " (debug id) ": which is not a definition"))]))
      e))

  (function (processing-ct-def? id e)
    (with1 (processing-ct-def: (let phase) (let gen) (let def)) (ord-map/get? id (ct-defs e))?
      (some (match phase
        [phase:generalized
          (normalizer/processing-ct-def: #f def)]
        [phase:instantiated
          (ord-map/insert! id (processing-ct-def: phase:normalizing gen def) (ct-defs e))
          (let1 def (normalizer/normalize! e def)
            (ord-map/insert! id (processing-ct-def: phase:normalized gen def) (ct-defs e))
            (normalizer/processing-ct-def: #t def))]
        [phase:normalizing
          (normalizer/processing-ct-def: #f def)]
        [phase:normalized
          (normalizer/processing-ct-def: #t def)]))))

  (function (alloc-ct! e)
    (ct-id-gen/next! (ct-id-gen e)))

  (function (define-ct! id def e)
    (assert-is? none
      (ord-map/insert!
        id
        (processing-ct-def:
          (match def
            [(ct-def:generic _ _) phase:generalized]
            [_ phase:instantiated])
          none
          def)
        (ct-defs e))))

  (function (alloc-rt! e)
    (rt-id-gen/next! (rt-id-gen e))))

(instance data-expander/Env.Emitter (forall B) (data-expander/Env (Emitter B))
  (function (add-ct-def! def e)
    (let1 id (ct-id-gen/next! (ct-id-gen e))
      (ord-map/insert! id (processing-ct-def: phase:normalized (some ~(current-gen e)) def) (ct-defs e))
      id))

  (function (data-expansions e)
    (data-expansions e)))

(instance branch-expander/Env.Emitter (forall B) (branch-expander/Env (Emitter B))
  (function (alloc-rt! e)
    (rt-id-gen/next! (rt-id-gen e))))

(getter emitter:
  emitter/backend
  emitter/report
  modules
  initialized-modules
  ct-id-gen
  rt-id-gen
  ct-mapping
  rt-mapping
  ct-defs
  data-expansions
  current-gen)

(function (emitter/new backend) {(forall B) (-> B (Emitter B)) (where (Backend B))}
  (emitter:
    backend
    (report/new)
    ord-map/empty
    ord-set/empty
    (ct-id-gen/new)
    (rt-id-gen/new)
    ord-map/empty
    ord-map/empty
    ord-map/empty
    ord-map/empty
    (ref (generation: 0))))

(function (emitter/def? id e) {(forall B) (-> CtId (Emitter B) (Option CtDef))}
  (let1 d (|> e ct-defs (ord-map/get? id))?
    (when? (processing-ct-def/populated? d) (conv d))))

(function (emitter/defs e) {(forall B) (-> (Emitter B) (Iterator (: CtId CtDef)))}
  (|> e
      ct-defs
      ord-map/elems
      (it/filter (case1 (: _ (let d)) (processing-ct-def/populated? d)))
      (it/map (case1 (: (let id) (let d)) (: id (conv d))))))

(function (emitter/register-module! module e) {(forall B) (-> m/Module (Emitter B) unit)}
  (ignore (ord-map/insert! (m/module/id module) module (modules e))))

(function (emitter/entry-module! mid e) {(forall B) (-> m/ModuleId (Emitter B) unit) (where (Backend B))}
  (when (not (ord-set/insert! mid (initialized-modules e))) (return))
  (for (let expr) (|> e modules (ord-map/get? mid) option/force m/module/ast-root ast/root/init-expressions)
    (match expr
      [(ast/init-expr:ensure-initialized (let mid))
        (emitter/entry-module! mid e)]
      [(ast/init-expr:eval (let expr))
        (backend/put-main! (emitter/populate! expr e) (emitter/backend e))])))

(function (emitter/populate! src e) {(forall B S D) (-> S (Emitter B) D) (where (Backend B) (simplifier/Simplify S D) (Transform D))}
  (with1 (: (let dest) (let defs)) (report/on (emitter/report e) phase:emit (populate! src e))
    (for (: (let id) (let def)) defs (backend/put-def! id def (emitter/backend e)))
    dest))

(function (emitter/complete! report e) {(forall B) (-> Report (Emitter B) unit)}
  (report/merge! (emitter/report e) report))

(function (populate! src e)
  {(forall B S D) (-> S (Emitter B) (: D (Iterator (: CtId CtDef)))) (where (Backend B) (simplifier/Simplify S D) (Transform D))}
  (let* ([dest (simplifier/simplify! e src)]
         [dest (ref (normalizer/normalize! e dest))]
         [gen (generation/next ~(current-gen e))])
    (set! (current-gen e) gen)

    (let1 generation-defs (collect-generation-defs e ~dest)
      ; Assign generation information to each ProcessingCtDef generated in this populate pass.
      (for (let id) generation-defs
        (let1 d (option/force (ord-map/get? id (ct-defs e)))
          (ord-map/insert! id (processing-ct-def/with-generation gen d) (ct-defs e))))

      (let ([(data? id)
              (with1? (ct-def:data (let d)) (processing-ct-def/def (option/force (ord-map/get? id (ct-defs e))))
                (: id d))]
            [expanded-defs (data-expander/compute! e (it/filter-map data? generation-defs))])
        (for (let id) expanded-defs (ord-set/insert! id generation-defs)))

      (let1 target (canonicalize-target: dest (ct-defs e) generation-defs)
        (data-expander/expand! (data-expansions e) target)
        (branch-expander/expand! e target)
        (heap2stack/run! target))

      ; Possible optimizations that are not implemented:
      ; * Closure inlining: we can inline closure immediate calls like $<f>{<env>}(..)
      ; * More escape analysis to promote heap allocations to stack allocations

      (: ~dest
         (it/filter-map
           (lambda (id)
             (let1 d (option/force (ord-map/get? id (ct-defs e)))
               (when? (processing-ct-def/populated? d) (: id (processing-ct-def/def d)))))
           generation-defs)))))

(function (bind-ct! key build e) {(forall B) (-> CtKey (-> (Option CtDef)) (Emitter B) CtId)}
  (if-match1 (some (let id)) (ord-map/get? key (ct-mapping e))
    id
    (let1 id (ct-id-gen/next! (ct-id-gen e))
      (ord-map/insert! key id (ct-mapping e))
      (when-match1 (some (let def)) (build)
        (ord-map/insert!
          id
          (processing-ct-def: (if-match1 (ct-def:generic _ _) def phase:generalized phase:instantiated) none def)
          (ct-defs e)))
      id)))

(function (bind-rt! key e) {(forall B) (-> RtKey (Emitter B) RtId)}
  (if-match1 (some (let id)) (ord-map/get? key (rt-mapping e))
    id
    (let1 id (rt-id-gen/next! (rt-id-gen e))
      (ord-map/insert! key id (rt-mapping e))
      id)))

(derive (Eq Ord DebugDisplay Hash) value-data CtKey
  (ct-key:construct ast/Construct)
  (ct-key:inst CtId (Array Ct)))

(derive (Eq Ord DebugDisplay Hash) value-data RtKey
  (rt-key:construct ast/Construct))

(derive (DebugDisplay) value-data ProcessingCtDef
  (processing-ct-def: Phase (Option Generation) CtDef))

(getter processing-ct-def: processing-ct-def/phase processing-ct-def/generation processing-ct-def/def)

(instance Conv.From.ProcessingCtDef.To.CtDef (Conv ProcessingCtDef CtDef)
  (function (conv a) (processing-ct-def/def a)))

(function (processing-ct-def/populated? d) {(-> ProcessingCtDef Bool)}
  (with1 (processing-ct-def: (let phase) (let gen) (let def)) d
    (and (eq? phase phase:normalized)
         (is? (some _) gen)
         (not (is? (ct-def:data _) def)))))

(function (processing-ct-def/with-generation gen d) {(-> Generation ProcessingCtDef ProcessingCtDef)}
  (assert-is? phase:normalized (processing-ct-def/phase d)
    "processing-ct-def/with-generation: generation must be none")
  (assert-is? none (processing-ct-def/generation d)
    "processing-ct-def/with-generation: phase must be normalized")
  (processing-ct-def: phase:normalized (some gen) (processing-ct-def/def d)))

(derive (Eq Ord DebugDisplay Hash) value-data Phase
  phase:generalized
  phase:instantiated
  phase:normalizing
  phase:normalized)

(derive (Eq Ord DebugDisplay Hash) value-data Generation
  (generation: U64))

(function (generation/next gen) {(-> Generation Generation)}
  (with1 (generation: (let n)) gen
    (generation: (+ n 1))))

(value-data (GenerationCollector B)
  (generation-collector: (OrdSet CtId) (Emitter B))) ; generation-defs emitter

(function (collect-generation-defs emitter t)
  (let1 set ord-set/empty
    (result/unwrap* never (transform (generation-collector: set emitter) t))
    set))

(instance Transformer.GenerationCollector (forall B Error) (Transformer (GenerationCollector B) Error)
  (function (transformer/after-ct ct collector)
    (with1 (generation-collector: (let generation-defs) (let emitter)) collector
      (when-match ([(ct:id (let id)) ct]
                   [(some (processing-ct-def: _ none (let def))) (ord-map/get? id (ct-defs emitter))]
                   [#t (ord-set/insert! id generation-defs)])
        (transform collector def)!))
    (ok (rewrite/unchanged ct))))

(value-data (CanonicalizeTarget D)
  (canonicalize-target: (Ref D) (OrdMap CtId ProcessingCtDef) (OrdSet CtId)))

(instance Transform.CanonicalizeTarget (forall D) (Transform (CanonicalizeTarget D)) (where (Transform D))
  (function (transform t x)
    (with1 (canonicalize-target: (let dest) (let ct-defs) (let generation-defs)) x
      (when-match1 (rewrite: (let x) #t) (transform t ~dest)!
        (set! dest x))
      (for (let id) generation-defs
        (with1 (processing-ct-def: (let phase) (let gen) (let def)) (option/force (ord-map/get? id ct-defs))
          (when-match1 (rewrite: (let x) #t) (transform t def)!
            (ord-map/insert! id (processing-ct-def: phase gen x) ct-defs)))))
    ; CanonicalizeTarget is always modified destructively.
    (ok (rewrite/unchanged x))))
