(import "~/util" _)
(import "~/sexp" S _.S SRep _.SRep s-rep:_)
(import "~/ast/node-id" NodeId _.NodeId node-id/_ ModuleId _.ModuleId module-id/_)

; ---------------------------
; Core

(export Annotation _.Annotation annotation: annotation/_)
(export Generic generic/_)

(derive (Eq Ord DebugDisplay Hash) value-data (Annotation A)
  (annotation: (NodeId (Annotation A)) A))

(getter annotation: annotation/id annotation/body)

(class (Generic A)
  (function (generic/types a) {(-> A (Array TypeParameter))})
  (function (generic/constraints a) {(-> A (Array Constraint))})
  (function (generic/monomorphic? a) {(-> A Bool)}
    (and (array/empty? (generic/types a))
         (array/empty? (generic/constraints a)))))

; ---------------------------
; Kinds

(export Kind _.Kind kind:_ kind/_)
(export KindUse _.KindUse)

; In llrl, `Kind` represents the type of the language construct.
;
; Note that it is not only a representation of the type of the "type-level" expression.
; Kind is partially provided to the user as a first-class representation, for example it can be
; written as a kind annotation for type parameters.
; In fact, since the structure of the llrl AST itself restricts the possible forms of its
; components according to the type system in the host language (i.e. llrl), not all of the Kind
; information is essential in semantic analysis, but rather it is more of a supplementary information.
(derive (Eq Ord DebugDisplay Hash) data Kind
  (kind:unresolved (NodeId KindUse))
  kind:type
  kind:constraint
  kind:satisfaction
  kind:value
  kind:macro
  (kind:fun (Array Kind) Kind)
  (kind:error String))

(instance Dfs.Kind (Dfs Kind)
  (function (dfs f a)
    (match a
      [(kind:unresolved _)]
      [kind:type]
      [kind:constraint]
      [kind:satisfaction]
      [kind:value]
      [kind:macro]
      [(kind:fun (let args) (let ret))
        (for (let arg) args (dfs f arg)!)
        (dfs f ret)!]
      [(kind:error _)])
    (f a)))

(function (kind/contains-error? k) {(-> Kind Bool)}
  (|> k
      (dfs (case
        [(kind:error _) (err unit)]
        [_ (ok unit)]))
      (is? (err _))))

(function (kind/first-class? k) {(-> Kind Bool)}
  (|> k
      (dfs (case
        [(kind:unresolved _) (assert #f "kind/first-class?: Unresolved kind")]
        [kind:type (ok unit)]
        [(kind:fun _ _) (ok unit)]
        [_ (err unit)]))
      (is? (ok _))))

(function (kind/fun args ret) {(-> (Array Kind) Kind Kind)}
  (if (array/empty? args)
    ret
    (kind:fun args ret)))

; The bottom type for kind uses.
(derive (Eq Ord DebugDisplay Hash) data KindUse)

; ---------------------------
; Types

(export Type _.Type type:_ type/_)
(export TypeUse _.TypeUse)
(export TypeCon _.TypeCon type-con:_ type-con/_)
(export Constraint _.Constraint constraint: constraint/_)
(export ConstraintRep _.ConstraintRep constraint-rep:_ constraint-rep/_)
(export ConstraintUse _.ConstraintUse)
(export TypeParameter _.TypeParameter type-parameter: type-parameter/_)
(export Scheme _.Scheme scheme: scheme/_)
(export Satisfaction _.Satisfaction satisfaction:_ satisfaction/_)
(export Instantiation _.Instantiation instantiation: instantiation/_)

; In llrl, `Type` represents a type-level expression or the type of values itself.
;
; Only a `Type` whose kind is `kind:type` can have a type-of relationship with values.
(derive (Eq Ord DebugDisplay Hash) data Type
  (type:unresolved (NodeId TypeUse))
  (type:con TypeCon)
  (type:app Type (Array Type))
  (type:gen (NodeId TypeParameter))
  (type:error String))

(instance Dfs.Type (Dfs Type)
  (function (dfs f a)
    (match a
      [(type:unresolved _)]
      [(type:con _)]
      [(type:app (let callee) (let args))
        (dfs f callee)!
        (for (let arg) args (dfs f arg)!)]
      [(type:gen _)]
      [(type:error _)])
    (f a)))

(function (type/contains-error? t) {(-> Type Bool)}
  (|> t
      (dfs (case
        [(type:error _) (err unit)]
        [_ (ok unit)]))
      (is? (err _))))

(function (type/tuple? t) {(-> Type (Option (Array Type)))}
  (cond?
    [when-match
      ([(type:app (type:con (let con)) (let args)) t]
       [(some (let size)) (type-con/tuple? con)]
       [#t (and (ne? size 0) (eq? size (array/length args)))])
      args]
    [when-match
      ([(type:con (let con)) t]
       [(some 0) (type-con/tuple? con)])
      array/empty]))

(function (type/fun? t) {(-> Type (Option (: (Array Type) Type)))}
  (with? ([(type:app (type:con (let con)) (let args)) t]
          [(some (let arity)) (type-con/fun? con)]
          [(some (: (let ret) (let args))) (array/split-last? args)]
          [#t (eq? arity (array/length args))])
    (: args ret)))

(function (type/app callee args) {(-> Type (Array Type) Type)}
  (if (array/empty? args)
    callee
    (type:app callee args)))

; The bottom type for type uses.
(derive (Eq Ord DebugDisplay Hash) data TypeUse)

(derive (Eq Ord DebugDisplay Hash) value-data TypeCon
  (type-con:data (NodeId DataTypeCon))
  (type-con:builtin (NodeId BuiltinTypeCon)))

(function (type-con/fun arity) {(-> U64 TypeCon)}
  (type-con:builtin (builtin/fun arity)))

(function (type-con/fun? con) {(-> TypeCon (Option U64))}
  (if-match1 (type-con:builtin (let id)) con
    (builtin/fun? id)
    none))

(function (type-con/tuple size) {(-> U64 TypeCon)}
  (type-con:data (builtin/tuple-type size)))

(function (type-con/tuple? con) {(-> TypeCon (Option U64))}
  (if-match1 (type-con:data (let id)) con
    (builtin/tuple-type? id)
    none))

(function type-con/unit (type-con:data (builtin/tuple-type 0)))
(function type-con/bool (type-con:data builtin/bool))
(function type-con/i8 (type-con:builtin builtin/i8))
(function type-con/i16 (type-con:builtin builtin/i16))
(function type-con/i32 (type-con:builtin builtin/i32))
(function type-con/i64 (type-con:builtin builtin/i64))
(function type-con/u8 (type-con:builtin builtin/u8))
(function type-con/u16 (type-con:builtin builtin/u16))
(function type-con/u32 (type-con:builtin builtin/u32))
(function type-con/u64 (type-con:builtin builtin/u64))
(function type-con/f32 (type-con:builtin builtin/f32))
(function type-con/f64 (type-con:builtin builtin/f64))
(function type-con/string (type-con:builtin builtin/string))
(function type-con/char (type-con:builtin builtin/char))
(function type-con/captured-use (type-con:builtin builtin/captured-use))
(function type-con/option (type-con:data builtin/option))
(function type-con/result (type-con:data builtin/result))
(function type-con/syntax (type-con:builtin builtin/syntax-type))
(function type-con/sexp (type-con:data builtin/sexp))

(derive (Eq Ord DebugDisplay) value-data Constraint
  (constraint: (NodeId Constraint) ConstraintRep))

(getter constraint: constraint/id constraint/rep)

(function (constraint/class id cls cls-args) {(-> (NodeId Constraint) (NodeId ClassCon) (Array Type) Constraint)}
  (constraint: id (constraint-rep:class cls cls-args)))

(function (constraint/number ty) {(-> Type Constraint)}
  (constraint/class builtin/number-constraint builtin/number (array ty)))

(function (constraint/fp-number ty) {(-> Type Constraint)}
  (constraint/class builtin/fp-number-constraint builtin/fp-number (array ty)))

(derive (Eq Ord DebugDisplay) value-data ConstraintRep
  (constraint-rep:unresolved (NodeId ConstraintUse) (Array Type))
  (constraint-rep:class (NodeId ClassCon) (Array Type)))

; The bottom type for constraint uses.
(derive (Eq Ord DebugDisplay Hash) data ConstraintUse)

(derive (DebugDisplay) value-data TypeParameter
  (type-parameter: (NodeId TypeParameter) (Option (Annotation Kind))))

(getter type-parameter: type-parameter/id type-parameter/ann)

(derive (DebugDisplay) value-data Scheme
  (scheme: (Array TypeParameter) (Array Constraint) Type))

(instance Generic.Scheme (Generic Scheme)
  (function (generic/types a) (scheme/ty-params a))
  (function (generic/constraints a) (scheme/s-params a)))

(getter scheme: scheme/ty-params scheme/s-params scheme/body)

(function (scheme/monomorphic-type? scheme) {(-> Scheme (Option Type))}
  (when? (generic/monomorphic? scheme) (scheme/body scheme)))

(derive (DebugDisplay) value-data Satisfaction
  (satisfaction:by-premise (NodeId Constraint) (Array (NodeId Constraint))) ; id path
  (satisfaction:by-instance (NodeId InstanceCon) Instantiation) ; id inst
  (satisfaction:error String))

(instance Dfs.Satisfaction (Dfs Satisfaction)
  (function (dfs f a)
    (match a
      [(satisfaction:by-premise _ _)]
      [(satisfaction:by-instance _ (let inst))
        (for (let sa) (instantiation/s-args inst)
          (dfs f sa)!)]
      [(satisfaction:error _)])
    (f a)))

(function (satisfaction/contains-error? sa) {(-> Satisfaction Bool)}
  (|> sa
      (dfs (case
        [(satisfaction:error _) (err unit)]
        [_ (ok unit)]))
      (is? (err _))))

(derive (DebugDisplay) value-data Instantiation
  (instantiation: (Array Type) (Array Satisfaction)))

(getter instantiation: instantiation/ty-args instantiation/s-args)

; ---------------------------
; Expressions

(export Expr _.Expr expr: expr/_)
(export ExprRep _.ExprRep expr-rep:_ expr-rep/_)
(export ExprUse _.ExprUse)
(export Value _.Value value:_ value/_)
(export ValueCon _.ValueCon value-con:_ value-con/_)
(export LocalVar _.LocalVar local-var: local-var/_)
(export LocalFun _.LocalFun local-fun: local-fun/_)
(export InitExpr _.InitExpr init-expr:_)

; In llrl, `Expr` represents a value-level expression.
(derive (DebugDisplay) value-data Expr
  (expr: (NodeId Expr) ExprRep)) ; id rep

(instance Dfs.Expr (Dfs Expr)
  (function (dfs f a)
    (match (expr/rep a)
      [(expr-rep:unresolved _)]
      [(expr-rep:value _)]
      [(expr-rep:con _)]
      [(expr-rep:const _)]
      [(expr-rep:app (let callee) (let args))
        (dfs f callee)!
        (for (let arg) args (dfs f arg)!)]
      [(expr-rep:unresolved-capture _)]
      [(expr-rep:capture _)]
      [(expr-rep:annotate (let e) _)
        (dfs f e)!]
      [(expr-rep:let (let defs) (let body))
        (for (let def) defs
          (match def
            [(left (let local-var))
              (dfs f (local-var/init local-var))!]
            [(right (let local-fun))
              (dfs f (local-fun/body local-fun))!]))
        (dfs f body)!]
      [(expr-rep:seq (let stmts) (let body))
        (for (let stmt) stmts (dfs f stmt)!)
        (dfs f body)!]
      [(expr-rep:if (let cond) (let then) (let else))
        (dfs f cond)!
        (dfs f then)!
        (dfs f else)!]
      [(expr-rep:while (let cond) (let body))
        (dfs f cond)!
        (dfs f body)!]
      [(expr-rep:match (let target) (let clauses))
        (dfs f target)!
        (for (: _ (let body)) clauses (dfs f body)!)]
      [(expr-rep:return (let ret))
        (for (let e) ret (dfs f e)!)])
    (f a)))

(getter expr: expr/id expr/rep)

(function (expr/dfs-same-level f a)
  {(forall Error) (-> (-> Expr (Result unit Error)) Expr (Result unit Error))}
  (dfs [^1 (f (expr-focus-same-level/unfocus %1))] (expr-focus-same-level: a)))

(function (expr/let-binding-context defs)
  {(-> (Array (Either LocalVar LocalFun)) (Iterator LocalFun))}
  (it/filter-map either/right? defs))

(derive (DebugDisplay) value-data ExprFocusSameLevel
  (expr-focus-same-level: Expr))

(instance Dfs.ExprFocusSameLevel (Dfs ExprFocusSameLevel)
  (function (dfs f a)
    (match (expr/rep (expr-focus-same-level/unfocus a))
      [(expr-rep:unresolved _)]
      [(expr-rep:value _)]
      [(expr-rep:con _)]
      [(expr-rep:const _)]
      [(expr-rep:app (let callee) (let args))
        (dfs f (expr-focus-same-level: callee))!
        (for (let arg) args (dfs f (expr-focus-same-level: arg))!)]
      [(expr-rep:unresolved-capture _)]
      [(expr-rep:capture _)]
      [(expr-rep:annotate (let e) _)
        (dfs f (expr-focus-same-level: e))!]
      [(expr-rep:let (let defs) (let body))
        (for (let def) defs
          (when-match1 (left (let local-var)) def
            (dfs f (expr-focus-same-level: (local-var/init local-var)))!))
        (dfs f (expr-focus-same-level: body))!]
      [(expr-rep:seq (let stmts) (let body))
        (for (let stmt) stmts (dfs f (expr-focus-same-level: stmt))!)
        (dfs f (expr-focus-same-level: body))!]
      [(expr-rep:if (let cond) (let then) (let else))
        (dfs f (expr-focus-same-level: cond))!
        (dfs f (expr-focus-same-level: then))!
        (dfs f (expr-focus-same-level: else))!]
      [(expr-rep:while (let cond) (let body))
        (dfs f (expr-focus-same-level: cond))!
        (dfs f (expr-focus-same-level: body))!]
      [(expr-rep:match (let target) (let clauses))
        (dfs f (expr-focus-same-level: target))!
        (for (: _ (let body)) clauses (dfs f (expr-focus-same-level: body))!)]
      [(expr-rep:return (let ret))
        (for (let e) ret (dfs f (expr-focus-same-level: e))!)])
    (f a)))

(getter expr-focus-same-level: expr-focus-same-level/unfocus)

(derive (DebugDisplay) data ExprRep
  (expr-rep:unresolved (NodeId ExprUse))
  (expr-rep:value Value)
  (expr-rep:con ValueCon)
  (expr-rep:const Const)
  (expr-rep:app Expr (Array Expr))
  (expr-rep:unresolved-capture (NodeId Construct))
  (expr-rep:capture Construct)
  (expr-rep:annotate Expr (Annotation Type))
  (expr-rep:let (Array (Either LocalVar LocalFun)) Expr)
  (expr-rep:seq (Array Expr) Expr)
  (expr-rep:if Expr Expr Expr)
  (expr-rep:while Expr Expr)
  (expr-rep:match Expr (Array (: Pattern Expr)))
  (expr-rep:return (Option Expr)))

(function expr-rep/unit {ExprRep}
  (expr-rep:con value-con/unit))

(function (expr-rep/tuple size) {(-> U64 ExprRep)}
  (expr-rep:con (value-con/tuple size)))

(function (expr-rep/bool value) {(-> Bool ExprRep)}
  (expr-rep:con (value-con/bool value)))

; The bottom type for expr uses.
(derive (Eq Ord DebugDisplay Hash) data ExprUse)

(derive (Eq Ord DebugDisplay Hash) value-data Value
  (value:function (NodeId Function))
  (value:c-function (NodeId CFunction))
  (value:builtin-op (NodeId BuiltinOp))
  (value:class-method (NodeId ClassMethod))
  (value:parameter (NodeId Parameter))
  (value:local-var (NodeId LocalVar))
  (value:local-fun (NodeId LocalFun))
  (value:pattern-var (NodeId PatternVar)))

(function (value/static? v) {(-> Value Bool)}
  (is? (some _)
    (match? v
      [(value:function _)]
      [(value:c-function _)]
      [(value:builtin-op _)]
      [(value:class-method _)])))

(derive (Eq Ord DebugDisplay Hash) value-data ValueCon
  (value-con:data (NodeId DataValueCon))
  (value-con:builtin (NodeId BuiltinValueCon)))

(function (value-con/tuple size) {(-> U64 ValueCon)}
  (value-con:data (builtin/tuple size)))

(function (value-con/tuple? con) {(-> ValueCon (Option U64))}
  (if-match1 (value-con:data (let id)) con
    (builtin/tuple? id)
    none))

(function (value-con/bool value) {(-> Bool ValueCon)}
  (value-con:data (if value builtin/true builtin/false)))

(function (value-con/bool? con) {(-> ValueCon (Option Bool))}
  (cond?
    [(eq? con (value-con/bool #t)) #t]
    [(eq? con (value-con/bool #f)) #f]))

(function value-con/unit (value-con:data (builtin/tuple 0)))
(function value-con/none (value-con:data builtin/none))
(function value-con/some (value-con:data builtin/some))
(function value-con/err (value-con:data builtin/err))
(function value-con/ok (value-con:data builtin/ok))
(function value-con/syntax (value-con:builtin builtin/syntax-value))

(derive (DebugDisplay) value-data LocalVar
  (local-var:
    (NodeId LocalVar)          ; id
    (Option (Annotation Type)) ; ann
    Expr))                     ; init

(getter local-var: local-var/id local-var/ann local-var/init)

(derive (DebugDisplay) value-data LocalFun
  (local-fun:
    (NodeId LocalFun)            ; id
    (Array Parameter)            ; params
    (Option (Annotation Scheme)) ; ann
    Expr))                       ; body

(getter local-fun: local-fun/id local-fun/params local-fun/ann local-fun/body)

(derive (DebugDisplay) value-data InitExpr
  (init-expr:eval Expr)
  (init-expr:ensure-initialized ModuleId))

; ---------------------------
; Patterns

(export Pattern _.Pattern pattern: pattern/_)
(export PatternRep _.PatternRep pattern-rep:_ pattern-rep/_)
(export PatternUse _.PatternUse)
(export PatternVar _.PatternVar pattern-var: pattern-var/_)

(derive (DebugDisplay) value-data Pattern
  (pattern: (NodeId Pattern) PatternRep)) ; id rep

(instance Dfs.Pattern (Dfs Pattern)
  (function (dfs f a)
    (match (pattern/rep a)
      [(pattern-rep:unresolved _ (let fields))
        (for (let p) (it/flat-map id fields)
          (dfs f p)!)]
      [(pattern-rep:var (let var))
        (for (let p) (pattern-var/as-pat var)
          (dfs f p)!)]
      [pattern-rep:wildcard]
      [(pattern-rep:decon _ (let fields))
        (for (let p) (it/flat-map id fields)
          (dfs f p)!)]
      [(pattern-rep:const _)])
    (f a)))

(getter pattern: pattern/id pattern/rep)

(derive (DebugDisplay) data PatternRep
  (pattern-rep:unresolved (NodeId PatternUse) (Option (Array Pattern))) ; use fields
  (pattern-rep:var PatternVar)
  pattern-rep:wildcard
  (pattern-rep:decon ValueCon (Option (Array Pattern))) ; con fields
  (pattern-rep:const Const))

(function pattern-rep/unit {PatternRep}
  (pattern-rep:decon value-con/unit none))

(function (pattern-rep/tuple fields) {(-> (Array Pattern) PatternRep)}
  (pattern-rep:decon
    (value-con/tuple (array/length fields))
    (if (array/empty? fields) none (some fields))))

(function (pattern-rep/tuple? rep) {(-> PatternRep (Option (Array Pattern)))}
  (with? ([(pattern-rep:decon (let con) (let fields)) rep]
          [(some (let size)) (value-con/tuple? con)]
          [#t (eq? (eq? size 0) (is? none fields))]
          [#t (eq? size (|> fields (option/map array/length) (option/unwrap 0)))])
    (option/unwrap array/empty fields)))

(function (pattern-rep/bool value) {(-> Bool PatternRep)}
  (pattern-rep:decon (value-con/bool value) none))

; The bottom type for pattern uses.
(derive (Eq Ord DebugDisplay Hash) data PatternUse)

(derive (DebugDisplay) value-data PatternVar
  (pattern-var: (NodeId PatternVar) (Option Pattern))) ; id as-pat

(getter pattern-var: pattern-var/id pattern-var/as-pat)

; ---------------------------
; Declarations

(export Function _.Function function: function/_)
(export CFunction _.CFunction c-function: c-function/_)
(export BuiltinOp _.BuiltinOp builtin-op: builtin-op/_)
(export Macro _.Macro macro: macro/_)
(export DataTypeCon _.DataTypeCon data-type-con: data-type-con/_)
(export DataRepr _.DataRepr data-repr:_)
(export DataValueCon _.DataValueCon data-value-con: data-value-con/_)
(export DataType data-type: data-type/_)
(export BuiltinTypeCon _.BuiltinTypeCon builtin-type-con: builtin-type-con/_)
(export BuiltinValueCon _.BuiltinValueCon builtin-value-con: builtin-value-con/_)
(export BuiltinType builtin-type: builtin-type/_)
(export ValueConField _.ValueconField value-con-field: value-con-field/_)
(export ClassCon _.ClassCon class-con: class-con/_)
(export ClassMethod _.ClassMethod class-method: class-method/_)
(export Class class: class/_)
(export InstanceCon _.InstanceCon instance-con: instance-con/_)
(export InstanceMethod _.InstanceMethod instance-method: instance-method/_)
(export Instance instance: instance/_)
(export Parameter _.Parameter parameter: parameter/_)

(derive (DebugDisplay) value-data Function
  (function:
    (NodeId Function)            ; id
    Bool                         ; transparent?
    (Option (Array Parameter))   ; params
    (Option (Annotation Scheme)) ; ann
    Expr))                       ; body

(getter function:
  function/id
  function/transparent?
  function/params
  function/ann
  function/body)

(derive (DebugDisplay) value-data CFunction
  (c-function:
    (NodeId CFunction) ; id
    (Annotation Type)  ; ann
    String))           ; c-name

(getter c-function:
  c-function/id
  c-function/ann
  c-function/c-name)

(derive (DebugDisplay) value-data BuiltinOp
  (builtin-op:
    (NodeId BuiltinOp)  ; id
    (Annotation Scheme) ; ann
    String))            ; builtin-name

(getter builtin-op:
  builtin-op/id
  builtin-op/ann
  builtin-op/builtin-name)

(derive (DebugDisplay) value-data Macro
  (macro:
    (NodeId Macro) ; id
    Parameter      ; param
    Expr))         ; body

(getter macro:
  macro/id
  macro/param
  macro/body)

(function macro/src-ty {Type}
  ; (Syntax Sexp)
  (type:app (type:con type-con/syntax) (array (type:con type-con/sexp))))

(function macro/dest-ty {Type}
  ; (Result (Syntax Sexp) String)
  (type:app
    (type:con type-con/result)
    (array (type:app (type:con type-con/syntax) (array (type:con type-con/sexp)))
           (type:con type-con/string))))

(derive (DebugDisplay) value-data DataTypeCon
  (data-type-con:
    (NodeId DataTypeCon)            ; id
    DataRepr                        ; repr
    (Array TypeParameter)           ; ty-params
    (Array (NodeId DataValueCon)))) ; value-cons

(instance Generic.DataTypeCon (Generic DataTypeCon)
  (function (generic/types con) (data-type-con/ty-params con))
  (function (generic/constraints con) array/empty))

(getter data-type-con:
  data-type-con/id
  data-type-con/repr
  data-type-con/ty-params
  data-type-con/value-cons)

(function (data-type-con/index-of? dvcon-id dtycon) {( -> (NodeId DataValueCon) DataTypeCon (Option U64))}
  (|> dtycon
      data-type-con/value-cons
      (it/find-index? [^1 (eq? %1 dvcon-id)])))

(derive (Eq Ord DebugDisplay Hash) value-data DataRepr
  data-repr:default
  data-repr:value
  data-repr:c)

(derive (DebugDisplay) value-data DataValueCon
  (data-value-con:
    (NodeId DataValueCon)          ; id
    (Option (Array ValueConField)) ; fields
    (NodeId DataTypeCon)))         ; type-con

(getter data-value-con:
  data-value-con/id
  data-value-con/fields
  data-value-con/type-con)

(function (data-value-con/scheme dtycon dvcon) {(-> DataTypeCon DataValueCon Scheme)}
  (assert-eq? (data-type-con/id dtycon) (data-value-con/type-con dvcon))
  (let* ([ty-params (data-type-con/ty-params dtycon)]
         [ret
           (type/app
             (type:con (type-con:data (data-type-con/id dtycon)))
             (collect (it/map [^1 (type:gen (type-parameter/id %1))] ty-params)))]
         [body
           (if-match1 (some (let fields)) (data-value-con/fields dvcon)
             (type/app
               (type:con (type-con/fun (array/length fields)))
               (collect (it/chain (it/map value-con-field/ty fields) (some ret))))
             ret)])
    (scheme: ty-params array/empty body)))

(value-data DataType
  (data-type: DataTypeCon (-> (Iterator DataValueCon))))

(function (data-type/con dt) {(-> DataType DataTypeCon)}
  (with1 (data-type: (let con) _) dt
    con))

(function (data-type/value-cons dt) {(-> DataType (Iterator DataValueCon))}
  (with1 (data-type: _ (let value-cons)) dt
    (value-cons)))

(function (data-type/fields-on-every-value-cons dt) {(-> DataType (Iterator ValueConField))}
  (with1 (data-type: _ (let value-cons)) dt
    (|> (value-cons)
        (it/flat-map data-value-con/fields)
        (it/flat-map id))))

(derive (DebugDisplay) value-data BuiltinTypeCon
  (builtin-type-con:
    (NodeId BuiltinTypeCon)            ; id
    (Array TypeParameter)              ; ty-params
    String                             ; builtin-name
    (Array (NodeId BuiltinValueCon)))) ; value-cons

(instance Generic.BuiltinTypeCon (Generic BuiltinTypeCon)
  (function (generic/types con) (builtin-type-con/ty-params con))
  (function (generic/constraints con) array/empty))

(getter builtin-type-con:
  builtin-type-con/id
  builtin-type-con/ty-params
  builtin-type-con/builtin-name
  builtin-type-con/value-cons)

(function (builtin-type-con/index-of bvcon-id btycon) {( -> (NodeId BuiltinValueCon) BuiltinTypeCon (Option U64))}
  (|> btycon
      builtin-type-con/value-cons
      (it/find-index? [^1 (eq? %1 bvcon-id)])))

(derive (DebugDisplay) value-data BuiltinValueCon
  (builtin-value-con:
    (NodeId BuiltinValueCon)       ; id
    String                         ; builtin-name
    (Option (Array ValueConField)) ; fields
    (NodeId BuiltinTypeCon)))      ; type-con

(getter builtin-value-con:
  builtin-value-con/id
  builtin-value-con/builtin-name
  builtin-value-con/fields
  builtin-value-con/type-con)

(function (builtin-value-con/scheme btycon bvcon) {(-> BuiltinTypeCon BuiltinValueCon Scheme)}
  (assert-eq? (builtin-type-con/id btycon) (builtin-value-con/type-con bvcon))
  (let* ([ty-params (builtin-type-con/ty-params btycon)]
         [ret
           (type/app
             (type:con (type-con:builtin (builtin-type-con/id btycon)))
             (collect (it/map [^1 (type:gen (type-parameter/id %1))] ty-params)))]
         [body
           (if-match1 (some (let fields)) (builtin-value-con/fields bvcon)
             (type/app
               (type:con (type-con/fun (array/length fields)))
               (collect (it/chain (it/map value-con-field/ty fields) (some ret))))
             ret)])
    (scheme: ty-params array/empty body)))

(value-data BuiltinType
  (builtin-type: BuiltinTypeCon (-> (Iterator BuiltinValueCon))))

(function (builtin-type/con dt) {(-> BuiltinType BuiltinTypeCon)}
  (with1 (builtin-type: (let con) _) dt
    con))

(function (builtin-type/value-cons dt) {(-> BuiltinType (Iterator BuiltinValueCon))}
  (with1 (builtin-type: _ (let value-cons)) dt
    (value-cons)))

(function (builtin-type/fields-on-every-value-cons dt) {(-> BuiltinType (Iterator ValueConField))}
  (with1 (builtin-type: _ (let value-cons)) dt
    (|> (value-cons)
        (it/flat-map builtin-value-con/fields)
        (it/flat-map id))))

(derive (DebugDisplay) value-data ValueConField
  (value-con-field: (NodeId ValueConField) Type))

(getter value-con-field: value-con-field/id value-con-field/ty)

(derive (DebugDisplay) value-data ClassCon
  (class-con:
    (NodeId ClassCon)              ; id
    Bool                           ; sealed?
    (NodeId Constraint)            ; constraint-id
    (Array TypeParameter)          ; ty-params
    (Array Constraint)             ; superclasses
    (Array (NodeId ClassMethod)))) ; methods

(instance Generic.ClassCon (Generic ClassCon)
  (function (generic/types con) (class-con/ty-params con))
  (function (generic/constraints con) array/empty))

(getter class-con:
  class-con/id
  class-con/sealed?
  class-con/constraint-id
  class-con/ty-params
  class-con/superclasses
  class-con/methods)

(function (class-con/constraint con) {(-> ClassCon Constraint)}
  (constraint/class
    (class-con/constraint-id con)
    (class-con/id con)
    (collect (it/map [^1 (type:gen (type-parameter/id %1))] (class-con/ty-params con)))))

(derive (DebugDisplay) value-data ClassMethod
  (class-method:
    (NodeId ClassMethod)       ; id
    Bool                       ; transparent?
    (Annotation Scheme)        ; ann
    (Option (Array Parameter)) ; params
    (Option Expr)              ; default-body
    (NodeId ClassCon)))        ; class-con

(getter class-method:
  class-method/id
  class-method/transparent?
  class-method/ann
  class-method/params
  class-method/default-body
  class-method/class-con)

(function (class-method/arity method) {(-> ClassMethod (Option U64))}
  (option/map array/length (class-method/params method)))

(function (class-method/external-scheme class-con method) {(-> ClassCon ClassMethod Scheme)}
  (assert-eq? (class-method/class-con method) (class-con/id class-con))
  (scheme:
    ; [method_tp_1, method_tp2, .., class_tp_1, class_tp_2, ..]
    (collect (it/chain
      (|> method class-method/ann annotation/body scheme/ty-params)
      (|> class-con class-con/ty-params)))
    ; [method_constraint_1, method_constraint_2, .., class_constraint]
    (collect (it/chain
      (|> method class-method/ann annotation/body scheme/s-params)
      (|> class-con class-con/constraint some)))
    (|> method class-method/ann annotation/body scheme/body)))

(function (class-method/expand-external-instantiation inst method) {(-> Instantiation ClassMethod (: Instantiation Instantiation))}
  (let ([ty-count (|> method class-method/ann annotation/body scheme/ty-params array/length)]
        [sa-count (|> method class-method/ann annotation/body scheme/s-params array/length)])
    (with1 (instantiation: (let tys) (let sas)) inst
      (: (instantiation: (array/skip ty-count tys) (array/skip sa-count sas))
         (instantiation: (array/take ty-count tys) (array/take sa-count sas))))))

(value-data Class
  (class: ClassCon (-> (Iterator ClassMethod))))

(function (class/con c) {(-> Class ClassCon)}
  (with1 (class: (let con) _) c
    con))

(function (class/methods c) {(-> Class (Iterator ClassMethod))}
  (with1 (class: _ (let methods)) c
    (methods)))

(function (class/constraints-on-interface c) {(-> Class (Iterator Constraint))}
  (with1 (class: (let con) (let methods)) c
    (it/chain (class-con/superclasses con)
              (it/flat-map [^1 (|> %1 class-method/ann annotation/body scheme/s-params)] (methods)))))

(derive (DebugDisplay) value-data InstanceCon
  (instance-con:
    (NodeId InstanceCon)              ; id
    (Array TypeParameter)             ; ty-params
    (Array Constraint)                ; s-params
    Constraint                        ; target
    (Array (NodeId InstanceMethod)))) ; methods

(instance Generic.InstanceCon (Generic InstanceCon)
  (function (generic/types con) (instance-con/ty-params con))
  (function (generic/constraints con) (instance-con/s-params con)))

(getter instance-con:
  instance-con/id
  instance-con/ty-params
  instance-con/s-params
  instance-con/target
  instance-con/methods)

(derive (DebugDisplay) value-data InstanceMethod
  (instance-method:
    (NodeId InstanceMethod)       ; id
    Bool                          ; transparent?
    (Option (Annotation Scheme))  ; ann
    (Option (Array Parameter))    ; params
    Expr                          ; body
    (Option (NodeId ClassMethod)) ; class-method?
    (NodeId InstanceCon)))        ; instance-con

(getter instance-method:
  instance-method/id
  instance-method/transparent?
  instance-method/ann
  instance-method/params
  instance-method/body
  instance-method/class-method?
  instance-method/instance-con)

(function (instance-method/arity method) {(-> InstanceMethod (Option U64))}
  (option/map array/length (instance-method/params method)))

(function (instance-method/class-method method) {(-> InstanceMethod (NodeId ClassMethod))}
  (if-match1 (some (let id)) (instance-method/class-method? method)
    id
    (assert #f "instance-method/class-method: unresolved class method")))

(value-data Instance
  (instance: InstanceCon (-> (Iterator InstanceMethod))))

(function (instance/con i) {(-> Instance InstanceCon)}
  (with1 (instance: (let con) _) i
    con))

(function (instance/methods i) {(-> Instance (Iterator InstanceMethod))}
  (with1 (instance: _ (let methods)) i
    (methods)))

(function (instance/find-method? id i) {(-> (NodeId ClassMethod) Instance (Option InstanceMethod))}
  (it/find? [^1 (eq? id (instance-method/class-method %1))] (instance/methods i)))

(derive (DebugDisplay) value-data Parameter
  (parameter: (NodeId Parameter)))

(getter parameter: parameter/id)

; ---------------------------
; Constants

(export Const _.Const const:_)

(derive (Eq Ord DebugDisplay Hash) value-data Const
  (const:integer Bool U64)
  (const:fp-number F64)
  (const:string String)
  (const:char Char)
  (const:sexp (S Construct)))

(instance Display.Const (Display Const)
  (function (display! w a)
    (match a
      [(const:integer (let signed?) (let v)) (display! w (s-rep:integer signed? v))]
      [(const:fp-number (let v)) (display! w (s-rep:fp-number v))]
      [(const:string (let s)) (display! w (s-rep:string s))]
      [(const:char (let c)) (display! w (s-rep:char c))]
      [(const:sexp (let s)) (display-all! w "'" s)])))

; ---------------------------
; Construct

(export Construct _.Construct construct/_ _.To.Construct Conv.From.Construct._)

; A type-erased NodeId.
(derive (Eq Ord DebugDisplay Hash) value-data Construct
  (construct: U64 (NodeId Never))) ; kind-id type-erased-node-id

(instance Display.Construct (Display Construct)
  (function (display! w a)
    (with1 (construct: _ (let nid)) a
      (display! w nid))))

(function (construct/module c) {(-> Construct ModuleId)}
  (with1 (construct: _ (let nid)) c
    (node-id/module nid)))

($$ begin
  ($for-each
    [$kind-id $kind-name $type]
    ([10 KindAnn (Annotation Kind)]
     [11 KindUse KindUse]

     [20 TypeAnn (Annotation Type)]
     [21 SchemeAnn (Annotation Scheme)]
     [22 TypeUse TypeUse]
     [23 TypeParameter TypeParameter]
     [24 Constraint Constraint]
     [25 ConstraintUse ConstraintUse]

     [30 Expr Expr]
     [31 ExprUse ExprUse]
     [32 LocalVar LocalVar]
     [33 LocalFun LocalFun]
     [34 Capture Construct]

     [40 Pattern Pattern]
     [41 PatternUse PatternUse]
     [42 PatternVar PatternVar]

     [50 Function Function]
     [51 CFunction CFunction]
     [52 BuiltinOp BuiltinOp]
     [53 Macro Macro]
     [54 DataTypeCon DataTypeCon]
     [55 DataValueCon DataValueCon]
     [56 BuiltinTypeCon BuiltinTypeCon]
     [57 BuiltinValueCon BuiltinValueCon]
     [58 ValueConField ValueConField]
     [59 ClassCon ClassCon]
     [60 ClassMethod ClassMethod]
     [61 InstanceCon InstanceCon]
     [62 InstanceMethod InstanceMethod]
     [63 Parameter Parameter])

    (begin
      (instance ($symbol-concat Conv.From. $kind-name .To.Construct) (Conv (NodeId $type) Construct)
        (function (conv a)
          (construct: $kind-id (node-id/reinterpret-unchecked a))))

      (instance ($symbol-concat Conv.From.Construct.To. $kind-name) (Conv Construct (Option (NodeId $type)))
        (function (conv a)
          (with1 (construct: (let type-id) (let node-id)) a
            (when? (eq? type-id $kind-id) (node-id/reinterpret-unchecked node-id)))))))

  ($for-each
    [$type $con-prefix $con-names]
    ([TypeCon type-con: (data builtin)]
     [ValueCon value-con: (data builtin)]
     [Value value: (function c-function builtin-op class-method parameter local-var local-fun pattern-var)])

    (begin
      (instance ($symbol-concat Conv.From. $type .To.Construct) (Conv $type Construct)
        (function (conv a)
          (match a
            ($for-each $con-name $con-names
              [(($symbol-concat $con-prefix $con-name) (let id))
                (conv id)]))))

      (instance ($symbol-concat Conv.From.Construct.To. $type) (Conv Construct (Option $type))
        (function (conv a)
          (cond?
            ($for-each $con-name $con-names
              [when-match1 (some (let id)) (conv a)
                (($symbol-concat $con-prefix $con-name) id)])))))))

(instance Conv.From.Construct.To.Kind (Conv Construct (Option Kind))
  (function (conv a)
    none))

; ---------------------------
; Builtins

(export builtin/_)

(function builtin/limit-variadic-size 16)

; 0..99 is reserved for function types
(function (builtin/fun arity) {(-> U64 (NodeId BuiltinTypeCon))}
  (assert (<= arity builtin/limit-variadic-size) (string "Unsupported fun arity: " arity))
  (node-id/new-unchecked module-id/builtin (conv arity)))

(function (builtin/fun? id) {( -> (NodeId BuiltinTypeCon) (Option U64))}
  (with1 (: (let mid) (let index)) (node-id/components id)
    (if (and (module-id/builtin? mid) (<= index builtin/limit-variadic-size))
      (some (conv index))
      none)))

; 100..199 is reserved for tuple types
(function (builtin/tuple-type size) {(-> U64 (NodeId DataTypeCon))}
  (assert (<= size builtin/limit-variadic-size) (string "Unsupported tuple size: " size))
  (node-id/new-unchecked module-id/builtin (+ 100 (conv size))))

(function (builtin/tuple-type? id) {( -> (NodeId DataTypeCon) (Option U64))}
  (with1 (: (let mid) (let index)) (node-id/components id)
    (if (and (module-id/builtin? mid) (<= 100 index (+ 100 builtin/limit-variadic-size)))
      (some (conv (- index 100)))
      none)))

; 200..299 is reserved for tuple values
(function (builtin/tuple size) {(-> U64 (NodeId DataValueCon))}
  (assert (<= size builtin/limit-variadic-size) (string "Unsupported tuple size: " size))
  (node-id/new-unchecked module-id/builtin (+ 200 (conv size))))

(function (builtin/tuple? id) {( -> (NodeId DataValueCon) (Option U64))}
  (with1 (: (let mid) (let index)) (node-id/components id)
    (if (and (module-id/builtin? mid) (<= 200 index (+ 200 builtin/limit-variadic-size)))
      (some (conv (- index 200)))
      none)))

($$ begin
  ($for-each
    [$index $id $kind]
    ([300 bool DataTypeCon]
     [301 false DataValueCon]
     [302 true DataValueCon]

     [311 i8 BuiltinTypeCon]
     [312 i16 BuiltinTypeCon]
     [313 i32 BuiltinTypeCon]
     [314 i64 BuiltinTypeCon]

     [321 u8 BuiltinTypeCon]
     [322 u16 BuiltinTypeCon]
     [323 u32 BuiltinTypeCon]
     [324 u64 BuiltinTypeCon]

     [331 f32 BuiltinTypeCon]
     [332 f64 BuiltinTypeCon]

     [340 string BuiltinTypeCon]

     [350 char BuiltinTypeCon]

     [360 captured-use BuiltinTypeCon]

     [370 option DataTypeCon]
     [371 none DataValueCon]
     [372 some DataValueCon]

     [380 result DataTypeCon]
     [381 err DataValueCon]
     [382 ok DataValueCon]

     [400 number ClassCon]
     [401 number-constraint Constraint]

     [410 number-i8 InstanceCon]
     [411 number-i16 InstanceCon]
     [412 number-i32 InstanceCon]
     [413 number-i64 InstanceCon]

     [420 number-u8 InstanceCon]
     [421 number-u16 InstanceCon]
     [422 number-u32 InstanceCon]
     [423 number-u64 InstanceCon]

     [430 number-f32 InstanceCon]
     [431 number-f64 InstanceCon]

     [450 fp-number ClassCon]
     [451 fp-number-constraint Constraint]

     [480 fp-number-f32 InstanceCon]
     [481 fp-number-f64 InstanceCon]

     [500 syntax-type BuiltinTypeCon]
     [501 syntax-value BuiltinValueCon]

     [510 sexp DataTypeCon])

    (function ($symbol-concat builtin/ $id) {(NodeId $kind)}
      (node-id/new-unchecked module-id/builtin $index))))
