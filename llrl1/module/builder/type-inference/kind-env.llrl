(import "~/util" _)
(import "~/ast" _)
(import "~/module/unit" _)
(import "~/module/meaning" _)
(import "~/module/set" _)
(import "~/module/builder/external" _)
(import "~/unification/type" KindEnvironment)
(export KindEnv _.KindEnv kind-env/_)

(data (KindEnv E)
  (kind-env: Module E))

(function (kind-env/new module external)
  (kind-env: module external))

(function (kind-env/get? c env)
  {(forall C E) (-> C (KindEnv E) (Option Kind)) (where (Conv C Construct) (External E))}
  (with1 (kind-env: (let module) (let external)) env
    (module-set/kind? c (: module external))))

(function (kind-env/put! c kind env)
  {(forall C E) (-> C Kind (KindEnv E) unit) (where (Conv C Construct) (External E))}
  (with1 (kind-env: (let module) _) env
    (let1 construct (conv c)
      (assert-eq? (construct/module construct) (module/id module))
      (inferred-kinds/set! construct kind (module/inferred-kinds module)))))

(instance KindEnvironment.KindEnv (forall E) (KindEnvironment (KindEnv E)) (where (External E))
  (function (kind-env/resolve-kind c env)
    (match (kind-env/get? c env)
      [(some (let k)) k]
      [none (assert #f (string "Kind of " c " is undefined"))])))
