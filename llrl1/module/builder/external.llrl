(import "~/path" Path _.Path)
(import "~/sexp" S _.S)
(import "~/ast" _)
(import "~/module/unit" _)
(import "~/module/set" _)
(export External external/_ ModuleSet.ModuleWithExternal)

; An abstract representation of the outside of the module.
(class (External E)
  (function (external/module? mid e) {(-> ModuleId E (Option Module))})
  (function (external/module-by-path? path e) {(-> Path E (Option Module))})
  (function (external/execute-macro! id s e) {(-> (NodeId Macro) (S Construct) E (Result (S Construct) String))}))

(instance ModuleSet.ModuleWithExternal (forall E) (ModuleSet (: Module E)) (where (External E))
  (function (module-set/get? mid set)
    (with1 (: (let module) (let external)) set
      (if (eq? mid (module/id module))
        (some module)
        (external/module? mid external)))))
