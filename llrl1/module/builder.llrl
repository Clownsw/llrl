(import "std/hash-set" _)
(import "std/hash-map" _)
(import "std/ord-map" _)
(import "~/util" _)
(import "~/path" Path _.Path path/_)
(import "~/sexp" S _.S)
(import "~/ast" _)
(import "~/report" Report report/_ phase:_)
(import "~/source" Source _.Source source/_)
(import "~/module/error" _)
(import "~/module/unit" _)
(import "~/module/external" External external/_)
(import "~/module/sema" semantic-analysis!)
(export Backend Backend.unit backend/_ module/build!)

; Compiler backend used by `module/build!`.
(class (Backend B)
  ; Add a built module. Built modules are added from this method without omission.
  (function (backend/add-module! module entry-point? b) {(-> Module Bool B unit)})
  ; Execute the macro. The macro to be executed always resides in the module added with `backend/add-module!`.
  (function (backend/execute-macro! id s e) {(-> (NodeId Macro) (S Construct) B (Result (S Construct) String))}))

(instance Backend.unit (Backend unit)
  (function (backend/add-module! module entry-point? b))
  (function (backend/execute-macro! id s e) (err "Unsupported")))

; Build a set of modules from the sources. The sources must be sorted by dependency order.
; Returns a set of modules that were successfully built and a set of source paths and errors in case of build failure.
(function (module/build! sources entry-points backend report)
  {(forall B)
   (-> (Array (Source Construct)) (HashSet Path) B Report (: (OrdMap ModuleId Module) (Option (: Path Error))))
   (where (Backend B))}
  (when (array/empty? sources) (return (: ord-map/empty none)))

  ; (module-id 0) must be builtin
  (assert-eq? (source/path (get sources[0])) path/builtin)
  ; Every other module must depend on builtin
  (assert (it/all? [^1 (ord-map/has? (string path/builtin) (source/dependencies %1))] (it/skip 1 sources)))
    ; Every implicit-std? enabled module must depend on std
  (assert (it/all? [^1 (or (not (source/implicit-std? %1))
                           (ord-map/has? (string path/std) (source/dependencies %1)))] sources))

  (let* ([modules ord-map/empty]
         [path-to-module hash-map/empty]
         [external (module-build-context: modules path-to-module backend)])
    (report/on report phase:build-module
      (for (: (let index) (let source)) (it/with-index sources)
        (let* ([path (source/path source)]
               [mid (module-id/from-index (conv index))]
               [module (module/new-uninitialized mid path)]
               [result (semantic-analysis! module source external report)])
          (report/merge! (module/report module) report)
          (ord-map/insert! mid module modules)
          (when-match1 (err (let e)) result (return (: modules (some (: path e)))))
          (hash-map/insert! path mid path-to-module)
          (backend/add-module! module (hash-set/has? path entry-points) backend))))
    (: modules none)))

(value-data (ModuleBuildContext B)
  (module-build-context: (OrdMap ModuleId Module) (HashMap Path ModuleId) B))

(instance External.ModuleBuildContext (forall B) (External (ModuleBuildContext B)) (where (Backend B))
  (function (external/module? mid e)
    (with1 (module-build-context: (let modules) _ _) e
      (ord-map/get? mid modules)))

  (function (external/module-by-path? path e)
    (with1 (module-build-context: (let modules) (let path-map) _) e
      (ord-map/get? (hash-map/get? path path-map)? modules)))

  (function (external/execute-macro! id s e)
    (with1 (module-build-context: _ _ (let backend)) e
      (backend/execute-macro! id s backend))))
