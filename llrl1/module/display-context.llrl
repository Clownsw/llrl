(import "~/util" _)
(import "~/source-location" SourceLocation _.SourceLocation SourceLocationTable)
(import "~/syntax" [SyntaxError Error] [_.SyntaxError _.Error])
(import "~/ast" _)
(import "~/module/meaning" symbol/_)
(import "~/module/error" _)
(import "~/module/unit" _)
(import "~/module/set" _)
(export DisplayContext _.DisplayContext display-context)

(value-data (DisplayContext S)
  (display-context S SourceLocationTable))

(getter display-context module-set source-location-table)

(instance ContextualDisplay.SourceLocation.DisplayContext
  (forall S) (ContextualDisplay SourceLocation (DisplayContext S))
  (function (contextual-display! w a ctx)
    (contextual-display! w a (source-location-table ctx))))

(instance ContextualDisplay.SyntaxError.DisplayContext
  (forall S) (ContextualDisplay SyntaxError (DisplayContext S))
  (function (contextual-display! w a ctx)
    (contextual-display! w a (source-location-table ctx))))

(instance ContextualDisplay.ErrorFocus.DisplayContext
  (forall S) (ContextualDisplay ErrorFocus (DisplayContext S)) (where (ModuleSet S))
  (function (contextual-display! w a ctx)
    (match a
      [(error-focus:name-of (let c))
        (display-symbol-name! w c ctx)]
      [(error-focus:loc-of (let c))
        (if-match1 (some (let symbol)) (module-set/symbol? c (module-set ctx))
          (contextual-display! w (symbol/loc symbol) (source-location-table ctx))
          (display! w "<unknown location>"))])))

($$ begin
  ($for-each $ty [KindUse TypeUse TypeParameter ConstraintUse PatternUse PatternVar DataTypeCon BuiltinTypeCon BuiltinValueCon ClassCon InstanceCon]
    (instance ($symbol-concat ContextualDisplay. $ty .DisplayContext)
      (forall S) (ContextualDisplay (NodeId $ty) (DisplayContext S)) (where (ModuleSet S))
      (function (contextual-display! w a ctx)
        (display-symbol-name! w (conv a) ctx)))))

(instance ContextualDisplay.DataValueCon.DisplayContext
  (forall S) (ContextualDisplay (NodeId DataValueCon) (DisplayContext S)) (where (ModuleSet S))
  (function (contextual-display! w a ctx)
    (if-match1 (some (let value)) (value-con/bool? (value-con:data a))
      (display! w value)
      (display-symbol-name! w (conv a) ctx))))

(function (display-symbol-name! w c ctx)
  (if-match1 (some (let symbol)) (module-set/symbol? c (module-set ctx))
    (display! w (symbol/name symbol))
    (display! w c {Construct})))
