(import "std/memory" ptr/_)
(import "~/execution-engine" _)
(import "~/context" _)
(import "~/data-layout" _)
(import "~/type" _)
(import "~/value" _)
(import "~/module" _)
(import "~/target" _)
(import "~/target-machine" _)
(import "~/builder" _)
(println! "llvm1/tests/execution-engine")

(function (ee-unavailable s)
  (println! "    ... is not available: " s)
  unit)

(function (dump-ee ee)
  (println! "    data-layout = " (execution-engine/data-layout ee))
  (match (execution-engine/target-machine? ee)
    [(some (let tm))
      (println! "    target-machine = {target = " (target-machine/target tm) ", triple = " (target-machine/triple tm) "}")]
    [none
      (println! "    target-machine = none")])
  unit)

(with-context (lambda (ctx)
  (println! "  Interpreter")
  (with-interpreter ctx ee-unavailable dump-ee)))

(with-context (lambda (ctx)
  (println! "  MCJIT")
  (with-mcjit ctx none none none none ee-unavailable (lambda (ee)
    (dump-ee ee)

    (let1 module (module/new "module" ctx)
      (let* ([f (module/add-function! "sqrLength" (type/build ctx (-> double double double)) module)]
             [a (get (function/params f)[0])]
             [b (get (function/params f)[1])])
        (with-builder (function/append-block! "entry" f) (lambda (builder)
          (builder/build! builder (ret (fadd (fmul ,a ,a) (fmul ,b ,b)))))))
      (execution-engine/add-module! module ee))

    (let* ([addr (execution-engine/get-function-address "sqrLength" ee)]
           [(sqr-length a b) (<sqr-length> (ptr/from-address addr) a b)])
      (assert-eq? 25 (sqr-length 3 4)))))))

(builtin-op <sqr-length> {(-> (Ptr U8) F64 F64 F64)} "call.c")
