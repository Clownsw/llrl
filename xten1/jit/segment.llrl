(import "std/memory" ptr/_ ptr:null)
(import "~/jit/mmap" _)
(export Segment _.Segment segment/_)
(export SegmentPart _.SegmentPart segment-part/_)

; A collection of non-contiguous `Mmap`s with the same `Protect`.
(derive (DebugDisplay) data Segment
  (segment: Protect Bool (Vector Mmap) (Ref U64))) ; protect map-32bit? chunks offset

(function (segment/new protect map-32bit?) {(-> Protect Bool Segment)}
  (segment: protect map-32bit? vector/empty (ref 0)))

(function (segment/protect segment) {(-> Segment Protect)}
  (with1 (segment: (let protect) _ _ _) segment protect))

; Allocates free space for the specified size.
; If there is not enough space, a new mmap is created.
(function (segment/allocate! size segment) {(-> U64 Segment (Result SegmentPart Error))}
  (with1 (segment: (let protect) (let map-32bit?) (let chunks) (let offset)) segment
    (when (eq? size 0) (return (ok (segment-part: none 0 0))))
    (let1
      mmap
      (if-match ([(some (: (let mmap) _)) (|> chunks vector/buffer array/split-last?)]
                 [#t (<= (+ ~offset size) (mmap/size mmap))])
        mmap
        (let1 mmap (mmap/new! (/ (- (+ size mmap/page-size) 1) mmap/page-size) protect map-32bit?)!
          (vector/push! mmap chunks)
          (set! offset 0)
          mmap))
      (set! offset (+ ~offset size))
      (ok (segment-part: (some mmap) (- ~offset size) size)))))

; Dispose the Segment. Every Mmap internally allocated will be unmapped.
(function (segment/dispose! segment) {(-> Segment (Result unit Error))}
  (with1 (segment: _ _ (let chunks) _) segment
    (for (let mmap) (vector/consume-all! chunks) (mmap/unmap! mmap)!))
  (ok unit))

; Free space allocated from the segment.
(derive (DebugDisplay) data SegmentPart
  (segment-part: (Option Mmap) U64 U64)) ; mmap offset size

(function (segment-part/mmap? part) {(-> SegmentPart (Option Mmap))}
  (with1 (segment-part: (let mmap) _ _) part mmap))

(function (segment-part/size part) {(-> SegmentPart U64)}
  (with1 (segment-part: _ _ (let size)) part size))

(function (segment-part/ptr part) {(-> SegmentPart (Ptr U8))}
  (if-match1 (segment-part: (some (let mmap)) (let offset) _) part
    (ptr/add offset (mmap/ptr mmap))
    ptr:null))

(function (segment-part/with-protect! protect part f)
  {(forall A) (-> Protect SegmentPart (-> (Ptr U8) A) (Result A Error))}
  (if-match1 (segment-part: (some (let mmap)) (let offset) _) part
    (let* ([stashed-protect (mmap/protect mmap)]
           [_ (mmap/set-protect! protect mmap)!]
           [result (f (ptr/add offset (mmap/ptr mmap)))]
           [_ (mmap/set-protect! stashed-protect mmap)!])
      (ok result))
    (ok (f ptr:null))))
